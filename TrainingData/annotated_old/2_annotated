=============================== PAGE ===================================
=============================== COL ===================================
2 <text font="0" height="20" left="89" textpieces="0" top="156" width="745">Improving the Table Boundary Detection in PDFs by Fixing the Sequence Error</text>
2 <text font="0" height="20" left="372" textpieces="0" top="183" width="178">of the Sparse Lines</text>
2 <text font="1" height="17" left="284" textpieces="0" top="243" width="354">Ying Liu, Kun Bai, Prasenjit Mitra, C. Lee Giles</text>
2 <text font="1" height="17" left="282" textpieces="0" top="265" width="357">College of Information Sciences and Technology</text>
2 <text font="1" height="17" left="262" textpieces="0" top="286" width="398">The Penn State University, University Park, PA, 16803</text>
2 <text font="1" height="24" left="320" textpieces="0" top="303" width="282">{yliu, kbai, pmitra, giles}@ist.psu.edu</text>
2 <text font="2" height="16" left="230" textpieces="0" top="371" width="68">Abstract</text>
2 <text font="3" height="14" left="102" textpieces="0" top="410" width="342">As the rapid growth of PDF documents, recognizing the</text>
2 <text font="3" height="14" left="84" textpieces="0" top="428" width="360">document structure and components are useful for docu-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="446" width="360">ment storage, classication and retrieval. Table, a ubiqui-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="465" width="360">tous document component, becomes an important informa-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="483" width="360">tion source. Accurately detecting the table boundary plays</text>
2 <text font="3" height="14" left="84" textpieces="0" top="501" width="360">a crucial role for many applications, e.g., the increasing</text>
2 <text font="3" height="14" left="84" textpieces="0" top="519" width="360">demand on the table data search. Rather than converting</text>
2 <text font="3" height="14" left="84" textpieces="0" top="537" width="360">PDFs to image or HTML and then processing with other</text>
2 <text font="3" height="14" left="84" textpieces="0" top="556" width="360">techniques (e.g., OCR), extracting and analyzing texts from</text>
2 <text font="3" height="14" left="84" textpieces="0" top="574" width="360">PDFs directly is easy and accurate. However, text extrac-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="592" width="360">tion tools face a common problem: text sequence error. In</text>
2 <text font="3" height="14" left="84" textpieces="0" top="610" width="360">this paper, we propose two algorithms to recover the se-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="629" width="360">quence of extracted sparse lines, which improve the table</text>
2 <text font="3" height="14" left="84" textpieces="0" top="647" width="360">content collection. The experimental results show the com-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="665" width="360">parison of the performance of both algorithms, and demon-</text>
2 <text font="3" height="14" left="84" textpieces="0" top="683" width="360">strate the effectiveness of text sequence recovering for the</text>
2 <text font="3" height="14" left="84" textpieces="0" top="701" width="156">table boundary detection.</text>
2 <text font="2" height="16" left="84" textpieces="0" top="757" width="117">1. Introduction</text>
2 <text font="4" height="14" left="102" textpieces="0" top="774" width="342">Portable document format (PDF) is a widely used docu-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="793" width="360">ment format. Although many researchers analyze PDF doc-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="811" width="360">uments by converting them to other formats (e.g., image,</text>
2 <text font="4" height="14" left="84" textpieces="0" top="829" width="360">html), automatically identifying the PDF document logical</text>
2 <text font="4" height="14" left="84" textpieces="0" top="847" width="360">structures information and document components (e.g., g-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="866" width="360">ures, tables, etc) are still challenging problems [2] because</text>
2 <text font="4" height="14" left="84" textpieces="0" top="884" width="360">of three main reasons: 1) extracted texts from PDF les are</text>
2 <text font="4" height="14" left="84" textpieces="0" top="902" width="360">non-tagged; 2) wrong text sequences are generated by the</text>
2 <text font="4" height="14" left="84" textpieces="0" top="920" width="360">text extraction tools; 3) new noises are caused by necessary</text>
2 <text font="4" height="14" left="84" textpieces="0" top="939" width="360">tools (e.g., OCR) when converting the PDFs into other for-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="957" width="107">mat (e.g., image).</text>
2 <text font="4" height="14" left="102" textpieces="0" top="975" width="342">Tables, as a specic document component, are ubiqui-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="993" width="360">tous everywhere. To thoroughly analyzing the table con-</text>
2 <text font="4" height="14" left="84" textpieces="0" top="1011" width="360">tent, locating the table boundary in a document is the rst</text>
2 <text font="4" height="14" left="84" textpieces="0" top="1030" width="360">and crucial step for consequent applications (e.g., the table</text>
2 <text font="4" height="14" left="84" textpieces="0" top="1048" width="360">search). Because most of the tables in scientic documents</text>
2 <text font="4" height="14" left="84" textpieces="0" top="1066" width="360">are text-based tables, solely analyzing the text objects in</text>
=============================== COL ===================================
2 <text font="4" height="14" left="478" textpieces="0" top="373" width="360">a PDF le can achieve good performance in terms of sav-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="392" width="360">ing efforts on other objects. However, existing text extrac-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="410" width="360">tion tools face a common problem: the extracted text pieces</text>
2 <text font="4" height="14" left="478" textpieces="0" top="428" width="360">follow a different sequence from its original appearance in</text>
2 <text font="4" height="14" left="478" textpieces="0" top="446" width="360">PDF les. Although the wrong sequence does not affect</text>
2 <text font="4" height="14" left="478" textpieces="0" top="465" width="360">the PDF documents displaying for browsing purpose, it can</text>
2 <text font="4" height="14" left="478" textpieces="0" top="483" width="360">severely interfere the document content analyzing works</text>
2 <text font="4" height="14" left="478" textpieces="0" top="501" width="360">that rely on the information of the relative location and se-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="519" width="360">quence among the text pieces. Table boundary detection is</text>
2 <text font="4" height="14" left="478" textpieces="0" top="537" width="360">a typical example. In order to improve the accuracy of the</text>
2 <text font="4" height="14" left="478" textpieces="0" top="556" width="360">table boundary detection, we need to recover the extracted</text>
2 <text font="4" height="14" left="478" textpieces="0" top="574" width="360">text sequences to the orders that comply with the humans</text>
2 <text font="4" height="14" left="478" textpieces="0" top="592" width="360">reading habit. The sequence errors can be classied into two</text>
2 <text font="4" height="14" left="478" textpieces="0" top="610" width="360">types: within-table errors and beyond-table errors. In this</text>
2 <text font="4" height="14" left="478" textpieces="0" top="629" width="360">paper, we propose two text sequence recovering algorithms</text>
2 <text font="4" height="14" left="478" textpieces="0" top="647" width="360">to x them. Our algorithms start with the detected sparse</text>
2 <text font="4" height="14" left="478" textpieces="0" top="665" width="360">lines in each PDF page and detect the table boundaries by</text>
2 <text font="4" height="14" left="478" textpieces="0" top="683" width="360">analyzing the sparse areas and the caption information. The</text>
2 <text font="4" height="14" left="478" textpieces="0" top="701" width="360">detail of the sparse line detection is out of the scope of this</text>
2 <text font="4" height="14" left="478" textpieces="0" top="720" width="354">paper. If interested, the details can be found in [3] and [4].</text>
2 <text font="4" height="14" left="496" textpieces="0" top="738" width="342">The rest of the paper is organized as follows. Section 2</text>
2 <text font="4" height="14" left="478" textpieces="0" top="756" width="360">gives the denition for main terms used in this paper. Sec-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="775" width="360">tion 3 elaborates two text sequence error categories. Section</text>
2 <text font="4" height="14" left="478" textpieces="0" top="793" width="360">4 introduces two text sequence recovering algorithms and</text>
2 <text font="4" height="14" left="478" textpieces="0" top="811" width="360">how to detect the table boundary based on the recovered se-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="829" width="360">quences. Section 5 demonstrates the experimental results.</text>
2 <text font="4" height="14" left="478" textpieces="0" top="848" width="326">Conclusion and future work are included in section 6.</text>
2 <text font="2" height="16" left="478" textpieces="1" top="889" width="157">2  Term Denitions</text>
2 <text font="4" height="14" left="496" textpieces="1" top="910" width="342">Free online dictionary1denes a table as an orderly ar-</text>
2 <text font="3" height="14" left="478" textpieces="0" top="928" width="360">rangement of data, especially one in which the data are ar-</text>
2 <text font="3" height="14" left="478" textpieces="0" top="946" width="360">ranged in columns and rows in an essentially rectangular</text>
2 <text font="3" height="14" left="478" textpieces="0" top="964" width="360">form. In addition, we add an additional restriction on the</text>
2 <text font="4" height="14" left="478" textpieces="0" top="983" width="360">denition of tables in scientic documents: each table has</text>
2 <text font="4" height="14" left="478" textpieces="0" top="1001" width="360">a caption that starts with a keyword (e.g., Table or TA-</text>
2 <text font="4" height="14" left="478" textpieces="0" top="1019" width="360">BLE). With this restriction, the tables can be understood</text>
2 <text font="4" height="14" left="478" textpieces="0" top="1037" width="360">as genuine tables [6]. The table boundary includes all the</text>
2 <text font="6" height="8" left="495" textpieces="0" top="1066" width="196">1http://www.thefreedictionary.com/table</text>
=============================== COL ===================================
2 <text font="4" height="14" left="230" textpieces="0" top="68" width="457">2009 10th International Conference on Document Analysis and Recognition</text>
=============================== COL ===================================
2 <text font="7" height="11" left="75" textpieces="0" top="1112" width="213">978-0-7695-3725-2/09 $25.00  2009 IEEE</text>
2 <text font="7" height="11" left="75" textpieces="0" top="1127" width="152">DOI 10.1109/ICDAR.2009.138</text>
2 <text font="7" height="11" left="447" textpieces="0" top="1112" width="24">1006</text>
2 <text font="8" height="8" left="107" textpieces="0" top="1175" width="555">Authorized licensed use limited to: Penn State University. Downloaded on February 9, 2010 at 16:37 from IEEE Xplore.  Restrictions apply. </text>
=============================== PAGE ===================================
=============================== COL ===================================
2 <text font="9" height="13" left="103" textpieces="0" top="162" width="340">parts in the Wangs model [5]. Both table caption and foot-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="179" width="124">note are not included.</text>
2 <text font="9" height="13" left="120" textpieces="0" top="197" width="323">Different lines in the same page have different internal</text>
2 <text font="10" height="13" left="103" textpieces="0" top="214" width="340">space size, text density, and length. A document page con-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="232" width="340">tains at least one column and many have two (e.g., ACM and</text>
2 <text font="9" height="13" left="103" textpieces="0" top="249" width="340">IEEE conference formats), or three even four columns. The</text>
2 <text font="9" height="13" left="103" textpieces="0" top="266" width="340">length of lines can be equal to, longer (e.g., cross-column</text>
2 <text font="9" height="13" left="103" textpieces="0" top="283" width="340">lines), or shorter (e.g., some headings) than the width of the</text>
2 <text font="9" height="13" left="103" textpieces="0" top="300" width="340">document column. Because single-column documents are</text>
2 <text font="9" height="13" left="103" textpieces="0" top="318" width="340">easy to process, in this paper, we focus on the most popular</text>
2 <text font="9" height="13" left="103" textpieces="0" top="335" width="340">yet challenging digital document template: double-column</text>
2 <text font="9" height="13" left="103" textpieces="0" top="352" width="340">formatting. From the internal space perspective, the major-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="369" width="340">ity of the lines contain normal space size while some lines</text>
2 <text font="9" height="13" left="103" textpieces="0" top="386" width="340">have large space size, between two adjacent words. We de-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="404" width="340">ne a line as a sparse line if it satises at least one of the</text>
2 <text font="9" height="13" left="103" textpieces="0" top="421" width="340">following conditions: 1) This line contains at least one large</text>
2 <text font="9" height="13" left="103" textpieces="0" top="438" width="340">space gap between a pair of consecutive words within the</text>
2 <text font="9" height="13" left="103" textpieces="0" top="455" width="340">line; 2) The length of this line is much shorter than a thresh-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="472" width="340">old ll; Note, different denitions of large and the thresh-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="490" width="340">old ll generate different results. Based on the observation</text>
2 <text font="9" height="13" left="103" textpieces="0" top="507" width="340">and the statistical results on thousands of table examples, in</text>
2 <text font="9" height="13" left="103" textpieces="0" top="524" width="340">this paper we set the large as the double of the average</text>
2 <text font="9" height="13" left="103" textpieces="0" top="541" width="340">space between words in document body content lines, and</text>
2 <text font="10" height="13" left="103" textpieces="0" top="558" width="284">ll as the two third of the document column width;</text>
2 <text font="10" height="13" left="120" textpieces="0" top="576" width="323">Non-sparse lines, which satisfy neither of the conditions,</text>
2 <text font="9" height="13" left="103" textpieces="0" top="593" width="340">usually occur in the following document components: long</text>
2 <text font="9" height="13" left="103" textpieces="0" top="611" width="340">document titles, the abstracts, the body content paragraphs,</text>
2 <text font="9" height="13" left="103" textpieces="0" top="628" width="340">etc. Sparse lines cover other specic document compo-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="645" width="340">nents: tables, texts in gures, mathematical formulas, doc-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="662" width="340">ument afliations, and references, etc. Since the majority</text>
2 <text font="9" height="13" left="103" textpieces="0" top="679" width="340">lines in a document are non-sparse lines, ltering them out</text>
2 <text font="9" height="13" left="103" textpieces="0" top="697" width="340">as early as possible is an effective preprocessing step for the</text>
2 <text font="9" height="13" left="103" textpieces="0" top="714" width="340">table boundary detection because we can save a substantial</text>
2 <text font="9" height="13" left="103" textpieces="0" top="731" width="340">amount of time and effort and narrow down the table bound-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="748" width="340">ary to the sparse lines easily. The detection and ltering</text>
2 <text font="9" height="13" left="103" textpieces="0" top="765" width="340">work is out the scope of this paper. If interested, the details</text>
2 <text font="9" height="13" left="103" textpieces="0" top="783" width="340">can be found in [3] [4]. Our text sequence recovering algo-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="800" width="340">rithm starts with the detected sparse lines. Figure 1 shows</text>
2 <text font="9" height="13" left="103" textpieces="0" top="817" width="340">in a document page with a wide table while Figure 2 shows</text>
2 <text font="9" height="13" left="103" textpieces="0" top="834" width="340">the ltered sparse lines in another document page with two</text>
2 <text font="9" height="13" left="103" textpieces="0" top="851" width="84">parallel tables.</text>
2 <text font="11" height="16" left="103" textpieces="1" top="891" width="222">3  The text sequence problem</text>
2 <text font="9" height="13" left="120" textpieces="0" top="912" width="323">Given a PDF document page, the human reading se-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="929" width="340">quence is usually top-down, left-to-right, and line by line,</text>
2 <text font="9" height="13" left="103" textpieces="0" top="947" width="340">column by column. Particularly, some document compo-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="964" width="340">nents in the page may cross multiple document columns,</text>
2 <text font="9" height="13" left="103" textpieces="0" top="981" width="340">such as the document title, the afliation, some wide ta-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="998" width="340">bles and gures. Although the text extraction tools can ex-</text>
2 <text font="9" height="13" left="103" textpieces="0" top="1015" width="340">tract all the text information from a PDF page, the sequence</text>
2 <text font="9" height="13" left="103" textpieces="0" top="1032" width="340">of the exported texts may not reect the human reading</text>
2 <text font="9" height="13" left="103" textpieces="0" top="1050" width="340">ordering. The text sequence error is a common problem</text>
2 <text font="9" height="13" left="103" textpieces="0" top="1067" width="340">shared by existing text extraction tools (e.g., PDF2TEXT,</text>
=============================== COL ===================================
2 <text font="12" height="13" left="492" textpieces="0" top="347" width="305">Figure 1. A document page with a cross-</text>
2 <text font="12" height="13" left="492" textpieces="0" top="365" width="305">column table (left) and its sparse lines (right)</text>
2 <text font="12" height="13" left="492" textpieces="0" top="567" width="305">Figure 2. A document page with two parallel</text>
2 <text font="12" height="13" left="492" textpieces="0" top="584" width="258">tables (left) and its sparse lines (right)</text>
2 <text font="9" height="13" left="475" textpieces="0" top="617" width="340">PDFBOX, TET, PDFTextStream). Such text sequence error</text>
2 <text font="9" height="13" left="475" textpieces="0" top="634" width="340">happens frequently in the table contents, which may gener-</text>
2 <text font="9" height="13" left="475" textpieces="0" top="651" width="340">ates serious wrong results during the table detection, such as</text>
2 <text font="9" height="13" left="475" textpieces="0" top="668" width="340">segmenting a table into several pieces, wrong column/row</text>
2 <text font="9" height="13" left="475" textpieces="0" top="686" width="340">information, and omitting cells/whole tables etc. Some of</text>
2 <text font="9" height="13" left="475" textpieces="0" top="703" width="340">the errors can be xed with complex post-processing while</text>
2 <text font="9" height="13" left="475" textpieces="0" top="720" width="340">others can not. According to the scope of the text sequence</text>
2 <text font="9" height="13" left="475" textpieces="0" top="737" width="340">errors, we category them into two classes: inside-table text</text>
2 <text font="9" height="13" left="475" textpieces="0" top="754" width="301">sequence error and beyond-table text sequence error.</text>
2 <text font="9" height="13" left="492" textpieces="0" top="773" width="323">Figure 3a provides an example of the inside-table text</text>
2 <text font="9" height="13" left="475" textpieces="0" top="790" width="340">sequence error. The text extraction tools export 33 sparse</text>
2 <text font="9" height="13" left="475" textpieces="0" top="807" width="340">lines in such a sequence: Content (% m/m), Proposed</text>
2 <text font="10" height="13" left="475" textpieces="0" top="825" width="340">method, Peak Peak, Sample Element height area,</text>
2 <text font="10" height="13" left="475" textpieces="0" top="842" width="340">Low melt Ag 43.9 44.1, 0.5 2.4, Cu 15.6 15.2, 2.7</text>
2 <text font="10" height="13" left="475" textpieces="0" top="859" width="340">1.8, Sample No.318+ Ag 25.7 25.2, Cu 34.4 33.7,</text>
2 <text font="10" height="13" left="475" textpieces="0" top="876" width="340">2.3 1.3, 2.1 2.1, Reference, Flame value, AAS</text>
2 <text font="10" height="13" left="475" textpieces="1" top="893" width="340">(%m/m), 45.1 44.46, 15.3 14-16, 25.725, 34.8</text>
2 <text font="9" height="19" left="475" textpieces="0" top="907" width="340">35, 1.1, 2.5, 1.4, 2.5. The sequence is: the</text>
2 <text font="9" height="13" left="475" textpieces="0" top="928" width="340">rst four columns, then the last two columns. Moreover,</text>
2 <text font="9" height="13" left="475" textpieces="0" top="945" width="340">within the same column, the ordering of rows does not ex-</text>
2 <text font="9" height="13" left="475" textpieces="0" top="962" width="340">actly follow the top-down manner. In this type, the errors</text>
2 <text font="9" height="13" left="475" textpieces="0" top="979" width="340">happen only within the table boundary and no outside text</text>
2 <text font="9" height="13" left="475" textpieces="0" top="997" width="340">interrupts them. No matter how disordered the sequence is,</text>
2 <text font="9" height="13" left="475" textpieces="0" top="1014" width="296">all the contents of a table come together as a whole.</text>
2 <text font="9" height="13" left="492" textpieces="0" top="1032" width="323">In beyond-table text sequence error, the table lines are</text>
2 <text font="9" height="13" left="475" textpieces="0" top="1050" width="340">partitioned into at least two parts by non-table lines. The</text>
2 <text font="9" height="13" left="475" textpieces="0" top="1067" width="340">text extraction tools usually export a part of the table con-</text>
2 <text font="7" height="11" left="447" textpieces="0" top="1112" width="24">1007</text>
2 <text font="8" height="8" left="107" textpieces="0" top="1175" width="555">Authorized licensed use limited to: Penn State University. Downloaded on February 9, 2010 at 16:37 from IEEE Xplore.  Restrictions apply. </text>
=============================== PAGE ===================================
=============================== COL ===================================
2 <text font="13" height="11" left="255" textpieces="0" top="304" width="13">(a)</text>
2 <text font="13" height="11" left="255" textpieces="0" top="513" width="14">(b)</text>
2 <text font="12" height="14" left="105" textpieces="0" top="552" width="319">Figure 3. Two examples of the text sequence</text>
2 <text font="12" height="14" left="105" textpieces="0" top="570" width="43">errors</text>
2 <text font="9" height="14" left="87" textpieces="0" top="622" width="355">tent rst, jump to another document area and process it, and</text>
2 <text font="9" height="14" left="87" textpieces="0" top="640" width="355">then come back to nish the rest of the table sections. Such</text>
2 <text font="9" height="14" left="87" textpieces="0" top="658" width="355">alternation happens at least once. Figure 3b shows an exam-</text>
2 <text font="9" height="14" left="87" textpieces="0" top="676" width="355">ple: the text extraction tools output the table caption rst on</text>
2 <text font="9" height="14" left="87" textpieces="0" top="694" width="355">the second document column, then jump to the rst docu-</text>
2 <text font="9" height="14" left="87" textpieces="0" top="712" width="355">ment column on the left and process some scattered texts in</text>
2 <text font="9" height="14" left="87" textpieces="0" top="730" width="355">the gures. After telling the gure caption, they come back</text>
2 <text font="9" height="14" left="87" textpieces="0" top="748" width="355">to the table area. Sometimes, the tools extract several table</text>
2 <text font="9" height="14" left="87" textpieces="0" top="766" width="355">columns then jump to other areas (e.g., the following regu-</text>
2 <text font="9" height="14" left="87" textpieces="0" top="784" width="355">lar document contents) to nish several lines or paragraphs,</text>
2 <text font="9" height="14" left="87" textpieces="0" top="802" width="355">then return to the table data again. With such beyond-table</text>
2 <text font="9" height="14" left="87" textpieces="0" top="820" width="355">text sequence errors, collecting all the table cells is a chal-</text>
2 <text font="9" height="14" left="87" textpieces="0" top="838" width="355">lenging task because it is difcult to predict how far the</text>
2 <text font="9" height="14" left="87" textpieces="0" top="856" width="246">distances are among different table parts.</text>
2 <text font="9" height="14" left="105" textpieces="0" top="887" width="337">In order to accurately collect the table cells from a page</text>
2 <text font="9" height="14" left="87" textpieces="0" top="905" width="355">and recover the sequence, resorting the texts in the page is</text>
2 <text font="9" height="14" left="87" textpieces="0" top="922" width="355">one approach. B. Yildiz et. al mentioned the similar idea</text>
2 <text font="9" height="14" left="87" textpieces="0" top="940" width="355">in [7] but without any detail about the methodology and the</text>
2 <text font="9" height="14" left="87" textpieces="0" top="958" width="355">performance. Other proposed approaches [1] exploit geo-</text>
2 <text font="9" height="14" left="87" textpieces="0" top="976" width="355">metric or typographic features of the page objects, and go</text>
2 <text font="9" height="14" left="87" textpieces="0" top="994" width="355">further in exploiting the content of object. X-Y cut approach</text>
2 <text font="9" height="14" left="87" textpieces="0" top="1012" width="355">is a representing method. However, its performance is not</text>
2 <text font="9" height="14" left="87" textpieces="0" top="1030" width="355">satisfying. Moreover, these proposed works need to process</text>
2 <text font="9" height="14" left="87" textpieces="0" top="1048" width="355">both sparse lines and non-sparse lines. The more non-sparse</text>
2 <text font="9" height="14" left="87" textpieces="0" top="1066" width="286">lines involve, the higher possibility errors incur.</text>
=============================== COL ===================================
2 <text font="11" height="16" left="476" textpieces="1" top="119" width="306">4  Text sequence recovering algorithms</text>
2 <text font="9" height="14" left="493" textpieces="0" top="141" width="337">To x the text sequence error problem, we propose two</text>
2 <text font="9" height="14" left="476" textpieces="0" top="159" width="355">methods to resort the detected sparse lines within a given</text>
2 <text font="9" height="14" left="476" textpieces="0" top="177" width="355">area. For the inside-table text sequence errors, the area is</text>
2 <text font="9" height="14" left="476" textpieces="0" top="195" width="355">the table itself. For the beyond-table text sequence errors,</text>
2 <text font="9" height="14" left="476" textpieces="0" top="213" width="355">the area is the whole page. Some pages have multiple doc-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="231" width="355">ument columns, whether considering such information or</text>
2 <text font="9" height="14" left="476" textpieces="0" top="249" width="355">not may generate different results for different cases. In</text>
2 <text font="9" height="14" left="476" textpieces="0" top="267" width="355">this paper, we try both of them and analyze their advan-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="285" width="122">tages/disadvantages.</text>
2 <text font="14" height="15" left="476" textpieces="1" top="325" width="355">4.1  Algorithm 1: Considering the docu-</text>
2 <text font="14" height="15" left="519" textpieces="0" top="343" width="211">ment column information</text>
2 <text font="9" height="14" left="493" textpieces="0" top="363" width="337">The recovering procedure includes two parts: the cross-</text>
2 <text font="10" height="14" left="476" textpieces="0" top="381" width="355">column resorting, and the within-column resorting. Here</text>
2 <text font="9" height="14" left="476" textpieces="0" top="399" width="355">the column refers to the document column instead of the</text>
2 <text font="9" height="14" left="476" textpieces="0" top="417" width="355">table column. How to get the document column informa-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="435" width="355">tion is out of scope of this paper. We adopt an easy but</text>
2 <text font="9" height="14" left="476" textpieces="0" top="453" width="355">effective method by calculating the average length of the</text>
2 <text font="9" height="14" left="476" textpieces="0" top="471" width="355">non-sparse lines then comparing with the document width.</text>
2 <text font="9" height="14" left="476" textpieces="0" top="489" width="355">For the inside-table text sequence disordering, we only im-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="507" width="355">plement the within-column resorting. For the beyond-table</text>
2 <text font="10" height="14" left="476" textpieces="0" top="525" width="355">text sequence disordering, we have to implement both re-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="543" width="51">sortings.</text>
2 <text font="9" height="14" left="493" textpieces="1" top="562" width="337">In the cross-column resorting,SL denotes the set of all</text>
2 <text font="9" height="14" left="476" textpieces="1" top="580" width="264">the sparse lines in a document page: SL =</text>
2 <text font="5" height="11" left="758" textpieces="0" top="575" width="11">m</text>
2 <text font="5" height="11" left="758" textpieces="1" top="587" width="72">i=1(li). For</text>
2 <text font="9" height="14" left="476" textpieces="2" top="598" width="355">a document columnCOk, its beginning and ending X-axes</text>
2 <text font="9" height="14" left="476" textpieces="5" top="616" width="355">values areXcok andXcok. Each column has a vectorv to</text>
2 <text font="9" height="14" left="476" textpieces="0" top="634" width="355">store its sparse lines. Initially, the vector is empty. For each</text>
2 <text font="9" height="14" left="476" textpieces="0" top="652" width="355">sparse line, we compare its X-axis coordinates with doc-</text>
2 <text font="9" height="14" left="476" textpieces="1" top="670" width="355">ument columns and append it in the matched vectorv, if</text>
2 <text font="9" height="14" left="476" textpieces="0" top="688" width="355">applicable. Some sparse lines may cross several document</text>
2 <text font="9" height="14" left="476" textpieces="0" top="706" width="355">columns. Such lines usually are lines in cross-column ta-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="724" width="355">bles/gures or long document titles or afliations, etc. We</text>
2 <text font="9" height="14" left="476" textpieces="1" top="742" width="232">record such lines in another vectorvcc.</text>
2 <text font="9" height="14" left="493" textpieces="0" top="761" width="337">In the within-column resorting part, the inputs include</text>
2 <text font="9" height="14" left="476" textpieces="1" top="779" width="354">the lled vector V and Vcc. The output is a new vector</text>
2 <text font="9" height="19" left="476" textpieces="0" top="793" width="355">Vsorted, which stores all sorted sparse lines. For each doc-</text>
2 <text font="9" height="14" left="476" textpieces="2" top="815" width="355">ument columnCOk, we get all the Y-axis values from the</text>
2 <text font="9" height="14" left="476" textpieces="2" top="833" width="355">sparse lines in vectorvk. Among these Y-axis values, we</text>
2 <text font="9" height="14" left="476" textpieces="0" top="851" width="355">identify all the non-duplicated values and sort them, and</text>
2 <text font="9" height="14" left="476" textpieces="1" top="869" width="354">store them in a new vectorVy. With these Y-axis values, we</text>
2 <text font="9" height="14" left="476" textpieces="2" top="887" width="355">sort all sparse lines in vectorvk accordingly. This method</text>
2 <text font="9" height="14" left="476" textpieces="0" top="905" width="355">works well for the tables that are located within one doc-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="922" width="355">ument column (e.g., the table in Figure 3b). However, for</text>
2 <text font="9" height="14" left="476" textpieces="0" top="940" width="355">the wide tables that cross more than one document column</text>
2 <text font="9" height="14" left="476" textpieces="0" top="958" width="355">(see Figure 1a), this algorithm may generate errors because</text>
2 <text font="9" height="14" left="476" textpieces="0" top="976" width="355">it is difcult to know which lines should cross the docu-</text>
2 <text font="9" height="14" left="476" textpieces="0" top="994" width="355">ment columns in advance. If there are overlaps between the</text>
2 <text font="9" height="14" left="476" textpieces="0" top="1012" width="355">table column spaces and the document column spaces, this</text>
2 <text font="9" height="14" left="476" textpieces="0" top="1030" width="355">method will segment a whole table into at least two parts.</text>
2 <text font="9" height="14" left="476" textpieces="0" top="1048" width="355">Although some table lines may block the document column</text>
2 <text font="9" height="14" left="476" textpieces="0" top="1066" width="327">space, it is difcult to identify the last line of the table.</text>
2 <text font="7" height="11" left="447" textpieces="0" top="1112" width="24">1008</text>
2 <text font="8" height="8" left="107" textpieces="0" top="1175" width="555">Authorized licensed use limited to: Penn State University. Downloaded on February 9, 2010 at 16:37 from IEEE Xplore.  Restrictions apply. </text>
=============================== PAGE ===================================
=============================== COL ===================================
2 <text font="16" height="14" left="91" textpieces="0" top="112" width="332">Algorithm 1: Sorting sparse lines across the document</text>
2 <text font="4" height="14" left="91" textpieces="0" top="130" width="51">columns</text>
2 <text font="16" height="14" left="100" textpieces="1" top="148" width="204">Input: All sparse linesSL = m</text>
2 <text font="5" height="11" left="293" textpieces="0" top="155" width="36">i=1sli</text>
2 <text font="4" height="14" left="334" textpieces="0" top="148" width="55">in a page</text>
2 <text font="16" height="14" left="100" textpieces="0" top="167" width="278">Input: the information of Document columns</text>
2 <text font="4" height="20" left="145" textpieces="0" top="181" width="60">CO = p</text>
2 <text font="5" height="11" left="199" textpieces="0" top="192" width="42">k=1cok</text>
2 <text font="4" height="14" left="244" textpieces="0" top="185" width="155">. The sparse lines that are</text>
2 <text font="4" height="14" left="145" textpieces="2" top="203" width="281">located in the columncokwill be stored in the</text>
2 <text font="4" height="14" left="145" textpieces="1" top="221" width="145">corresponding vectorvk</text>
2 <text font="16" height="14" left="100" textpieces="2" top="239" width="316">Input: a vectorVccto store the cross-column sparse</text>
2 <text font="4" height="14" left="145" textpieces="2" top="258" width="86">lines.Vcc= </text>
2 <text font="16" height="14" left="100" textpieces="1" top="276" width="-8">begin       1</text>
2 <text font="16" height="14" left="123" textpieces="3" top="294" width="-31">foreachsli SL do                         2</text>
2 <text font="4" height="20" left="147" textpieces="1" top="308" width="199">xsli the starting X-axis of sli;</text>
2 <text font="17" height="10" left="87" textpieces="0" top="315" width="5">3</text>
2 <text font="4" height="20" left="147" textpieces="1" top="330" width="195">xsli the ending X-axis of sli;</text>
2 <text font="17" height="10" left="87" textpieces="0" top="337" width="5">4</text>
2 <text font="16" height="14" left="147" textpieces="3" top="354" width="-55">while the next document columncokexists do                                                    5</text>
2 <text font="4" height="20" left="170" textpieces="1" top="368" width="207">xcok the starting X-axis of cok;</text>
2 <text font="17" height="10" left="87" textpieces="0" top="375" width="5">6</text>
2 <text font="4" height="20" left="170" textpieces="1" top="389" width="203">xcok the ending X-axis of cok;</text>
2 <text font="17" height="10" left="87" textpieces="0" top="396" width="5">7</text>
2 <text font="16" height="14" left="170" textpieces="4" top="414" width="-78">if (xcok   xsli&lt; xsli   xcok) then                                              8</text>
2 <text font="4" height="20" left="193" textpieces="2" top="429" width="89">vk= vk+ sli;</text>
2 <text font="17" height="10" left="87" textpieces="0" top="436" width="5">9</text>
2 <text font="4" height="14" left="193" textpieces="1" top="451" width="-100">break;                      10</text>
2 <text font="16" height="14" left="147" textpieces="3" top="481" width="-54">ifslits no document column then                                          11</text>
2 <text font="4" height="20" left="170" textpieces="2" top="495" width="97">vcc= vcc+ sli;</text>
2 <text font="17" height="10" left="82" textpieces="0" top="502" width="11">12</text>
2 <text font="16" height="14" left="100" textpieces="1" top="529" width="-7">end      13</text>
2 <text font="14" height="15" left="82" textpieces="1" top="586" width="359">4.2  Algorithm 2: Without considering the</text>
2 <text font="14" height="15" left="125" textpieces="0" top="604" width="254">document column information</text>
2 <text font="4" height="14" left="100" textpieces="0" top="620" width="342">To deal with the above special cases, we propose an-</text>
2 <text font="4" height="14" left="82" textpieces="0" top="638" width="360">other text sorting algorithm without considering the docu-</text>
2 <text font="4" height="14" left="82" textpieces="0" top="657" width="360">ment column information at the beginning. The algorithm</text>
2 <text font="4" height="14" left="82" textpieces="0" top="675" width="360">has four steps: 1) obtaining all the non-duplicated Y-axis</text>
2 <text font="4" height="14" left="82" textpieces="0" top="693" width="360">values of the sparse lines within an area; 2) sorting these</text>
2 <text font="4" height="14" left="82" textpieces="0" top="711" width="360">Y-axis values from the top to the bottom; 3) ordering all the</text>
2 <text font="4" height="14" left="82" textpieces="0" top="730" width="360">sparse lines in the area according to the sorted Y-axis val-</text>
2 <text font="4" height="14" left="82" textpieces="0" top="748" width="360">ues; 4) exporting the sparse lines in the area orderly. For</text>
2 <text font="4" height="14" left="82" textpieces="0" top="766" width="360">the inside-table text sequence error problem, the area is the</text>
2 <text font="4" height="14" left="82" textpieces="0" top="784" width="360">table itself. For the beyond-table text sequence error prob-</text>
2 <text font="4" height="14" left="82" textpieces="0" top="802" width="360">lem, this algorithm works better for the wide tables because</text>
2 <text font="4" height="14" left="82" textpieces="0" top="821" width="360">the area refers to the whole page. All the sparse lines of</text>
2 <text font="4" height="14" left="82" textpieces="0" top="839" width="360">cross-column tables will be exported out uninterruptedly.</text>
2 <text font="4" height="14" left="82" textpieces="0" top="857" width="360">The high-risk case of this algorithm is the parallel tables.</text>
2 <text font="4" height="14" left="82" textpieces="0" top="875" width="360">Parallel tables mean two tables that are located within two</text>
2 <text font="4" height="14" left="82" textpieces="0" top="893" width="360">adjacent document columns and both tables have overlap</text>
2 <text font="4" height="14" left="82" textpieces="0" top="912" width="360">Y-axis areas (see Figure 2a). Such cases happen very infre-</text>
2 <text font="4" height="14" left="82" textpieces="0" top="930" width="360">quently. In addition, they can be xed easily by considering</text>
2 <text font="4" height="14" left="82" textpieces="0" top="948" width="265">the width and the location of table captions.</text>
2 <text font="14" height="15" left="82" textpieces="1" top="984" width="359">4.3  Detecting the Table Boundary based</text>
2 <text font="14" height="15" left="125" textpieces="0" top="1002" width="214">on the sorted sparse lines</text>
2 <text font="4" height="14" left="100" textpieces="0" top="1030" width="342">With the sorted sparse lines, we detect the table boundary</text>
2 <text font="4" height="14" left="82" textpieces="0" top="1048" width="360">by combining the table caption information. We dene a</text>
2 <text font="4" height="14" left="82" textpieces="0" top="1066" width="360">keyword list, which lists all the possible starting keywords</text>
=============================== COL ===================================
2 <text font="16" height="14" left="485" textpieces="0" top="112" width="332">Algorithm 2: Sorting sparse lines within a document</text>
2 <text font="4" height="14" left="485" textpieces="0" top="130" width="46">column</text>
2 <text font="16" height="14" left="494" textpieces="1" top="148" width="154">Input: V,Vcc, Vy, Vsorted</text>
2 <text font="16" height="14" left="494" textpieces="4" top="166" width="-8">foreachvk COkdo                      1</text>
2 <text font="4" height="20" left="517" textpieces="1" top="181" width="199">Vy all the Y-axis values in vk;</text>
2 <text font="17" height="10" left="481" textpieces="0" top="188" width="5">2</text>
2 <text font="4" height="20" left="517" textpieces="1" top="199" width="257">Vy all the non-duplicated objects in Vy;</text>
2 <text font="17" height="10" left="481" textpieces="0" top="206" width="5">3</text>
2 <text font="4" height="20" left="517" textpieces="2" top="217" width="95">Vy= Vy Vcc;</text>
2 <text font="17" height="10" left="481" textpieces="0" top="224" width="5">4</text>
2 <text font="4" height="14" left="517" textpieces="2" top="239" width="-31">sorted(Vy) ascendingly;                           5</text>
2 <text font="16" height="14" left="517" textpieces="4" top="257" width="-31">foreachYq Vydo                        6</text>
2 <text font="16" height="14" left="541" textpieces="4" top="276" width="-55">foreachsli Vkdo                            7</text>
2 <text font="16" height="14" left="564" textpieces="5" top="294" width="-78">ifYsli==Yqthen                              8</text>
2 <text font="4" height="20" left="587" textpieces="2" top="308" width="89">Vsorted+=sli;</text>
2 <text font="17" height="10" left="481" textpieces="0" top="315" width="5">9</text>
2 <text font="4" height="20" left="587" textpieces="2" top="326" width="58">Vk-=sli;</text>
2 <text font="17" height="10" left="476" textpieces="0" top="333" width="11">10</text>
2 <text font="4" height="14" left="494" textpieces="3" top="372" width="-7">sort lines inVccaccording to Y-axis;                                    11</text>
2 <text font="4" height="14" left="494" textpieces="5" top="390" width="-7">insertVccintoVsortedaccording to Y-axis;                                          12</text>
2 <text font="4" height="14" left="476" textpieces="0" top="457" width="360">of table captions, such as Table, TABLE, Form, FORM,</text>
2 <text font="4" height="14" left="476" textpieces="0" top="475" width="360">etc. Each table caption starts with a keyword. If more than</text>
2 <text font="4" height="14" left="476" textpieces="0" top="494" width="360">one table is displayed together, the keyword is very useful</text>
2 <text font="4" height="14" left="476" textpieces="0" top="512" width="360">to separate the tables from each other. At the beginning, we</text>
2 <text font="4" height="14" left="476" textpieces="0" top="530" width="360">check all the lines (not only the sparse line) in a page. Once</text>
2 <text font="4" height="14" left="476" textpieces="0" top="548" width="360">we detect a line starting with a keyword, we treat it as a table</text>
2 <text font="4" height="14" left="476" textpieces="0" top="566" width="360">caption candidate. Then we check the subsequent sorted</text>
2 <text font="4" height="14" left="476" textpieces="0" top="585" width="360">sparse lines and merge them into a sparse area, according</text>
2 <text font="4" height="14" left="476" textpieces="0" top="603" width="360">to the vertical distance between the lines. Different table</text>
2 <text font="4" height="14" left="476" textpieces="0" top="621" width="360">captions provide different hints and restraints on whether</text>
2 <text font="4" height="14" left="476" textpieces="0" top="639" width="292">we include the cross-column sparse lines or not.</text>
2 <text font="4" height="14" left="494" textpieces="0" top="661" width="342">If a table caption starts in the second document column</text>
2 <text font="4" height="14" left="476" textpieces="0" top="680" width="360">(e.g., the right table in Figure 2a), the table boundary can</text>
2 <text font="4" height="14" left="476" textpieces="0" top="698" width="360">not span the rst column. If a table caption satises one of</text>
2 <text font="4" height="14" left="476" textpieces="0" top="716" width="360">the following conditions, it is a cross-column table: 1) the</text>
2 <text font="4" height="14" left="476" textpieces="0" top="734" width="360">width of the table caption is larger than the document col-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="753" width="360">umn width; 2) the starting X-axis value of the caption is on</text>
2 <text font="4" height="14" left="476" textpieces="0" top="771" width="360">the right of the midpoint of the rst document column. Once</text>
2 <text font="4" height="14" left="476" textpieces="0" top="789" width="360">we conrm a table as a cross-column table, we treat each Y-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="807" width="360">axis value as a table row. Otherwise, every table row can</text>
2 <text font="4" height="14" left="476" textpieces="0" top="825" width="360">only include the sparse lines within the current document</text>
2 <text font="4" height="14" left="476" textpieces="0" top="844" width="360">column. Because we will zoom in and analyze the detected</text>
2 <text font="4" height="14" left="476" textpieces="0" top="862" width="360">table boundary carefully in the later table structure decom-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="880" width="360">position phase, we treat recall more importantly than preci-</text>
2 <text font="3" height="14" left="476" textpieces="0" top="898" width="342">sion by accepting false positive table boundary contents.</text>
2 <text font="4" height="14" left="494" textpieces="0" top="920" width="342">If a table caption is shorter than the document column</text>
2 <text font="4" height="14" left="476" textpieces="0" top="939" width="360">width, and its beginning position aligns with that of the rst</text>
2 <text font="4" height="14" left="476" textpieces="0" top="957" width="360">document column (see the table caption in Figure 1), it is</text>
2 <text font="4" height="14" left="476" textpieces="0" top="975" width="360">difcult to judge whether this table a cross-column table or</text>
2 <text font="4" height="14" left="476" textpieces="0" top="993" width="360">not. For such a case, we assume it as a single-column table</text>
2 <text font="4" height="14" left="476" textpieces="0" top="1011" width="360">initially, after gure out the document column where the</text>
2 <text font="4" height="14" left="476" textpieces="0" top="1030" width="360">caption belongs to, we check the same Y-axis area in the</text>
2 <text font="4" height="14" left="476" textpieces="0" top="1048" width="360">next document column. If this area is also a sparse area, we</text>
2 <text font="4" height="14" left="476" textpieces="0" top="1066" width="360">merge the new area into the table boundary and treat this</text>
2 <text font="7" height="11" left="447" textpieces="0" top="1112" width="24">1009</text>
2 <text font="8" height="8" left="107" textpieces="0" top="1175" width="555">Authorized licensed use limited to: Penn State University. Downloaded on February 9, 2010 at 16:37 from IEEE Xplore.  Restrictions apply. </text>
=============================== PAGE ===================================
=============================== COL ===================================
2 <text font="4" height="14" left="83" textpieces="0" top="108" width="358">table as a cross-column table. Once we nd a new table</text>
2 <text font="4" height="14" left="83" textpieces="0" top="126" width="358">caption in the new area, it indicates the existing of parallel</text>
2 <text font="4" height="14" left="83" textpieces="0" top="144" width="39">tables.</text>
2 <text font="2" height="16" left="83" textpieces="1" top="185" width="220">5  Experiments and Results</text>
2 <text font="4" height="14" left="101" textpieces="0" top="205" width="340">Our experiments can be divided into two parts: the eval-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="223" width="358">uation of the text sequence recovering and the table bound-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="241" width="358">ary detection. A ve-user study is implemented. Each user</text>
2 <text font="4" height="14" left="83" textpieces="0" top="259" width="358">checked the sequence of the resorted sparse lines in 20 se-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="277" width="358">lected PDF pages. Half of them have within-table sequence</text>
2 <text font="4" height="14" left="83" textpieces="0" top="295" width="358">errors and the other half have beyond-table sequence errors.</text>
2 <text font="4" height="14" left="83" textpieces="2" top="313" width="359">The evaluation metric is pairwise accuracy. IfHRis the</text>
2 <text font="4" height="14" left="83" textpieces="2" top="331" width="359">sequence decided by human judgement andARis the se-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="350" width="358">quence decided by the algorithms, the pairwise accuracy</text>
2 <text font="4" height="14" left="83" textpieces="0" top="368" width="358">can be dened as the fraction of times that our algorithms</text>
2 <text font="4" height="14" left="83" textpieces="0" top="386" width="358">and human judges agree on the sequence: pairwise accu-</text>
2 <text font="3" height="14" left="83" textpieces="0" top="406" width="41">racy =</text>
2 <text font="5" height="14" left="131" textpieces="1" top="399" width="52">|HRAR|</text>
2 <text font="5" height="11" left="147" textpieces="0" top="414" width="18">HR</text>
2 <text font="4" height="14" left="184" textpieces="0" top="406" width="257">. For algorithm 1, the correct sequence of</text>
2 <text font="4" height="14" left="83" textpieces="0" top="424" width="358">human judge is column by column. For algorithm 2, hu-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="442" width="358">mans treat each page as a single-column page. Comparing</text>
2 <text font="4" height="14" left="83" textpieces="0" top="460" width="358">such golden standard, the pairwise accuracy of both al-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="478" width="358">gorithms are 100%. Still using the Figure 3a as the example,</text>
2 <text font="4" height="14" left="83" textpieces="1" top="497" width="359">with our algorithms, the13 non-duplicated Y-axis values af-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="515" width="358">ter the sorting step are: 625.47974, 643.07983, 651.9796,</text>
2 <text font="3" height="14" left="83" textpieces="0" top="533" width="358">660.68005, 669.5801, 681.4798, 690.27966, 699.0797,</text>
2 <text font="3" height="14" left="83" textpieces="0" top="551" width="358">707.7796, 716.3797, 725.1799, 734.0797, 744.37976. Be-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="569" width="358">cause the text sequence error always starts with the left</text>
2 <text font="4" height="14" left="83" textpieces="0" top="587" width="358">columns rst, we do not need to sort the text pieces with</text>
2 <text font="4" height="14" left="83" textpieces="0" top="605" width="358">the same Y-axis values according to the X-axis coordi-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="624" width="358">nate. After the sorting, the new sequence of these sparse</text>
2 <text font="4" height="14" left="83" textpieces="0" top="642" width="358">lines are: Content (% m/m), Proposed method, Refer-</text>
2 <text font="3" height="14" left="83" textpieces="0" top="660" width="358">ence, Peak Peak Flame value, Sample Element height</text>
2 <text font="3" height="14" left="83" textpieces="0" top="678" width="358">area AAS (%m/m), Low melt Ag 43.9 44.1 45.1 44.46,</text>
2 <text font="3" height="14" left="83" textpieces="0" top="696" width="358">0.5 2.4 1.1, Cu 15.6 15.2 15.3 14-16, 2.7 1.8 2.5,</text>
2 <text font="3" height="14" left="83" textpieces="1" top="714" width="358">Sample No.318+ Ag 25.7 25.2 25.725, 2.1 2.1 1.4,</text>
2 <text font="3" height="14" left="83" textpieces="1" top="732" width="249">Cu 34.4 33.7 34.835, 2.3 1.3 2.5.</text>
2 <text font="4" height="14" left="101" textpieces="0" top="751" width="340">The evaluation metrics for the table boundary detection</text>
2 <text font="4" height="14" left="83" textpieces="1" top="769" width="359">are precisionP and recall R. Given the number of true ta-</text>
2 <text font="4" height="14" left="83" textpieces="1" top="787" width="359">ble lines in our detected table boundaryA, the number of</text>
2 <text font="4" height="14" left="83" textpieces="1" top="805" width="358">overlooked true positive table linesB, and the number of</text>
2 <text font="4" height="14" left="83" textpieces="2" top="823" width="318">misidentied true negative non-table linesC, P = A</text>
2 <text font="5" height="11" left="382" textpieces="0" top="831" width="27">A+C</text>
2 <text font="4" height="14" left="412" textpieces="0" top="823" width="29">, and</text>
2 <text font="4" height="20" left="83" textpieces="1" top="840" width="41">R= A</text>
2 <text font="5" height="11" left="105" textpieces="0" top="853" width="28">A+B</text>
2 <text font="4" height="14" left="135" textpieces="0" top="844" width="307">. The performance of two algorithms are listed in</text>
2 <text font="4" height="14" left="83" textpieces="1" top="862" width="358">Table 1. The reason forC are some non-table sparse lines</text>
2 <text font="4" height="14" left="83" textpieces="0" top="881" width="358">surrounding the table boundary. They usually also belong</text>
2 <text font="4" height="14" left="83" textpieces="0" top="899" width="358">to the table data.(e.g., the short lines of the table caption</text>
2 <text font="4" height="14" left="83" textpieces="0" top="917" width="358">and footnote). For single-column tables, Algorithm 2 may</text>
2 <text font="4" height="14" left="83" textpieces="1" top="935" width="358">have moreC because of the possible sparse lines with sim-</text>
2 <text font="4" height="14" left="83" textpieces="0" top="953" width="358">ilar Y-axis values in the next document column. Because</text>
2 <text font="4" height="14" left="83" textpieces="0" top="971" width="358">the widths of cells in single-column table can not be large</text>
2 <text font="4" height="14" left="83" textpieces="0" top="989" width="358">and the noise lines in table boundary can be easily removed</text>
2 <text font="4" height="14" left="83" textpieces="0" top="1007" width="358">in later table structure decomposition step, we prefer high</text>
2 <text font="4" height="14" left="83" textpieces="0" top="1026" width="358">recall values. For cross-column tables, algorithm 1 will cut</text>
2 <text font="4" height="14" left="83" textpieces="0" top="1044" width="358">each table into at least two parts. A merge postprocessing is</text>
2 <text font="4" height="14" left="83" textpieces="0" top="1062" width="358">required. Algorithm 2 achieves better performance on such</text>
=============================== COL ===================================
2 <text font="4" height="14" left="476" textpieces="0" top="108" width="358">tables. In summary, in the real application when we can</text>
2 <text font="4" height="14" left="476" textpieces="0" top="126" width="358">not know the table type in advance, algorithm 2 works bet-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="144" width="358">ter than algorithm 1. For tables with within-table sequence</text>
2 <text font="4" height="14" left="476" textpieces="0" top="162" width="358">errors, our recovering algorithms do not fulll much per-</text>
2 <text font="4" height="14" left="476" textpieces="1" top="180" width="358">formance improvement on bothP and R because all the</text>
2 <text font="4" height="14" left="476" textpieces="0" top="198" width="358">lines belong to the table boundary come together without</text>
2 <text font="4" height="14" left="476" textpieces="0" top="217" width="358">interruption. However, for the tables with beyond-table se-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="235" width="358">quence errors, the performance is much worse without our</text>
2 <text font="4" height="14" left="476" textpieces="1" top="253" width="358">algorithms: with the same test PDFs, theR is only 63.5%</text>
2 <text font="4" height="14" left="476" textpieces="0" top="271" width="358">without our algorithms because a table will be segmented</text>
2 <text font="4" height="14" left="476" textpieces="0" top="289" width="358">into several parts and some of them are ltered out because</text>
2 <text font="4" height="14" left="476" textpieces="0" top="307" width="113">of the small scope.</text>
2 <text font="16" height="14" left="494" textpieces="0" top="338" width="322">Table 1. The performance evaluation of two</text>
2 <text font="16" height="14" left="494" textpieces="0" top="356" width="252">text sequence resorting algorithms</text>
1 <text font="5" height="10" left="592" textpieces="3" top="389" width="215">Algo1(P)    Algo1(R)    Algo2(P)    Algo2(R)</text>
1 <text font="5" height="10" left="485" textpieces="4" top="402" width="308">Cross-column tables      95.7%        49.8%        100%      99.6%</text>
1 <text font="5" height="10" left="485" textpieces="4" top="414" width="308">Single-column tables      96%         94.8%       94.5%      99.8%</text>
2 <text font="2" height="16" left="476" textpieces="1" top="448" width="114">6  Conclusion</text>
2 <text font="4" height="14" left="494" textpieces="0" top="467" width="340">In this paper, we analyze a typical problem shared by the</text>
2 <text font="4" height="14" left="476" textpieces="0" top="485" width="358">PDF text extraction tools: the text sequence error. We pro-</text>
2 <text font="4" height="14" left="476" textpieces="0" top="503" width="358">pose two algorithms to recover the sequence of extracted</text>
2 <text font="4" height="14" left="476" textpieces="0" top="522" width="358">sparse lines, which improve the table content collection.</text>
2 <text font="4" height="14" left="476" textpieces="0" top="540" width="358">The experimental results not only compare the performance</text>
2 <text font="4" height="14" left="476" textpieces="0" top="558" width="358">of both algorithms, but also demonstrate the effectiveness of</text>
2 <text font="4" height="14" left="476" textpieces="0" top="576" width="358">text sequence recovering for the table boundary detection.</text>
2 <text font="4" height="14" left="476" textpieces="0" top="594" width="358">The results show that the second algorithm achieves better</text>
2 <text font="4" height="14" left="476" textpieces="0" top="612" width="358">results for both single-column table and cross-column table.</text>
2 <text font="4" height="14" left="476" textpieces="0" top="630" width="358">It is proved that the text sequence recovering work plays a</text>
2 <text font="4" height="14" left="476" textpieces="0" top="648" width="294">crucial role in the table boundary detection eld.</text>
2 <text font="2" height="16" left="476" textpieces="0" top="688" width="84">References</text>
2 <text font="18" height="12" left="476" textpieces="0" top="729" width="358">[1] R. Cattoni, T. Coianiz, S. Messelodi, and C. Modena. Geo-</text>
2 <text font="18" height="12" left="496" textpieces="0" top="746" width="338">metric layout analyis techniques for document image under-</text>
2 <text font="18" height="12" left="496" textpieces="0" top="762" width="308">standing: a review. ITC-IRST Technical Report 9703-09.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="780" width="358">[2] H. Chao and J. Fan. Layout and content extraction for pdf</text>
2 <text font="18" height="12" left="496" textpieces="0" top="797" width="246">documents. In DAS04, pages 213224, 2004.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="814" width="358">[3] Y. Liu, P. Mitra, and C. L. Giles. A fast preprocessing method</text>
2 <text font="18" height="12" left="496" textpieces="0" top="831" width="338">for table boundary detection: Narrowing down the sparse lines</text>
2 <text font="18" height="12" left="496" textpieces="0" top="847" width="279">using solely coordinate information. In DAS, 2008.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="865" width="358">[4] Y. Liu, P. Mitra, and C. L. Giles. Identifying table boundaries</text>
2 <text font="18" height="12" left="496" textpieces="0" top="882" width="338">in digital documents via sparse line detection. In CIKM, pages</text>
2 <text font="18" height="12" left="496" textpieces="0" top="898" width="99">13111320, 2008.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="916" width="358">[5] X. Wang. Tabular abstraction, editing, and formatting. In</text>
2 <text font="19" height="12" left="496" textpieces="0" top="933" width="338">Ph.D. Thesis, Dept. of Computer Science, University of Water-</text>
2 <text font="19" height="12" left="496" textpieces="0" top="949" width="55">loo, 1996.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="967" width="358">[6] Y. Wang and J. Hu. Detecting tables in html documents. In</text>
2 <text font="19" height="12" left="496" textpieces="0" top="984" width="338">In Proc. of the 5th IAPR Intl Workshop on Document Analysis</text>
2 <text font="19" height="12" left="496" textpieces="0" top="1000" width="163">Systems, Princeton, NJ, 2002.</text>
2 <text font="18" height="12" left="476" textpieces="0" top="1018" width="358">[7] B. Yildiz, K. Kaiser, and S. Miksch. pdf2table: A method to</text>
2 <text font="18" height="12" left="496" textpieces="0" top="1035" width="338">extract table information from pdf les. In Proceedings of the</text>
2 <text font="19" height="12" left="496" textpieces="0" top="1051" width="338">2nd Indian International Conference on Articial Intelligence</text>
2 <text font="19" height="12" left="496" textpieces="0" top="1068" width="161">(IICAI05), Pune, India, 2005.</text>
2 <text font="7" height="11" left="447" textpieces="0" top="1112" width="24">1010</text>
2 <text font="8" height="8" left="107" textpieces="0" top="1175" width="555">Authorized licensed use limited to: Penn State University. Downloaded on February 9, 2010 at 16:37 from IEEE Xplore.  Restrictions apply. </text>
