<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">
<pdf2xml>
<page number="1" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="0" size="23" family="Times" color="#000000"/>
	<fontspec id="1" size="15" family="Times" color="#000000"/>
	<fontspec id="2" size="12" family="Times" color="#000000"/>
	<fontspec id="3" size="19" family="Times" color="#000000"/>
	<fontspec id="4" size="14" family="Times" color="#000000"/>
	<fontspec id="5" size="9" family="Times" color="#000000"/>
	<fontspec id="6" size="6" family="Times" color="#000000"/>
	<fontspec id="7" size="11" family="Times" color="#000000"/>
<text top="172" left="155" width="608" height="23" font="0">Probabilistic Management of OCR Data using an RDBMS</text>
<text top="223" left="260" width="99" height="16" font="1">Arun Kumar</text>
<text top="244" left="183" width="253" height="16" font="1">University of Wisconsin-Madison</text>
<text top="265" left="243" width="133" height="16" font="1">arun@cs.wisc.edu</text>
<text top="223" left="550" width="118" height="16" font="1">Christopher R´</text>
<text top="223" left="660" width="8" height="16" font="1">e</text>
<text top="244" left="482" width="253" height="16" font="1">University of Wisconsin-Madison</text>
<text top="265" left="535" width="148" height="16" font="1">chrisre@cs.wisc.edu</text>
<text top="301" left="398" width="122" height="16" font="1">January 5, 2012</text>
<text top="360" left="426" width="66" height="13" font="2">Abstract</text>
<text top="384" left="171" width="598" height="13" font="2">The digitization of scanned forms and documents is changing the data sources that enterprises</text>
<text top="402" left="149" width="620" height="13" font="2">manage. To integrate these new data sources with enterprise data, the current state-of-the-art</text>
<text top="420" left="149" width="620" height="13" font="2">approach is to convert the images to ASCII text using optical character recognition (OCR)</text>
<text top="438" left="149" width="620" height="13" font="2">software and then to store the resulting ASCII text in a relational database. The OCR problem</text>
<text top="456" left="149" width="620" height="13" font="2">is challenging, and so the output of OCR often contains errors. In turn, queries on the output</text>
<text top="474" left="149" width="620" height="13" font="2">of OCR may fail to retrieve relevant answers. State-of-the-art OCR programs, e.g., the OCR</text>
<text top="492" left="149" width="620" height="13" font="2">powering Google Books, use a probabilistic model that captures many alternatives during the</text>
<text top="510" left="149" width="620" height="13" font="2">OCR process. Only when the results of OCR are stored in the database, do these approaches</text>
<text top="528" left="149" width="620" height="13" font="2">discard the uncertainty. In this work, we propose to retain the probabilistic models produced</text>
<text top="546" left="149" width="620" height="13" font="2">by OCR process in a relational database management system. A key technical challenge is</text>
<text top="564" left="149" width="620" height="13" font="2">that the probabilistic data produced by OCR software is very large (a single book blows up to</text>
<text top="581" left="149" width="620" height="13" font="2">2GB from 400kB as ASCII). As a result, a baseline solution that integrates these models with</text>
<text top="599" left="149" width="620" height="13" font="2">an RDBMS is over 1000x slower versus standard text processing for single table select-project</text>
<text top="617" left="149" width="620" height="13" font="2">queries. However, many applications may have quality-performance needs that are in between</text>
<text top="635" left="149" width="620" height="13" font="2">these two extremes of ASCII and the complete model output by the OCR software. Thus, we</text>
<text top="653" left="149" width="620" height="16" font="2">propose a novel approximation scheme called Staccato that allows a user to trade recall for</text>
<text top="671" left="149" width="620" height="13" font="2">query performance. Additionally, we provide a formal analysis of our scheme’s properties, and</text>
<text top="689" left="149" width="498" height="13" font="2">describe how we integrate our scheme with standard-RDBMS text indexing.</text>
<text top="736" left="108" width="12" height="19" font="3">1</text>
<text top="736" left="144" width="133" height="19" font="3">Introduction</text>
<text top="776" left="108" width="702" height="15" font="4">The mass digitization of books, printed documents, and printed forms is changing the types of data</text>
<text top="796" left="108" width="702" height="15" font="4">that companies and academics manage. For example, Google Books and their academic partner,</text>
<text top="816" left="108" width="702" height="15" font="4">the Hathi Trust, have the goal of digitizing all of the world’s books to allow scholars to search</text>
<text top="837" left="108" width="702" height="15" font="4">human knowledge from the pre-Web era. The hope of this eﬀort is that digital access to this data</text>
<text top="857" left="108" width="586" height="15" font="4">will enable scholars to rapidly mine these vast stores of text for new discoveries.</text>
<text top="854" left="694" width="6" height="11" font="5">1</text>
<text top="857" left="712" width="98" height="15" font="4">The potential</text>
<text top="877" left="108" width="702" height="15" font="4">users of this new content are not limited to academics. The market for enterprise document capture</text>
<text top="898" left="108" width="702" height="15" font="4">(scanning of forms) is already in the multibillion dollar range [3]. In many of the applications, the</text>
<text top="918" left="108" width="702" height="15" font="4">translated data is related to enterprise business data, and so after converting to plain text, the data</text>
<text top="938" left="108" width="206" height="15" font="4">are stored in an RDBMS [6].</text>
<text top="959" left="133" width="677" height="15" font="4">Translating an image of text (e.g., a jpeg) to ASCII is diﬃcult for machines to do automatically.</text>
<text top="979" left="108" width="702" height="15" font="4">To cope with the huge number of variations in scanned documents, e.g., in spacing of the glyphs</text>
<text top="1007" left="127" width="5" height="8" font="6">1</text>
<text top="1009" left="133" width="677" height="12" font="7">Many repositories of Digging into Data Challenge (a large joint eﬀort to bring together social scientists with data</text>
<text top="1026" left="108" width="370" height="12" font="7">analysis) are OCR-based http://www.diggingintodata.org.</text>
<text top="1069" left="455" width="8" height="15" font="4">1</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="8" size="3" family="Times" color="#3b3b3b"/>
	<fontspec id="9" size="13" family="Times" color="#000000"/>
	<fontspec id="10" size="11" family="Times" color="#000000"/>
	<fontspec id="11" size="9" family="Times" color="#000000"/>
	<fontspec id="12" size="9" family="Times" color="#3b3b3b"/>
<text top="113" left="108" width="702" height="15" font="4">and font faces, state-of-the-art approaches for optical character recognition (OCR) use probabilistic</text>
<text top="133" left="108" width="702" height="15" font="4">techniques. For example, the OCRopus tool from Google Books represents the output of the OCR</text>
<text top="154" left="108" width="702" height="15" font="4">process as a stochastic automaton called a ﬁnite-state transducer (FST) that deﬁnes a probability</text>
<text top="174" left="108" width="551" height="15" font="4">distribution over all possible strings that could be represented in the image.</text>
<text top="171" left="659" width="6" height="11" font="5">2</text>
<text top="174" left="676" width="134" height="15" font="4">An example image</text>
<text top="194" left="108" width="702" height="15" font="4">and its resulting (simpliﬁed) transducer are shown in Figure 1. Each labeled path through the</text>
<text top="215" left="108" width="702" height="15" font="4">transducer corresponds to a potential string (one multiplies the weights along the path to get the</text>
<text top="235" left="108" width="702" height="15" font="4">probability of the string). Only to produce the ﬁnal plain text do current OCR approaches remove</text>
<text top="255" left="108" width="702" height="15" font="4">the uncertainty. Traditionally, they choose to retain only the single most likely string produced by</text>
<text top="276" left="108" width="425" height="15" font="4">the FST (called a maximum a priori estimate or MAP [1]).</text>
<text top="412" left="145" width="1" height="6" font="8"> </text>
<text top="412" left="475" width="1" height="6" font="8"> </text>
<text top="318" left="535" width="9" height="18" font="9">3</text>
<text top="361" left="332" width="9" height="18" font="9">0</text>
<text top="361" left="393" width="9" height="18" font="9">1</text>
<text top="355" left="626" width="9" height="18" font="9">5</text>
<text top="394" left="535" width="9" height="18" font="9">4</text>
<text top="332" left="349" width="35" height="15" font="10">F: 0.8</text>
<text top="361" left="456" width="9" height="18" font="9">2</text>
<text top="393" left="347" width="33" height="15" font="10">T: 0.2</text>
<text top="332" left="413" width="34" height="15" font="10">0: 0.6</text>
<text top="393" left="409" width="35" height="15" font="10">o: 0.4</text>
<text top="329" left="474" width="37" height="15" font="10">' ': 0.6</text>
<text top="360" left="504" width="32" height="15" font="10">r: 0.8</text>
<text top="395" left="474" width="32" height="15" font="10">r: 0.4</text>
<text top="327" left="572" width="38" height="15" font="10">m: 0.2</text>
<text top="370" left="560" width="35" height="15" font="10">d: 0.9</text>
<text top="403" left="574" width="34" height="15" font="10">3: 0.1</text>
<text top="330" left="663" width="144" height="17" font="10">SELECT DocId, Loss</text>
<text top="348" left="663" width="88" height="17" font="10">FROM Claims</text>
<text top="365" left="663" width="168" height="17" font="10">WHERE Year = 2010 AND</text>
<text top="382" left="663" width="176" height="17" font="10">DocData LIKE '%Ford%';</text>
<text top="409" left="303" width="8" height="13" font="11">A</text>
<text top="409" left="645" width="8" height="13" font="11">B</text>
<text top="409" left="831" width="8" height="13" font="11">C</text>
<text top="320" left="289" width="10" height="13" font="12">...</text>
<text top="336" left="271" width="10" height="13" font="12">...</text>
<text top="350" left="265" width="10" height="13" font="12">...</text>
<text top="366" left="281" width="10" height="13" font="12">...</text>
<text top="382" left="287" width="10" height="13" font="12">...</text>
<text top="396" left="281" width="10" height="13" font="12">...</text>
<text top="446" left="108" width="702" height="15" font="4">Figure 1: (A) An image of text. (B) A portion of a simple FST resulting from the OCR of the</text>
<text top="466" left="108" width="702" height="15" font="4">highlighted part of (A). The numbers on the arcs are conditional probabilities of transitioning from</text>
<text top="486" left="108" width="702" height="15" font="4">one state to another. An emitted string corresponds to a path from states 0 to 5. The string ‘F0 rd’</text>
<text top="507" left="108" width="702" height="15" font="4">(highlighted path) has the highest probability, 0.8 ∗ 0.6 ∗ 0.6 ∗ 0.8 ∗ 0.9 ≈ 0.21. (C) An SQL query to</text>
<text top="527" left="108" width="702" height="15" font="4">retrieve loss information that contains ‘Ford’. Using the MAP approach, no claim is found. Using</text>
<text top="550" left="108" width="374" height="14" font="4">Staccato, a claim is found (with probability 0.12).</text>
<text top="571" left="133" width="677" height="15" font="4">As Google Books demonstrates, the MAP works well for browsing applications. In such appli-</text>
<text top="591" left="108" width="702" height="15" font="4">cations, one is sensitive to precision (i.e., are the answers I see correct), but one is insensitive to</text>
<text top="611" left="108" width="702" height="15" font="4">recall (i.e., what fraction of all of the answers in my corpus are returned). But this is not true of</text>
<text top="632" left="108" width="702" height="15" font="4">all applications: an English professor looking for the earliest dates that a word occurs in a corpus</text>
<text top="652" left="108" width="702" height="15" font="4">is sensitive to recall [5]. As is an insurance company that wants all insurance claims that were</text>
<text top="672" left="108" width="702" height="15" font="4">ﬁlled in 2010 that mentioned a ‘Ford’. This latter query is expressed in SQL in Figure 1(C). In this</text>
<text top="692" left="108" width="702" height="15" font="4">work, we focus on such single table select-project queries, whose outputs are standard probabilistic</text>
<text top="713" left="108" width="702" height="15" font="4">RDBMS tables. Using the MAP approach may miss valuable answers. In the example in Figure 1,</text>
<text top="733" left="108" width="702" height="15" font="4">the most likely string does not contain ‘Ford’, and so we (erroneously) miss this claim. However,</text>
<text top="753" left="108" width="702" height="15" font="4">the string ‘Ford’ does appear (albeit with a lower probability). Empirically, we show that the recall</text>
<text top="774" left="108" width="702" height="15" font="4">for simple queries on real-world OCR can be as low as 0.3 – and so we may throw away almost</text>
<text top="794" left="108" width="348" height="15" font="4">70% of our data if we follow the MAP approach.</text>
<text top="814" left="133" width="677" height="15" font="4">To remedy this recall problem, our baseline approach is to store and handle the FSTs as binary</text>
<text top="835" left="108" width="702" height="15" font="4">large objects inside the RDBMS. As with a probabilistic relational database, the user can then</text>
<text top="855" left="108" width="702" height="15" font="4">pose questions as if the data are deterministic and it is the job of the system to compute the</text>
<text top="875" left="108" width="688" height="15" font="4">conﬁdence in its answer. By combining existing open-source tools for transducer composition</text>
<text top="873" left="803" width="6" height="11" font="5">3</text>
<text top="896" left="108" width="702" height="15" font="4">with an RDBMS, we can then answer queries like that in Figure 1(C). This approach achieves a</text>
<text top="916" left="108" width="702" height="15" font="4">high quality (empirically, the recall we measured is very close to 1.0, with up to 0.9 precision).</text>
<text top="936" left="108" width="702" height="15" font="4">Additionally, the enterprise users can ask their existing queries directly on top of the RDBMS data</text>
<text top="957" left="108" width="702" height="15" font="4">(the query in Figure 1(C) remains unchanged). The downside is that query processing is much</text>
<text top="977" left="108" width="702" height="15" font="4">slower (up to 1000x slower). While the query processing time for transducers is linear in the data</text>
<text top="1007" left="127" width="5" height="8" font="6">2</text>
<text top="1011" left="133" width="237" height="11" font="7">http://code.google.com/p/ocropus/.</text>
<text top="1023" left="127" width="5" height="8" font="6">3</text>
<text top="1026" left="133" width="230" height="12" font="7">OpenFST. http://www.openfst.org/</text>
<text top="1069" left="455" width="8" height="15" font="4">2</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">size, the transducers themselves are huge, e.g., a single 200-page book blows up from 400 kB as</text>
<text top="133" left="108" width="702" height="15" font="4">text to over 2 GB when represented by transducers after OCR. This motivates our central question:</text>
<text top="154" left="108" width="702" height="15" font="4">“Can we devise an approximation scheme that is somewhere in between these two extremes of recall</text>
<text top="174" left="108" width="136" height="15" font="4">and performance?”</text>
<text top="194" left="133" width="677" height="15" font="4">State-of-the-art OCR tools segment each of the images corresponding to pages in a document</text>
<text top="215" left="108" width="702" height="15" font="4">into lines using special purpose line-breaking tools. Breaking a single line further into individual</text>
<text top="235" left="108" width="702" height="15" font="4">words is more diﬃcult (spacing is very diﬃcult to accurately detect). With this in mind, a natural</text>
<text top="255" left="108" width="702" height="15" font="4">idea to improve the recall of the MAP approach is to retain not only the highest probability string</text>
<text top="276" left="108" width="702" height="15" font="4">for each line, but instead to retain the k highest probability strings that appear in each line (called</text>
<text top="296" left="108" width="702" height="15" font="4">k-MAP [30, 56]). Indeed, this technique keeps more information around at a linear cost (in k)</text>
<text top="316" left="108" width="702" height="15" font="4">in space and processing time. However, we show that even storing hundreds of paths makes an</text>
<text top="337" left="108" width="298" height="15" font="4">insigniﬁcant jump in the recall of queries.</text>
<text top="357" left="133" width="677" height="17" font="4">To combat this problem, we propose a novel approximation scheme called Staccato, which</text>
<text top="377" left="108" width="702" height="15" font="4">is our main technical contribution. The main idea is to apply k-MAP not to the whole line, but</text>
<text top="398" left="108" width="702" height="15" font="4">to ﬁrst break the line into smaller chunks which are themselves transducers and apply k-MAP to</text>
<text top="418" left="108" width="702" height="15" font="4">each transducer individually. This allows us to store exponentially more alternatives than k-MAP</text>
<text top="438" left="108" width="702" height="15" font="4">(exponential in the number of chunks), while using roughly a linear amount more space than the</text>
<text top="459" left="108" width="702" height="17" font="4">MAP approach. If there is only a single chunk, then Staccato’s output is equivalent to k-MAP.</text>
<text top="479" left="108" width="702" height="15" font="4">If essentially every possible character is a chunk, then we retain the full FST. Experimentally, we</text>
<text top="499" left="108" width="702" height="17" font="4">demonstrate that the Staccato approach gracefully trades oﬀ between performance and recall. For</text>
<text top="520" left="108" width="702" height="15" font="4">example, when looking for mentions of laws on a data set that contains scanned acts of the US</text>
<text top="540" left="108" width="702" height="15" font="4">congress, the MAP approach achieves a recall of 0.28 executing in about 1 second, the full FST</text>
<text top="560" left="108" width="702" height="15" font="4">approach achieves perfect recall but takes over 2 minutes. An intermediate representation from</text>
<text top="583" left="108" width="702" height="14" font="4">Staccato takes around 10 seconds and achieves 0.76 recall. Of course, there is a fundamental</text>
<text top="601" left="108" width="285" height="15" font="4">trade oﬀ between precision and recall.</text>
<text top="601" left="408" width="402" height="15" font="4">On the same query as above, the MAP has precision</text>
<text top="621" left="108" width="702" height="17" font="4">1.0, and the full FST has precision 0.25, while Staccato achieves 0.73. In general, Staccato’s</text>
<text top="642" left="108" width="382" height="15" font="4">precision falls in between the MAP and the full FST.</text>
<text top="662" left="133" width="677" height="17" font="4">To understand Staccato’s approximation more deeply, we conduct a formal analysis, which</text>
<text top="682" left="108" width="702" height="17" font="4">is our second technical contribution. When constructing Staccato’s approximation, we ensure</text>
<text top="702" left="108" width="702" height="15" font="4">two properties (1) each chunk forms a transducer (as opposed to a more general structure), and</text>
<text top="723" left="108" width="702" height="15" font="4">(2) that the model retains the unique path property, i.e., that every string corresponds to a unique</text>
<text top="743" left="108" width="37" height="15" font="4">path.</text>
<text top="743" left="160" width="650" height="15" font="4">While both of these properties are satisﬁed by the transducers produced by OCRopus,</text>
<text top="763" left="108" width="702" height="15" font="4">neither property is necessary to have a well-deﬁned approximation scheme. Moreover, enforcing</text>
<text top="784" left="108" width="702" height="15" font="4">these two properties increases the complexity of our algorithm and may preclude some compact</text>
<text top="804" left="108" width="702" height="15" font="4">approximations. Thus, it is natural to wonder if we can relax these two properties. While we</text>
<text top="824" left="108" width="702" height="15" font="4">cannot prove that these two conditions are necessary, we show that without these two properties,</text>
<text top="845" left="108" width="702" height="15" font="4">basic operations become intractable. Without the unique path property, prior work has shown</text>
<text top="865" left="108" width="702" height="15" font="4">that determining (even approximating) the k-MAP is intractable for a ﬁxed k [34]. Even with the</text>
<text top="885" left="108" width="702" height="15" font="4">unique path property and a ﬁxed set of chunks, we show that essentially the simplest violation of</text>
<text top="906" left="108" width="702" height="15" font="4">property (1) makes it intractable to construct an approximation even for k = 2 (Theorem 3.1).</text>
<text top="926" left="108" width="702" height="17" font="4">On the positive side, for any ﬁxed partition, Staccato retains a set of strings that achieves the</text>
<text top="946" left="108" width="593" height="15" font="4">highest total probability among approximations that satisfy the above restrictions.</text>
<text top="967" left="133" width="677" height="15" font="4">Finally, we describe how to use standard text-indexing techniques to improve query performance.</text>
<text top="987" left="108" width="702" height="15" font="4">Directly applying an inverted index to transducer data is essentially doomed to failure: the sheer</text>
<text top="1007" left="108" width="702" height="15" font="4">number of terms one would have to index grows exponentially with the length of the document,</text>
<text top="1069" left="455" width="8" height="15" font="4">3</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="365" height="15" font="4">e.g., an FST for a single line may represent over 10</text>
<text top="110" left="473" width="19" height="11" font="5">100</text>
<text top="113" left="498" width="312" height="15" font="4">terms. To combat this, we allow the user to</text>
<text top="133" left="108" width="702" height="15" font="4">specify a dictionary of terms. We then construct an index of those terms speciﬁed in the dictionary.</text>
<text top="154" left="108" width="702" height="15" font="4">This allows us to process keyword and some regular expressions using standard techniques [14, 55].</text>
<text top="197" left="108" width="61" height="15" font="4">Outline</text>
<text top="197" left="186" width="624" height="15" font="4">In Section 2, we illustrate our current prototype system to manage OCR data using an</text>
<text top="217" left="108" width="702" height="15" font="4">RDBMS with an example, and we present a brief background on the use of transducers in OCR.</text>
<text top="238" left="108" width="702" height="15" font="4">In Section 3, we brieﬂy describe the baseline solutions, and then discuss the main novel technical</text>
<text top="258" left="108" width="702" height="17" font="4">contributions of this work, viz., the Staccato approximation scheme and our formal analysis of</text>
<text top="278" left="108" width="702" height="15" font="4">its properties. In Section 4, we describe our approach for indexing OCR transducer data, which is</text>
<text top="299" left="108" width="702" height="15" font="4">another technical contribution of this work. In Section 5, we empirically validate that our approach</text>
<text top="319" left="108" width="702" height="15" font="4">is able to trade oﬀ recall for query-runtime performance on several real-world OCR data sets. We</text>
<text top="339" left="108" width="702" height="15" font="4">validate that our approximation methods can be eﬃciently implemented, and that our indexing</text>
<text top="360" left="108" width="579" height="15" font="4">technique provides the expected speedups. In Section 6, we discuss related work.</text>
<text top="408" left="108" width="12" height="19" font="3">2</text>
<text top="408" left="144" width="140" height="19" font="3">Preliminaries</text>
<text top="448" left="108" width="702" height="17" font="4">The key functionality that Staccato provides is to enable users to query OCR data inside an</text>
<text top="468" left="108" width="702" height="15" font="4">RDBMS as if it were regular text. Speciﬁcally, we want to enable the LIKE predicate of SQL on</text>
<text top="488" left="108" width="702" height="17" font="4">OCR data. We describe Staccato through an example, followed by a more detailed explanation</text>
<text top="509" left="108" width="314" height="15" font="4">of its semantics and the formal background.</text>
<text top="551" left="108" width="26" height="16" font="1">2.1</text>
<text top="551" left="154" width="229" height="16" font="1">Using Staccato with OCR</text>
<text top="583" left="108" width="702" height="15" font="4">Consider an insurance company that stores loss data with scanned report forms in a table with the</text>
<text top="604" left="108" width="125" height="15" font="4">following schema:</text>
<text top="624" left="319" width="279" height="15" font="4">Claims(DocID, Y ear, Loss, DocData)</text>
<text top="654" left="108" width="702" height="15" font="4">A document tuple contains an id, the year the form was ﬁled (Year), the amount of the loss (Loss)</text>
<text top="674" left="108" width="702" height="15" font="4">and the contents of the report (DocData). A simple query that an insurance company may want</text>
<text top="695" left="108" width="702" height="15" font="4">to ask over the table - “Get loss amounts of all claims in 2010 where the report mentions ‘Ford’ ”.</text>
<text top="715" left="108" width="570" height="15" font="4">Were DocData ASCII text, this could be expressed as an SQL query as follows:</text>
<text top="755" left="108" width="258" height="14" font="4">SELECT DocID, Loss FROM Claims</text>
<text top="775" left="108" width="378" height="14" font="4">WHERE Year = 2010 AND DocData LIKE ‘%Ford%’;</text>
<text top="812" left="133" width="677" height="15" font="4">If DocData is standard text, the semantics of this query is straightforward: we examine each</text>
<text top="832" left="108" width="702" height="15" font="4">document ﬁled in 2010, and check if it contains the string ‘Ford’. The challenge is that instead</text>
<text top="852" left="108" width="702" height="15" font="4">of a single document, in OCR applications DocData represents many diﬀerent documents (each</text>
<text top="873" left="108" width="702" height="17" font="4">document is weighted by probability). In Staccato, we can express this as an SQL query that</text>
<text top="893" left="108" width="702" height="15" font="4">uses a simple pattern in the LIKE predicate (also in Figure 1(C)). The twist is that the underlying</text>
<text top="913" left="108" width="527" height="15" font="4">processing must take into account the probabilities from the OCR model.</text>
<text top="934" left="133" width="677" height="17" font="4">Formally, Staccato allows a larger class of queries in the LIKE predicate that can be expressed</text>
<text top="954" left="108" width="702" height="17" font="4">as deterministic ﬁnite automata (DFAs). Staccato translates the syntax above in to a DFA using</text>
<text top="974" left="108" width="702" height="17" font="4">standard techniques [29]. As with probabilistic databases [13, 24, 32, 53] , Staccato computes</text>
<text top="995" left="108" width="702" height="17" font="4">the probability that the document matches the regular expression. Staccato does this using</text>
<text top="1015" left="108" width="702" height="15" font="4">algorithms from prior work [34, 45]. The result is a probabilistic relation; after this, we can apply</text>
<text top="1069" left="455" width="8" height="15" font="4">4</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">probabilistic relational database processing techniques [24, 43, 48]. In this work, we consider only</text>
<text top="133" left="108" width="659" height="15" font="4">single table select-project queries (joins are handled using the above mentioned techniques).</text>
<text top="154" left="133" width="677" height="17" font="4">A critical challenge that Staccato must address is given a DFA ﬁnd those documents that are</text>
<text top="174" left="108" width="702" height="15" font="4">relevant to the query expressed by the DFA. For a ﬁxed query, the existing algorithms are roughly</text>
<text top="194" left="108" width="702" height="15" font="4">linear in the size of data that they must process. To improve the runtime of these algorithms, one</text>
<text top="215" left="108" width="702" height="15" font="4">strategy (that we take) is to reduce the size of the data that must be processed using approximations.</text>
<text top="235" left="108" width="702" height="17" font="4">The primary contribution of Staccato is the set of mechanisms that we describe in Section 3 to</text>
<text top="255" left="108" width="702" height="15" font="4">achieve the trade oﬀ of quality and performance by approximating the data. We formally study</text>
<text top="276" left="108" width="702" height="15" font="4">the properties of our algorithms and describe simple mechanisms to allow the user to set these</text>
<text top="296" left="108" width="163" height="15" font="4">parameters in Sec. 3.2.</text>
<text top="316" left="133" width="677" height="15" font="4">One way to evaluate the query above in the deterministic setting is to scan the string in each</text>
<text top="337" left="108" width="702" height="15" font="4">report and check for a match. A better strategy may be to use an inverted index to fetch only</text>
<text top="357" left="108" width="702" height="15" font="4">those documents that contain ‘Ford’. In general, this strategy is possible for anchored regular</text>
<text top="377" left="108" width="702" height="15" font="4">expressions [21], which are regular expressions that begin or end with words in the language, e.g.</text>
<text top="398" left="108" width="702" height="17" font="4">‘no.(2|3)’ is anchored while ‘(no|num).(2|8)’ is not. Staccato supports a similar optimization</text>
<text top="418" left="108" width="702" height="15" font="4">using standard text-indexing techniques. There is, however, one twist: At one extreme, any term</text>
<text top="438" left="108" width="702" height="15" font="4">may have some small probability of occurring at every location of the document – which renders</text>
<text top="459" left="108" width="702" height="17" font="4">the index ineﬀective. Nevertheless, we show that Staccato is able to provide eﬃcient indexing</text>
<text top="479" left="108" width="485" height="15" font="4">for anchored regular expressions using a dictionary-based approach.</text>
<text top="522" left="108" width="26" height="16" font="1">2.2</text>
<text top="522" left="154" width="364" height="16" font="1">Background: Stochastic Finite Automata</text>
<text top="554" left="108" width="702" height="17" font="4">We formally describe Staccato’s data model that is based on Stochastic Finite Automata (SFA).</text>
<text top="574" left="108" width="625" height="15" font="4">This model is essentially identical to the model output by Google’s OCRopus [8, 41].</text>
<text top="571" left="733" width="6" height="11" font="5">4</text>
<text top="574" left="751" width="59" height="15" font="4">An SFA</text>
<text top="594" left="108" width="702" height="15" font="4">is a ﬁnite state machine that emits strings (e.g., the ASCII conversion of an OCR image). The</text>
<text top="615" left="108" width="702" height="15" font="4">model is stochastic, which captures the uncertainty in translating the glyphs and spaces to ASCII</text>
<text top="635" left="108" width="77" height="15" font="4">characters.</text>
<text top="655" left="133" width="677" height="15" font="4">At a high level, an SFA over an alphabet Σ represents a discrete probability distribution P over</text>
<text top="676" left="108" width="84" height="15" font="4">strings in Σ</text>
<text top="672" left="192" width="6" height="11" font="5">∗</text>
<text top="676" left="199" width="35" height="15" font="4">, i.e.,</text>
<text top="697" left="318" width="38" height="15" font="4">P : Σ</text>
<text top="693" left="356" width="6" height="11" font="5">∗</text>
<text top="697" left="367" width="126" height="15" font="4">→ [0, 1] such that</text>
<text top="720" left="502" width="25" height="11" font="5">x∈Σ</text>
<text top="719" left="526" width="6" height="8" font="6">∗</text>
<text top="697" left="536" width="65" height="15" font="4">P (x) = 1</text>
<text top="743" left="108" width="702" height="15" font="4">The SFA represents the (ﬁnitely many) strings with non-zero probability using an automaton-like</text>
<text top="764" left="108" width="356" height="15" font="4">structure that we ﬁrst describe using an example:</text>
<text top="804" left="108" width="702" height="15" font="4">Example 1. Figure 1 shows an image of text and a simpliﬁed SFA created by OCRopus from that</text>
<text top="824" left="108" width="702" height="15" font="4">data. The SFA is a directed acyclic labeled graph. The graphical structure (i.e., the branching)</text>
<text top="845" left="108" width="702" height="15" font="4">in the SFA is used by the OCR tool to capture correlations between the emitted letters. Each</text>
<text top="865" left="108" width="702" height="15" font="4">source-to-sink path (i.e., a path from node 0 to node 5) corresponds to a string with non-zero</text>
<text top="885" left="108" width="702" height="15" font="4">probability. For example, the string ‘Ford’ is one possible path that uses the following sequence of</text>
<text top="906" left="108" width="702" height="15" font="4">nodes 0 → 1 → 2 → 4 → 5. The probability of this string can be found by multiplying the edge</text>
<text top="926" left="108" width="442" height="15" font="4">weights corresponding to the path: 0.8 ∗ 0.4 ∗ 0.4 ∗ 0.9 ≈ 0.12.</text>
<text top="972" left="127" width="5" height="8" font="6">4</text>
<text top="975" left="133" width="677" height="12" font="7">Our prototype uses the same weighted ﬁnite state transducer (FST) model that is used by OpenFST and OCRo-</text>
<text top="991" left="108" width="645" height="12" font="7">pus. We simplify FST to SFAs here only slightly for presentation. See the full version for more details [36]</text>
<text top="1069" left="455" width="8" height="15" font="4">5</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="133" width="676" height="17" font="4">Formally, we ﬁx an alphabet Σ (in Staccato, this is the set of ASCII characters). An SFA S</text>
<text top="133" left="108" width="702" height="15" font="4">over Σ is a tuple S = (V, E, s, f, δ) where V is a set of nodes, E ⊆ V × V is a set of edges such that</text>
<text top="154" left="108" width="702" height="15" font="4">(V, E) is a directed acyclic graph, and s (resp. f ) is a distinguished start (resp. ﬁnal) node. The</text>
<text top="174" left="108" width="352" height="15" font="4">function δ is a stochastic transition function, i.e.,</text>
<text top="212" left="269" width="152" height="15" font="4">δ : E × Σ → [0, 1] s.t.</text>
<text top="237" left="423" width="49" height="8" font="6">y:(x,y)∈E</text>
<text top="247" left="435" width="25" height="11" font="5">σ∈Σ</text>
<text top="212" left="476" width="106" height="15" font="4">δ((x, y), σ) = 1</text>
<text top="211" left="598" width="48" height="15" font="4">∀x ∈ V</text>
<text top="277" left="108" width="702" height="15" font="4">In essence, δ(e, σ), where e = (x, y), is the conditional probability of transitioning from x → y and</text>
<text top="297" left="108" width="80" height="15" font="4">emitting σ.</text>
<text top="317" left="133" width="677" height="15" font="4">An SFA deﬁnes a probability distribution via its labeled paths. A labeled path from s to f is</text>
<text top="338" left="108" width="127" height="15" font="4">denoted by p = (e</text>
<text top="343" left="235" width="6" height="11" font="5">1</text>
<text top="338" left="242" width="17" height="15" font="4">, σ</text>
<text top="343" left="258" width="6" height="11" font="5">1</text>
<text top="338" left="265" width="57" height="15" font="4">), . . . , (e</text>
<text top="343" left="322" width="10" height="11" font="5">N</text>
<text top="338" left="334" width="17" height="15" font="4">, σ</text>
<text top="343" left="351" width="10" height="11" font="5">N</text>
<text top="338" left="363" width="70" height="15" font="4">), where e</text>
<text top="343" left="433" width="4" height="11" font="5">i</text>
<text top="337" left="442" width="73" height="15" font="4">∈ E and σ</text>
<text top="343" left="515" width="4" height="11" font="5">i</text>
<text top="337" left="525" width="242" height="15" font="4">∈ Σ, corresponding to the string σ</text>
<text top="343" left="767" width="6" height="11" font="5">1</text>
<text top="338" left="774" width="23" height="15" font="4">...σ</text>
<text top="343" left="797" width="8" height="11" font="5">n</text>
<text top="338" left="805" width="5" height="15" font="4">,</text>
<text top="358" left="108" width="143" height="15" font="4">with its probability:</text>
<text top="355" left="258" width="6" height="11" font="5">5</text>
<text top="395" left="391" width="18" height="15" font="4">Pr</text>
<text top="409" left="396" width="8" height="11" font="5">S</text>
<text top="395" left="409" width="35" height="15" font="4">[p] =</text>
<text top="376" left="452" width="13" height="11" font="5">|p|</text>
<text top="418" left="448" width="21" height="11" font="5">i=1</text>
<text top="395" left="472" width="22" height="15" font="4">δ(e</text>
<text top="401" left="494" width="4" height="11" font="5">i</text>
<text top="395" left="499" width="17" height="15" font="4">, σ</text>
<text top="401" left="515" width="4" height="11" font="5">i</text>
<text top="395" left="520" width="6" height="15" font="4">)</text>
<text top="439" left="133" width="677" height="15" font="4">SFAs in OCR satisfy an important property that we call the unique paths property that says</text>
<text top="459" left="108" width="702" height="15" font="4">that any string produced by the SFA with non-zero probability is generated by a unique labeled</text>
<text top="480" left="108" width="702" height="15" font="4">path through the SFA. We denote by UP the function that takes a string to its unique labeled</text>
<text top="500" left="108" width="702" height="15" font="4">path. This property guarantees tractability of many important computations over SFAs including</text>
<text top="520" left="108" width="457" height="15" font="4">ﬁnding the highest probability string produced by the SFA [34].</text>
<text top="541" left="133" width="677" height="15" font="4">Unlike the example given here, the SFAs produced by Google’s OCRopus are much larger: they</text>
<text top="561" left="108" width="702" height="15" font="4">contain a weighted arc for every ASCII character. And so, the SFA for a single line can require as</text>
<text top="581" left="108" width="179" height="15" font="4">much as 600 kB to store.</text>
<text top="602" left="133" width="677" height="17" font="4">Queries in Staccato are formalized in the standard way for probabilistic databases. In this</text>
<text top="622" left="108" width="702" height="17" font="4">paper, we consider LIKE predicates that contain Boolean queries expressed as DFAs (Staccato</text>
<text top="642" left="108" width="489" height="15" font="4">handles non-Boolean queries using algorithms in Kimmelfeld and R´</text>
<text top="642" left="589" width="221" height="15" font="4">e [34]). Fix an alphabet Σ (the</text>
<text top="663" left="108" width="202" height="15" font="4">ASCII characters). Let q : Σ</text>
<text top="659" left="310" width="6" height="11" font="5">∗</text>
<text top="662" left="322" width="488" height="15" font="4">→ {0, 1} be expressed as DFA and x be any string. We have q(x) = 1</text>
<text top="683" left="108" width="702" height="15" font="4">when x satisﬁes the query, i.e., it’s accepted by the DFA. We compute the probability that q is</text>
<text top="703" left="108" width="445" height="15" font="4">true; this quantity is denoted Pr[q] and is deﬁned by Pr[q] =</text>
<text top="711" left="576" width="25" height="11" font="5">x∈Σ</text>
<text top="709" left="601" width="6" height="8" font="6">∗</text>
<text top="703" left="611" width="199" height="15" font="4">q(x) Pr(x) (i.e., simply sum</text>
<text top="724" left="108" width="702" height="15" font="4">over all possible strings where q is true). There is a straightforward algorithm based on matrix</text>
<text top="744" left="108" width="702" height="15" font="4">multiplication to process these queries that is linear in the size of the data and cubic in the number</text>
<text top="764" left="108" width="181" height="15" font="4">of states of the DFA [45].</text>
<text top="812" left="108" width="12" height="19" font="3">3</text>
<text top="812" left="144" width="326" height="19" font="3">Managing SFAs in an RDBMS</text>
<text top="852" left="108" width="702" height="15" font="4">We start by outlining two baseline approaches that represent the two extremes of query performance</text>
<text top="873" left="108" width="702" height="17" font="4">and recall. Then, we describe the novel approximation scheme of Staccato, which enables us to</text>
<text top="893" left="108" width="204" height="15" font="4">trade performance for recall.</text>
<text top="936" left="108" width="171" height="15" font="4">Baseline Approaches</text>
<text top="936" left="295" width="515" height="15" font="4">We study two baseline approaches: k-MAP and the FullSFA approach.</text>
<text top="956" left="108" width="702" height="15" font="4">Fix some k ≥ 1. In the k-MAP approach we store the k highest probability strings (simply, top</text>
<text top="977" left="108" width="702" height="15" font="4">k strings) generated by each SFA in our databases. We store one tuple per string along with the</text>
<text top="1007" left="127" width="5" height="8" font="6">5</text>
<text top="1009" left="133" width="677" height="12" font="7">Many (including OpenFST) tools use a formalization with log-odds instead of probabilities. It has some intuitive</text>
<text top="1026" left="108" width="540" height="12" font="7">property for graph concepts, e.g., the shortest path corresponds to the most likely string.</text>
<text top="1069" left="455" width="8" height="15" font="4">6</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">associated probability. Query processing is straightforward: we process each string using standard</text>
<text top="133" left="108" width="702" height="15" font="4">text-processing techniques, and then sum the probability of each string (since each string is a</text>
<text top="154" left="108" width="702" height="15" font="4">disjoint probabilistic event). In the FullSFA approach, we store the entire SFA as a BLOB inside</text>
<text top="174" left="108" width="702" height="15" font="4">the RDBMS. To answer a query, we retrieve the BLOB, deserialize it, and then use an open source</text>
<text top="194" left="108" width="702" height="15" font="4">C++ automata composition library to answer the query [11, 12] and compute all probabilities.</text>
<text top="215" left="108" width="702" height="15" font="4">Table 1 summarizes the time and space costs for a simple chain SFA (no branching). This table</text>
<text top="235" left="108" width="702" height="15" font="4">gives an engineer’s intuition about the time and space complexity of the baseline approaches. The</text>
<text top="255" left="108" width="702" height="15" font="4">factor 16 accounts for the metadata – tuple ID, location in SFA, and probability value (the schema</text>
<text top="276" left="108" width="702" height="17" font="4">is described in the full version [36]). We also include our proposed approach, Staccato that</text>
<text top="296" left="108" width="702" height="15" font="4">depends on a parameter m (the number of chunks) that we describe below. From the table, we</text>
<text top="316" left="108" width="702" height="17" font="4">can read that query processing time for Staccato is essentially linear in m. Let l be the length of</text>
<text top="337" left="108" width="702" height="17" font="4">the document, since m ∈ [1, l] query processing time in Staccato interpolates linearly from the</text>
<text top="357" left="108" width="310" height="15" font="4">k-MAP approach to the FullSFA approach.</text>
<text top="393" left="330" width="53" height="15" font="4">k-MAP</text>
<text top="393" left="409" width="58" height="15" font="4">FullSFA</text>
<text top="396" left="546" width="77" height="14" font="4">Staccato</text>
<text top="420" left="260" width="52" height="14" font="4">Query</text>
<text top="417" left="330" width="22" height="15" font="4">lqk</text>
<text top="417" left="409" width="61" height="15" font="4">lq|Σ| + q</text>
<text top="415" left="470" width="6" height="11" font="5">3</text>
<text top="417" left="478" width="46" height="15" font="4">(l − 1)</text>
<text top="417" left="546" width="49" height="15" font="4">lqk + q</text>
<text top="415" left="596" width="6" height="11" font="5">3</text>
<text top="417" left="603" width="55" height="15" font="4">(m − 1)</text>
<text top="441" left="260" width="47" height="14" font="4">Space</text>
<text top="438" left="330" width="59" height="15" font="4">lk + 16k</text>
<text top="438" left="409" width="89" height="15" font="4">l|Σ| + 16l|Σ|</text>
<text top="438" left="546" width="73" height="15" font="4">lk + 16mk</text>
<text top="481" left="287" width="5" height="15" font="4">l</text>
<text top="481" left="315" width="5" height="15" font="4">:</text>
<text top="481" left="338" width="191" height="15" font="4">length of the SFA’s strings</text>
<text top="501" left="286" width="7" height="15" font="4">q</text>
<text top="501" left="315" width="5" height="15" font="4">:</text>
<text top="501" left="338" width="192" height="15" font="4"># states in the query DFA</text>
<text top="522" left="285" width="9" height="15" font="4">k</text>
<text top="522" left="315" width="5" height="15" font="4">:</text>
<text top="522" left="338" width="298" height="17" font="4"># paths parameter in k-MAP, Staccato</text>
<text top="542" left="283" width="14" height="15" font="4">m</text>
<text top="542" left="315" width="5" height="15" font="4">:</text>
<text top="542" left="338" width="259" height="17" font="4"># chunks in Staccato (1 ≤ m ≤ l)</text>
<text top="576" left="108" width="702" height="15" font="4">Table 1: Space costs and query processing times for a simple chain SFA. The space indicates the</text>
<text top="596" left="108" width="259" height="15" font="4">number of bytes of storage required.</text>
<text top="657" left="108" width="26" height="16" font="1">3.1</text>
<text top="657" left="154" width="323" height="16" font="1">Approximating an SFA with Chunks</text>
<text top="689" left="108" width="702" height="15" font="4">As mentioned before, the SFAs in OCR are much larger than our example, e.g. one OCR line</text>
<text top="709" left="108" width="702" height="15" font="4">from a scanned book yielded an SFA of size 600 kB. In turn, the 200-page book blows up to over</text>
<text top="730" left="108" width="702" height="15" font="4">2 GB when represented by SFAs. Thus, to answer a query that spans many books in the FullSFA</text>
<text top="750" left="108" width="702" height="15" font="4">approach, we must read a huge amount of data. This can be a major bottleneck in query processing.</text>
<text top="770" left="108" width="702" height="15" font="4">To combat this we propose to approximate an SFA with a collection of smaller-sized SFAs (that</text>
<text top="791" left="108" width="702" height="15" font="4">we call chunks). Our goal is to create an approximation that allows us to gracefully tradeoﬀ from</text>
<text top="811" left="108" width="604" height="15" font="4">the fast-but-low-recall MAP approach to the slow-but-high-recall FullSFA approach.</text>
<text top="831" left="133" width="677" height="15" font="4">Recall that the k-MAP approach is a natural ﬁrst approximation, wherein we simply store the</text>
<text top="852" left="108" width="702" height="15" font="4">top-k paths in each of the per-line SFAs. This approach can increase the recall at a linear cost in k.</text>
<text top="872" left="108" width="702" height="15" font="4">However, as we demonstrate experimentally, simply increasing k is insuﬃcient to tradeoﬀ between</text>
<text top="892" left="108" width="583" height="15" font="4">the two extremes. That is, even for huge values of k we do not achieve full recall.</text>
<text top="912" left="133" width="677" height="15" font="4">Our idea to combat the slow increase of recall starts with the following intuition: the more</text>
<text top="933" left="108" width="702" height="15" font="4">strings from the SFA we store, the higher our recall will be. We observe that if we store the top</text>
<text top="953" left="108" width="573" height="15" font="4">k in each of m smaller SFAs (that we refer to as ‘chunks’), we eﬀectively store k</text>
<text top="950" left="682" width="11" height="11" font="5">m</text>
<text top="953" left="699" width="111" height="15" font="4">distinct strings.</text>
<text top="973" left="108" width="702" height="15" font="4">Thus, increasing the value of k increases the number of strings polynomially. In contrast, increasing</text>
<text top="994" left="108" width="702" height="15" font="4">m, the number of smaller SFAs, increases the number of paths exponentially, as illustrated in Figure</text>
<text top="1014" left="108" width="702" height="15" font="4">2. This observation motivates the idea that to improve quality, we should divide the SFA further.</text>
<text top="1069" left="455" width="8" height="15" font="4">7</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="13" size="2" family="Times" color="#3b3b3b"/>
	<fontspec id="14" size="11" family="Times" color="#000000"/>
	<fontspec id="15" size="7" family="Times" color="#000000"/>
	<fontspec id="16" size="5" family="Times" color="#000000"/>
	<fontspec id="17" size="5" family="Times" color="#000000"/>
	<fontspec id="18" size="1" family="Times" color="#3b3b3b"/>
	<fontspec id="19" size="10" family="Times" color="#000000"/>
	<fontspec id="20" size="8" family="Times" color="#0000ff"/>
	<fontspec id="21" size="8" family="Times" color="#ff0000"/>
	<fontspec id="22" size="8" family="Times" color="#000000"/>
<text top="273" left="299" width="1" height="5" font="13"> </text>
<text top="273" left="459" width="1" height="5" font="13"> </text>
<text top="154" left="288" width="7" height="15" font="10">0</text>
<text top="154" left="335" width="7" height="15" font="10">1</text>
<text top="123" left="301" width="32" height="13" font="11">a : 0.6</text>
<text top="153" left="381" width="7" height="15" font="10">2</text>
<text top="153" left="425" width="7" height="15" font="10">3</text>
<text top="123" left="392" width="32" height="13" font="11">c : 0.4</text>
<text top="154" left="471" width="7" height="15" font="10">4</text>
<text top="123" left="347" width="32" height="13" font="11">b : 0.5</text>
<text top="123" left="437" width="32" height="13" font="11">d : 0.7</text>
<text top="144" left="300" width="32" height="13" font="11">p : 0.2</text>
<text top="144" left="391" width="30" height="13" font="11">r : 0.3</text>
<text top="144" left="345" width="32" height="13" font="11">q : 0.3</text>
<text top="143" left="434" width="32" height="13" font="11">s : 0.2</text>
<text top="171" left="298" width="34" height="13" font="11">w : 0.1</text>
<text top="170" left="391" width="32" height="13" font="11">y : 0.1</text>
<text top="171" left="346" width="32" height="13" font="11">x : 0.2</text>
<text top="171" left="436" width="31" height="13" font="11">z : 0.1</text>
<text top="212" left="348" width="76" height="15" font="14">k-MAP, k = 3</text>
<text top="230" left="341" width="90" height="13" font="5">1. a b c d (0.0840)</text>
<text top="243" left="341" width="89" height="13" font="5">2. a b r d (0.0630)</text>
<text top="255" left="341" width="89" height="13" font="5">3. a q c d (0.0504)</text>
<text top="270" left="334" width="100" height="15" font="10"># strings = k = 3</text>
<text top="123" left="498" width="9" height="15" font="10">S</text>
<text top="126" left="507" width="47" height="11" font="15">TACCATO</text>
<text top="123" left="553" width="78" height="15" font="10">, m = 2, k = 3</text>
<text top="182" left="303" width="17" height="15" font="10"> …</text>
<text top="182" left="339" width="28" height="15" font="10">    …</text>
<text top="182" left="398" width="17" height="15" font="10"> …</text>
<text top="182" left="434" width="22" height="15" font="10">   ...</text>
<text top="154" left="288" width="7" height="15" font="10">0</text>
<text top="154" left="335" width="7" height="15" font="10">1</text>
<text top="158" left="514" width="4" height="9" font="16">0</text>
<text top="158" left="533" width="4" height="9" font="16">1</text>
<text top="172" left="519" width="31" height="9" font="16">…      …</text>
<text top="172" left="566" width="39" height="9" font="16">     …     ...</text>
<text top="230" left="495" width="60" height="13" font="5">1. a b (0.30)</text>
<text top="243" left="495" width="60" height="13" font="5">2. a q (0.18)</text>
<text top="255" left="495" width="59" height="13" font="5">3. a x (0.12)</text>
<text top="271" left="494" width="77" height="15" font="10"># strings = k</text>
<text top="270" left="572" width="7" height="9" font="17">m</text>
<text top="271" left="578" width="22" height="15" font="10"> = 3</text>
<text top="270" left="601" width="4" height="9" font="16">2</text>
<text top="271" left="605" width="22" height="15" font="10"> = 9</text>
<text top="211" left="507" width="34" height="15" font="10">Top 3</text>
<text top="212" left="584" width="34" height="15" font="10">Top 3</text>
<text top="182" left="550" width="29" height="15" font="10">Split</text>
<text top="230" left="576" width="59" height="13" font="5">1. c d (0.28)</text>
<text top="243" left="576" width="57" height="13" font="5">2. r d (0.21)</text>
<text top="255" left="576" width="59" height="13" font="5">3. c s (0.08)</text>
<text top="241" left="559" width="9" height="15" font="10">X</text>
<text top="158" left="571" width="4" height="9" font="16">2</text>
<text top="158" left="590" width="4" height="9" font="16">3</text>
<text top="158" left="611" width="4" height="9" font="16">4</text>
<text top="158" left="553" width="4" height="9" font="16">2</text>
<text top="312" left="173" width="572" height="17" font="4">Figure 2: A depiction of conventional Top-k versus Staccato’s approximation.</text>
<text top="375" left="245" width="203" height="15" font="4">Algorithm 1: FindMinSFA</text>
<text top="397" left="258" width="411" height="15" font="4">Inputs: SFA S with partial order ≤ on its nodes, X ⊆ V</text>
<text top="417" left="258" width="283" height="15" font="4">while X does not form a valid SFA do</text>
<text top="438" left="283" width="252" height="15" font="4">if No unique start node in X then</text>
<text top="455" left="308" width="348" height="15" font="4">Compute the least common ancestor of X, say, l</text>
<text top="476" left="308" width="327" height="15" font="4">X ← X ∪ {y ∈ V | l ≤ y and ∀x ∈ X, y ≤ x}</text>
<text top="495" left="283" width="244" height="15" font="4">if No unique end node in X then</text>
<text top="513" left="308" width="363" height="15" font="4">Compute greatest common descendant of X, say, g</text>
<text top="533" left="308" width="331" height="15" font="4">X ← X ∪ {y ∈ V | y ≤ g and ∀x ∈ X, x ≤ y}</text>
<text top="552" left="283" width="389" height="15" font="4">∀e ∈ E s.t. exactly one end-point is in X − {l, g}, add</text>
<text top="573" left="283" width="148" height="15" font="4">other end-point to X</text>
<text top="843" left="251" width="1" height="4" font="18"> </text>
<text top="843" left="459" width="1" height="4" font="18"> </text>
<text top="692" left="325" width="7" height="14" font="19">4</text>
<text top="721" left="236" width="7" height="14" font="19">0</text>
<text top="716" left="374" width="7" height="14" font="19">5</text>
<text top="756" left="349" width="7" height="14" font="19">3</text>
<text top="713" left="250" width="7" height="14" font="19">a</text>
<text top="699" left="297" width="7" height="14" font="19">e</text>
<text top="695" left="349" width="4" height="14" font="19">f</text>
<text top="735" left="297" width="7" height="14" font="19">b</text>
<text top="748" left="329" width="7" height="14" font="19">c</text>
<text top="733" left="358" width="7" height="14" font="19">d</text>
<text top="721" left="274" width="7" height="14" font="19">1</text>
<text top="756" left="307" width="7" height="14" font="19">2</text>
<text top="612" left="566" width="7" height="14" font="19">4</text>
<text top="632" left="477" width="7" height="14" font="19">0</text>
<text top="632" left="513" width="7" height="14" font="19">1</text>
<text top="628" left="625" width="7" height="14" font="19">5</text>
<text top="655" left="581" width="7" height="14" font="19">3</text>
<text top="624" left="492" width="7" height="14" font="19">a</text>
<text top="612" left="539" width="7" height="14" font="19">e</text>
<text top="611" left="605" width="4" height="14" font="19">f</text>
<text top="637" left="547" width="14" height="14" font="19">bc</text>
<text top="637" left="599" width="7" height="14" font="19">d</text>
<text top="666" left="680" width="9" height="14" font="19">B</text>
<text top="662" left="428" width="62" height="12" font="20">Good Merge</text>
<text top="699" left="564" width="7" height="14" font="19">4</text>
<text top="724" left="471" width="7" height="14" font="19">0</text>
<text top="724" left="510" width="7" height="14" font="19">1</text>
<text top="717" left="637" width="7" height="14" font="19">5</text>
<text top="739" left="600" width="7" height="14" font="19">3</text>
<text top="716" left="487" width="7" height="14" font="19">a</text>
<text top="701" left="532" width="7" height="14" font="19">e</text>
<text top="698" left="612" width="4" height="14" font="19">f</text>
<text top="711" left="548" width="7" height="14" font="19">b</text>
<text top="723" left="577" width="7" height="14" font="19">c</text>
<text top="723" left="611" width="7" height="14" font="19">d</text>
<text top="745" left="680" width="9" height="14" font="19">C</text>
<text top="766" left="631" width="44" height="12" font="21">Collapse</text>
<text top="787" left="499" width="7" height="14" font="19">4</text>
<text top="814" left="428" width="7" height="14" font="19">0</text>
<text top="812" left="546" width="7" height="14" font="19">5</text>
<text top="837" left="517" width="7" height="14" font="19">3</text>
<text top="805" left="439" width="7" height="14" font="19">a</text>
<text top="793" left="470" width="7" height="14" font="19">e</text>
<text top="791" left="529" width="4" height="14" font="19">f</text>
<text top="820" left="473" width="7" height="14" font="19">b</text>
<text top="828" left="500" width="7" height="14" font="19">c</text>
<text top="814" left="457" width="7" height="14" font="19">1</text>
<text top="837" left="484" width="7" height="14" font="19">2</text>
<text top="819" left="525" width="7" height="14" font="19">d</text>
<text top="811" left="591" width="7" height="14" font="19">0</text>
<text top="811" left="621" width="7" height="14" font="19">1</text>
<text top="811" left="673" width="7" height="14" font="19">5</text>
<text top="802" left="604" width="7" height="14" font="19">a</text>
<text top="791" left="639" width="11" height="14" font="19">ef</text>
<text top="813" left="644" width="22" height="14" font="19">bcd</text>
<text top="850" left="680" width="9" height="14" font="19">D</text>
<text top="765" left="426" width="177" height="12" font="21">5 is Greatest Common Descendant</text>
<text top="691" left="428" width="55" height="12" font="21">Bad Merge</text>
<text top="796" left="283" width="64" height="12" font="22">Original SFA</text>
<text top="850" left="409" width="9" height="14" font="19">A</text>
<text top="884" left="108" width="702" height="15" font="4">Figure 3: Algorithm 1: FindMinSFA. Illustrating merge and FindMinSFA: (A) Original: The SFA</text>
<text top="904" left="108" width="702" height="15" font="4">emits two strings: aef and abcd. Two merges considered: {(1,2),(2,3)} (successive edges), and</text>
<text top="924" left="108" width="702" height="15" font="4">{(1,2),(1,4)} (sibling edges). (B) Good merge: First set gives new edge (1,3), emitting bc. The</text>
<text top="945" left="108" width="702" height="15" font="4">SFA still emits only aef and abcd. (C) Bad merge: Second set gives new edge (1,4), emitting e and</text>
<text top="965" left="108" width="702" height="15" font="4">b. But, the SFA now wrongly emits new strings, e.g., abf (dashed lines). (D) Using Algorithm 1</text>
<text top="985" left="108" width="702" height="15" font="4">on the second set, the greatest common descendant is obtained (node 5), and the resulting set is</text>
<text top="1006" left="108" width="455" height="15" font="4">collapsed to edge (1,5). The SFA now emits only aef and abcd.</text>
<text top="1069" left="455" width="8" height="15" font="4">8</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="17" font="4">As we demonstrate experimentally, Staccato achieves the most conceptually important feature</text>
<text top="133" left="108" width="702" height="15" font="4">of our approximation: it allows us to smoothly tradeoﬀ recall for performance. In other words,</text>
<text top="154" left="108" width="516" height="15" font="4">increasing m (and k) increases the recall at the expense of performance.</text>
<text top="197" left="108" width="167" height="15" font="4">SFA Approximation</text>
<text top="197" left="292" width="518" height="15" font="4">Given an SFA S, our goal is to ﬁnd a new SFA S that satisﬁes two</text>
<text top="217" left="108" width="697" height="15" font="4">competing properties: (1) S should be smaller than S, and (2) the set of strings represented by S</text>
<text top="238" left="108" width="702" height="15" font="4">should contain as many of the high probability strings from S as possible without containing any</text>
<text top="258" left="108" width="116" height="15" font="4">strings not in S.</text>
<text top="255" left="224" width="6" height="11" font="5">6</text>
<text top="258" left="238" width="572" height="15" font="4">Our technique to approximate the SFA S is to merge a set of transitions in S (a</text>
<text top="278" left="108" width="687" height="15" font="4">‘chunk’) to produce a new SFA S ; then we retain only the top k transitions on each edge in S .</text>
<text top="299" left="133" width="677" height="15" font="4">To describe our algorithm, we need some notation. We generalize the deﬁnition of SFAs (Section</text>
<text top="319" left="108" width="702" height="15" font="4">2) to allow transitions that produce strings (as opposed to single characters). Formally, the tran-</text>
<text top="339" left="108" width="281" height="15" font="4">sition function δ has the type δ : E × Σ</text>
<text top="336" left="389" width="10" height="11" font="5">+</text>
<text top="338" left="404" width="406" height="15" font="4">→ [0, 1]. Any SFA meets this generalized SFA deﬁnition,</text>
<text top="360" left="108" width="568" height="15" font="4">and so we assume this generalized deﬁnition of SFAs for the rest of the section.</text>
<text top="380" left="133" width="677" height="15" font="4">Before describing the merging operation formally, we illustrate the challenge in the merging</text>
<text top="400" left="108" width="702" height="15" font="4">process in Figure 3. Figure 3(A) shows an SFA (without probabilities for readability). We consider</text>
<text top="421" left="108" width="702" height="15" font="4">two merging operations. First, we have chosen to merge the edges (1, 2) and (2, 3) and replaced</text>
<text top="441" left="108" width="702" height="15" font="4">it with a single edge (1, 3). To retain the same strings that are present in the SFA in (A), the</text>
<text top="461" left="108" width="702" height="15" font="4">transition function must emit the string ‘bc’ on the new edge (1, 3) as illustrated in Figure 3(B).</text>
<text top="481" left="108" width="702" height="15" font="4">In contrast, if we choose to merge the edges (1, 2) and (1, 4), there is an issue: no matter what we</text>
<text top="502" left="108" width="702" height="15" font="4">put on the transition from (1, 4) we will introduce strings that are not present in the original SFA</text>
<text top="522" left="108" width="702" height="15" font="4">(Figure 3(C)). The problem is that the set of nodes {1, 2, 4} do not form an SFA by themselves</text>
<text top="542" left="108" width="702" height="15" font="4">(there is no unique ﬁnal node). One could imagine generalizing the deﬁnition of SFA to allow richer</text>
<text top="563" left="108" width="702" height="15" font="4">structures that could capture the correlations between strings, but as we explain in Section 3.2, this</text>
<text top="583" left="108" width="702" height="15" font="4">approach creates serious technical challenges. Instead, we propose to ﬁx this issue by searching for</text>
<text top="603" left="108" width="702" height="17" font="4">a minimal SFA S that contains this set of nodes (the operation called FindMinSFA). Then, we</text>
<text top="624" left="108" width="702" height="15" font="4">replace the nodes in the set with a single edge, retaining only the top k highest probability strings</text>
<text top="644" left="108" width="702" height="17" font="4">from S . We refer to this operation of replacing S’ with an edge as Collapse. In our example,</text>
<text top="664" left="108" width="417" height="15" font="4">the result of these operations is illustrated in Figure 3(D).</text>
<text top="685" left="133" width="603" height="17" font="4">We describe our algorithm’s subroutine FindMinSFA and then the entire heuristic.</text>
<text top="728" left="108" width="106" height="15" font="4">FindMinSFA</text>
<text top="728" left="230" width="580" height="15" font="4">Given an SFA S and a set of nodes X ⊆ V , our goal is to ﬁnd a SFA S whose</text>
<text top="748" left="108" width="702" height="15" font="4">node set Y is such that that X ⊆ Y . We want the set Y to be minimal in the sense that removing</text>
<text top="769" left="108" width="702" height="15" font="4">any node y ∈ Y causes S to violate the SFA property, that is removing y causes S to no longer</text>
<text top="789" left="108" width="702" height="15" font="4">have a unique start (resp. end) state. Presented in Algorithm 1, our algorithm is based on the</text>
<text top="809" left="108" width="702" height="15" font="4">observation that the unique start node s of S must come before all nodes in X in the topological</text>
<text top="830" left="108" width="702" height="15" font="4">order of the graph (a partial order). Similarly, the end node f of the SFA S must come after all</text>
<text top="850" left="108" width="702" height="15" font="4">nodes in X in topological order. To satisfy these properties, we repeatedly enlarge Y by computing</text>
<text top="870" left="108" width="702" height="15" font="4">the start (resp. ﬁnal node) using the least common ancestor (resp. greatest common descendant)</text>
<text top="891" left="108" width="702" height="15" font="4">in the DAG. Additionally, we require that any edge in S that is incident to a node in Y can be</text>
<text top="911" left="108" width="702" height="15" font="4">incident to only either s or f . (Any node incident to both will be internal to S ) If there are no</text>
<text top="931" left="108" width="702" height="15" font="4">such edges, we are done. Otherwise, for each such edge e, we include its endpoints in Y and repeat</text>
<text top="952" left="108" width="702" height="15" font="4">this algorithm with X enlarged to Y . Once we ﬁnd a suitable set Y , we replace the set of nodes in</text>
<text top="972" left="108" width="702" height="15" font="4">the SFA S with a single edge from s (the start node of S ) to f (the ﬁnal node of S ). Figure 3(D)</text>
<text top="1002" left="127" width="5" height="8" font="6">6</text>
<text top="1004" left="133" width="325" height="12" font="7">This is a type of suﬃcient lineage approximation [46].</text>
<text top="1069" left="455" width="8" height="15" font="4">9</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">illustrates a case when there is no unique end node, and the greatest common descendant has to</text>
<text top="133" left="108" width="684" height="15" font="4">be computed. More illustrations, covering the other cases, are presented in the full version [36].</text>
<text top="177" left="108" width="189" height="15" font="4">Algorithm Description</text>
<text top="177" left="313" width="497" height="15" font="4">The inputs to our algorithm are the parameters k (the number of</text>
<text top="197" left="108" width="702" height="15" font="4">strings retained per edge) and m (the maximum number of edges that we are allowed to retain in</text>
<text top="217" left="108" width="702" height="15" font="4">the resulting graph). We describe how a user chooses these parameters in Section 3.2. For now,</text>
<text top="238" left="108" width="702" height="15" font="4">we focus on the algorithm. At each step, our approximation creates a restricted type of SFA where</text>
<text top="258" left="108" width="401" height="15" font="4">each edge emits at most k strings, i.e., ∀e ∈ E, |{σ ∈ Σ</text>
<text top="254" left="509" width="6" height="11" font="5">∗</text>
<text top="257" left="522" width="288" height="15" font="4">| δ(e, σ) &gt; 0}| ≤ k. When given an SFA</text>
<text top="278" left="108" width="573" height="15" font="4">not satisfying this property, our algorithm chooses to retain those strings σ ∈ Σ</text>
<text top="275" left="681" width="6" height="11" font="5">∗</text>
<text top="278" left="693" width="117" height="15" font="4">with the highest</text>
<text top="299" left="108" width="702" height="15" font="4">values of δ (ties broken arbitrarily). This set can be computed eﬃciently using the standard Viterbi</text>
<text top="319" left="108" width="702" height="15" font="4">algorithm [26], which is a dynamic programming algorithm for ﬁnding the most likely outputs in</text>
<text top="339" left="108" width="702" height="15" font="4">probabilistic sequence models, like HMMs. By memoizing the best partial results till a particular</text>
<text top="360" left="108" width="702" height="15" font="4">state, it can compute the globally optimal results in polynomial time. To compute the top-k results</text>
<text top="380" left="108" width="460" height="15" font="4">more eﬃciently, we use an incremental variant by Yen et al [54].</text>
<text top="423" left="121" width="382" height="15" font="4">Algorithm 2: Greedy heuristic over SFA S = (V, E)</text>
<text top="446" left="133" width="639" height="15" font="4">Choose {x, y, z} s.t. (x, y), (y, z) ∈ E and maximizing the probability mass of the retained</text>
<text top="467" left="133" width="52" height="15" font="4">strings.</text>
<text top="487" left="133" width="313" height="17" font="4">S ← Collapse(FindMinSFA(S, {x, y, z}))</text>
<text top="507" left="133" width="221" height="15" font="4">Repeat above steps till |E| ≤ m</text>
<text top="554" left="133" width="677" height="15" font="4">Algorithm 2 summarizes our heuristic: for each triple of nodes {x, y, z} such that (x, y), (y, z) ∈</text>
<text top="575" left="108" width="283" height="15" font="4">E, we ﬁnd a minimal containing SFA S</text>
<text top="580" left="391" width="9" height="11" font="5">ij</text>
<text top="575" left="408" width="402" height="17" font="4">by calling FindMinSFA({x, y, z}). We then replace the</text>
<text top="595" left="108" width="119" height="15" font="4">set of nodes in S</text>
<text top="600" left="227" width="9" height="11" font="5">ij</text>
<text top="595" left="243" width="567" height="17" font="4">by a single edge f (Collapse above). This edge f keeps only the top-k strings</text>
<text top="615" left="108" width="107" height="15" font="4">produced by S</text>
<text top="621" left="215" width="9" height="11" font="5">ij</text>
<text top="615" left="226" width="584" height="15" font="4">. Thus, the triple of nodes {x, y, z} generates a candidate SFA. We choose the</text>
<text top="636" left="108" width="702" height="15" font="4">candidate such that the probability mass of all generated strings is as high as possible (note that</text>
<text top="656" left="108" width="702" height="15" font="4">since we have thrown away some strings, the total probability mass may be less than 1). Given an</text>
<text top="676" left="108" width="702" height="15" font="4">SFA we can compute this using the standard sum-product algorithm (a faster incremental variant</text>
<text top="697" left="108" width="702" height="17" font="4">is actually used in Staccato). We then continue to recurse until we have reached our goal of</text>
<text top="717" left="108" width="702" height="17" font="4">ﬁnding an SFA that contains fewer than m edges. A simple optimization (employed by Staccato)</text>
<text top="737" left="108" width="502" height="15" font="4">is to cache those candidates we have considered in previous iterations.</text>
<text top="757" left="133" width="677" height="15" font="4">While our algorithm is not necessarily optimal, it serves as a proof of concept that our concep-</text>
<text top="778" left="108" width="702" height="17" font="4">tual goal can be achieved. That is, Staccato oﬀers a knob to tradeoﬀ recall for performance. We</text>
<text top="798" left="108" width="702" height="15" font="4">describe the experimental setup in more detail in Section 5, but we illustrate our point with a simple</text>
<text top="818" left="108" width="702" height="17" font="4">experimental result. Figure 4 plots the recall and runtimes of the two baselines and Staccato.</text>
<text top="839" left="108" width="702" height="17" font="4">Here, we have set k = 100 and m = 10. On these two queries, Staccato falls in the middle on</text>
<text top="859" left="108" width="207" height="15" font="4">both recall and performance.</text>
<text top="922" left="108" width="26" height="16" font="1">3.2</text>
<text top="922" left="154" width="215" height="16" font="1">Extensions and Analysis</text>
<text top="954" left="108" width="702" height="15" font="4">To understand the formal underpinning of our approach, we perform a theoretical analysis. In-</text>
<text top="974" left="108" width="702" height="15" font="4">formally, the ﬁrst question is: “in what sense is choosing the k-MAP the best approximation for</text>
<text top="995" left="108" width="702" height="15" font="4">each chunk in our algorithm?” The second question we ask is to justify our restriction to SFAs as</text>
<text top="1015" left="108" width="702" height="15" font="4">opposed to richer graphical structures in our approximation. We show that k-MAP in each chunk</text>
<text top="1069" left="451" width="16" height="15" font="4">10</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="23" size="6" family="Times" color="#3b3b3b"/>
	<fontspec id="24" size="6" family="Times" color="#000000"/>
	<fontspec id="25" size="6" family="Times" color="#ffffff"/>
<text top="220" left="328" width="2" height="10" font="23"> </text>
<text top="220" left="458" width="2" height="10" font="23"> </text>
<text top="207" left="345" width="16" height="13" font="11">0.1</text>
<text top="207" left="408" width="6" height="13" font="11">1</text>
<text top="207" left="463" width="13" height="13" font="11">10</text>
<text top="207" left="518" width="19" height="13" font="11">100</text>
<text top="207" left="574" width="25" height="13" font="11">1000</text>
<text top="196" left="342" width="6" height="13" font="11">0</text>
<text top="178" left="332" width="16" height="13" font="11">0.2</text>
<text top="161" left="332" width="16" height="13" font="11">0.4</text>
<text top="143" left="332" width="16" height="13" font="11">0.6</text>
<text top="126" left="332" width="16" height="13" font="11">0.8</text>
<text top="109" left="342" width="6" height="13" font="11">1</text>
<text top="130" left="363" width="7" height="10" font="24">M</text>
<text top="121" left="444" width="6" height="10" font="24">S</text>
<text top="111" left="521" width="5" height="10" font="24">F</text>
<text top="174" left="364" width="7" height="10" font="25">M</text>
<text top="142" left="447" width="6" height="10" font="25">S</text>
<text top="110" left="538" width="5" height="10" font="25">F</text>
<text top="165" left="328" width="0" height="13" font="11">R</text>
<text top="157" left="328" width="0" height="13" font="11">ec</text>
<text top="144" left="328" width="0" height="13" font="11">al</text>
<text top="134" left="328" width="0" height="13" font="11">l</text>
<text top="217" left="415" width="96" height="13" font="11">Runtime (in secs)</text>
<text top="158" left="518" width="10" height="13" font="11">M</text>
<text top="171" left="518" width="8" height="13" font="11">S</text>
<text top="184" left="518" width="7" height="13" font="11">F</text>
<text top="158" left="528" width="33" height="13" font="11">: MAP</text>
<text top="171" left="528" width="15" height="13" font="11">: S</text>
<text top="174" left="543" width="43" height="10" font="24">TACCATO</text>
<text top="184" left="528" width="50" height="13" font="11">: FullSFA</text>
<text top="166" left="440" width="43" height="13" font="11">Query 2</text>
<text top="115" left="386" width="43" height="13" font="11">Query 1</text>
<text top="255" left="108" width="702" height="15" font="4">Figure 4: Recall - Runtime tradeoﬀ for a keyword query (Query 1) and a regular expression query</text>
<text top="276" left="108" width="702" height="15" font="4">(Query 2). The parameters are: number of chunks (m) = 10, number of paths per chunk (k) =</text>
<text top="296" left="108" width="422" height="15" font="4">100, and number of answers queried for (N umAns) = 100.</text>
<text top="345" left="108" width="702" height="15" font="4">is no longer the best approximation and that there is likely no simple algorithm (as an underlying</text>
<text top="365" left="108" width="182" height="15" font="4">problem is NP-complete.)</text>
<text top="385" left="133" width="677" height="15" font="4">We formally deﬁne the goal of our algorithms. Recall that an SFA S on Σ represents a prob-</text>
<text top="406" left="108" width="160" height="15" font="4">ability distribution Pr</text>
<text top="411" left="268" width="8" height="11" font="5">S</text>
<text top="406" left="285" width="23" height="15" font="4">: Σ</text>
<text top="402" left="308" width="6" height="11" font="5">∗</text>
<text top="405" left="322" width="216" height="15" font="4">→ [0, 1]. Given a set X ⊆ Σ</text>
<text top="402" left="538" width="6" height="11" font="5">∗</text>
<text top="406" left="545" width="78" height="15" font="4">, deﬁne Pr</text>
<text top="411" left="623" width="8" height="11" font="5">S</text>
<text top="406" left="632" width="44" height="15" font="4">[X] =</text>
<text top="414" left="700" width="26" height="11" font="5">x∈X</text>
<text top="406" left="730" width="18" height="15" font="4">Pr</text>
<text top="411" left="748" width="6" height="11" font="5">s</text>
<text top="406" left="754" width="56" height="15" font="4">[x]. All</text>
<text top="426" left="108" width="702" height="15" font="4">the approximations that we consider emit a subset of strings from the original model. Given an</text>
<text top="446" left="108" width="702" height="15" font="4">approximation scheme α, we denote by Emit(α) the set of strings that are emitted (retained) by</text>
<text top="467" left="108" width="572" height="15" font="4">that scheme. All other things being equal, we prefer a scheme α to α whenever</text>
<text top="501" left="360" width="18" height="15" font="4">Pr</text>
<text top="515" left="365" width="8" height="11" font="5">S</text>
<text top="501" left="378" width="107" height="15" font="4">[Emit(α)] ≥ Pr</text>
<text top="515" left="472" width="8" height="11" font="5">S</text>
<text top="501" left="485" width="72" height="15" font="4">[Emit(α )]</text>
<text top="542" left="108" width="702" height="15" font="4">That is, α retains more probability mass than α . The formal basis for this choice is a standard</text>
<text top="562" left="108" width="702" height="15" font="4">statistical measure called the Kullback-Leibler Divergence [15], between the original and the ap-</text>
<text top="583" left="108" width="702" height="15" font="4">proximate probability distributions. In the full version [36], we show that this divergence is lower</text>
<text top="603" left="108" width="702" height="15" font="4">(which means the approximate distribution is more similar to the original distribution) if the ap-</text>
<text top="623" left="108" width="702" height="15" font="4">proximation satisﬁes the above inequality. In other words, a better approximation retains more of</text>
<text top="644" left="108" width="200" height="15" font="4">the high-probability strings.</text>
<text top="664" left="133" width="677" height="17" font="4">We now describe our two main theoretical results. First for SFAs, Staccato’s approach to</text>
<text top="684" left="108" width="702" height="15" font="4">choosing the k highest probability strings in each chunk is optimal. For richer structures than</text>
<text top="705" left="108" width="702" height="15" font="4">SFAs, ﬁnding the optimal approximation is intractable (even if we are given the chunk structure,</text>
<text top="725" left="108" width="702" height="15" font="4">described below). Showing the ﬁrst statement is straightforward, while the result about richer</text>
<text top="745" left="108" width="218" height="15" font="4">structures is more challenging.</text>
<text top="788" left="108" width="256" height="15" font="4">Optimality of k-MAP for SFAs</text>
<text top="788" left="381" width="392" height="15" font="4">Given a generalized SFA S = (V, δ). Fix k ≥ 1. Let S</text>
<text top="794" left="773" width="14" height="11" font="5">[k]</text>
<text top="788" left="793" width="17" height="15" font="4">be</text>
<text top="808" left="108" width="702" height="15" font="4">the set of all SFAs (V, δ ) that arise from picking k strings on each edge of S to store. That is, for</text>
<text top="829" left="108" width="674" height="15" font="4">any pair of nodes x, y ∈ V the set of strings with non-zero probability has size smaller than k:</text>
<text top="862" left="349" width="50" height="15" font="4">{σ ∈ Σ</text>
<text top="859" left="399" width="6" height="11" font="5">∗</text>
<text top="862" left="411" width="163" height="15" font="4">| δ ((x, y), σ) &gt; 0} ≤ k</text>
<text top="898" left="108" width="40" height="15" font="4">Let S</text>
<text top="903" left="148" width="7" height="11" font="5">k</text>
<text top="898" left="161" width="649" height="15" font="4">denote an SFA that for each pair (x, y) ∈ V chooses the highest probability strings in the</text>
<text top="918" left="108" width="285" height="15" font="4">model (breaking ties arbitrarily). Then,</text>
<text top="950" left="108" width="246" height="15" font="4">Proposition 3.1. For any S ∈ S</text>
<text top="956" left="354" width="14" height="11" font="5">[k]</text>
<text top="950" left="369" width="72" height="15" font="4">, we have:</text>
<text top="984" left="357" width="18" height="15" font="4">Pr</text>
<text top="998" left="361" width="8" height="11" font="5">S</text>
<text top="984" left="374" width="57" height="15" font="4">[Emit(S</text>
<text top="990" left="431" width="7" height="11" font="5">k</text>
<text top="984" left="438" width="50" height="15" font="4">)] ≥ Pr</text>
<text top="998" left="476" width="8" height="11" font="5">S</text>
<text top="984" left="489" width="73" height="15" font="4">[Emit(S )]</text>
<text top="1024" left="133" width="53" height="15" font="4">Since S</text>
<text top="1030" left="186" width="7" height="11" font="5">k</text>
<text top="1024" left="199" width="608" height="17" font="4">is selected by Staccato, we view this as formal justiﬁcation for Staccato’s choice.</text>
<text top="1069" left="451" width="16" height="15" font="4">11</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="271" height="15" font="4">Richer Structural Approximation</text>
<text top="113" left="395" width="415" height="15" font="4">We now ask a follow-up question: “If we allow more general</text>
<text top="133" left="108" width="702" height="15" font="4">partitions (rather than collapsing edges), is k-MAP still optimal?” To make this precise, we consider</text>
<text top="154" left="108" width="702" height="15" font="4">a partition of the underlying edges of the SFA into connected components (call that partition Φ).</text>
<text top="174" left="108" width="702" height="15" font="4">Keeping with our early terminology, an element of the partition is called a chunk. In each chunk, we</text>
<text top="194" left="108" width="629" height="15" font="4">select at most k strings (corresponding to labeled paths through the chunk). Let α : Φ×Σ</text>
<text top="191" left="737" width="6" height="11" font="5">∗</text>
<text top="193" left="749" width="61" height="15" font="4">→ {0, 1}</text>
<text top="215" left="108" width="702" height="15" font="4">be an indicator function such that α(φ, σ) = 1 only if in chunk φ we choose string σ. For any k ≥ 1,</text>
<text top="235" left="108" width="37" height="15" font="4">let A</text>
<text top="241" left="145" width="7" height="11" font="5">k</text>
<text top="235" left="160" width="650" height="15" font="4">denote the set of all such αs that picks at most k strings from each chunk, i.e., for any</text>
<text top="255" left="108" width="173" height="15" font="4">φ ∈ Φ we have |{σ ∈ Σ</text>
<text top="252" left="281" width="6" height="11" font="5">∗</text>
<text top="254" left="292" width="518" height="15" font="4">| α(φ, σ) &gt; 0}| ≤ k. Let Emit(α) be the set of strings emitted by this</text>
<text top="276" left="108" width="702" height="15" font="4">representation with non-zero probability (all strings that can be created from concatenating paths</text>
<text top="296" left="108" width="101" height="15" font="4">in the model).</text>
<text top="316" left="133" width="677" height="15" font="4">Following the intuition from the SFA case described above, the best α would select the k-</text>
<text top="337" left="108" width="702" height="15" font="4">highest probability strings in each chunk. However, this is not the case. Moreover, we exhibit</text>
<text top="357" left="108" width="702" height="15" font="4">chunk structures, where ﬁnding the optimal choice of α is NP-hard in the size of the structure.</text>
<text top="377" left="108" width="639" height="15" font="4">This makes it unlikely that there is any simple description of the optimal approximation.</text>
<text top="411" left="108" width="702" height="15" font="4">Theorem 3.1. Fix k ≥ 2. The following problem is NP-complete. Given as input (S, Φ, λ) where</text>
<text top="431" left="108" width="694" height="15" font="4">S is an SFA, Φ partitions the underlying graph of S, and λ ≥ 0, determine if there exists an α ∈ A</text>
<text top="437" left="802" width="7" height="11" font="5">k</text>
<text top="452" left="108" width="195" height="15" font="4">satisfying Pr[Emit(α)] ≥ λ.</text>
<text top="485" left="133" width="677" height="15" font="4">The above problem remains NP-complete if S is restricted to satisfy the unique path property</text>
<text top="506" left="108" width="702" height="15" font="4">and restricted to a binary alphabet. A direct consequence of this theorem is that ﬁnding the</text>
<text top="526" left="108" width="702" height="15" font="4">maximizer is at least NP-hard. We provide the proof of this theorem in the full version [36]. The</text>
<text top="546" left="108" width="702" height="15" font="4">proof includes a detailed outline of a reduction from a matrix multiplication-related problem that</text>
<text top="567" left="108" width="702" height="15" font="4">is known be to hard. The reduction is by a gadget construction that encodes matrix multiplication</text>
<text top="587" left="108" width="702" height="15" font="4">as SFAs. Each chunk has at most 2 nodes in either border (as opposed to an SFA which has a</text>
<text top="607" left="108" width="702" height="15" font="4">single start and ﬁnal node). This is about the weakest violation of the SFA property that we can</text>
<text top="628" left="108" width="648" height="15" font="4">imagine, and suggests to us that the SFA property is critical for tractable approximations.</text>
<text top="671" left="108" width="314" height="15" font="4">Automated Construction of Staccato</text>
<text top="671" left="438" width="372" height="15" font="4">Part of our goal is to allow knobs to trade recall</text>
<text top="691" left="108" width="702" height="15" font="4">for performance on a per application basis, but setting the correct values for m and k may be</text>
<text top="712" left="108" width="702" height="15" font="4">unintuitive for users. To reduce the burden on the user, we devise a simple parameter tuning</text>
<text top="732" left="108" width="702" height="15" font="4">heuristic that maximizes query performance, while achieving acceptable recall. To measure recall,</text>
<text top="752" left="108" width="702" height="15" font="4">the user provides a set of labeled examples and representative queries. The user speciﬁes a quality</text>
<text top="773" left="108" width="702" height="15" font="4">constraint (average recall for the set of queries) and a size constraint (storage space as percentage</text>
<text top="793" left="108" width="702" height="15" font="4">of the original dataset size). The goal is to ﬁnd a pair of parameters (m,k) that satisﬁes both these</text>
<text top="813" left="108" width="702" height="15" font="4">constraints. We note that the size of the data is a function of (m,k) (see Table 1), which along</text>
<text top="834" left="108" width="702" height="15" font="4">with the size constraint helps us express k in terms of m (or vice versa). We empirically observed</text>
<text top="854" left="108" width="702" height="15" font="4">that for a ﬁxed size, a smaller m usually yields faster query performance than a smaller k, which</text>
<text top="874" left="108" width="702" height="15" font="4">suggests that we need to minimize the value of m to maximize query performance. Our method</text>
<text top="895" left="108" width="702" height="15" font="4">works as follows: we pick a given value of m, then calculate the corresponding k that lies on the size</text>
<text top="915" left="108" width="702" height="17" font="4">constraint boundary. Given the resulting (m,k) pair, we compute the Staccato approximation of</text>
<text top="935" left="108" width="702" height="15" font="4">the dataset and estimate the average recall. This problem is now a one-dimensional search problem:</text>
<text top="956" left="108" width="702" height="15" font="4">our goal is to ﬁnd the smallest m that satisﬁes the recall constraint. We solve this using essentially</text>
<text top="976" left="108" width="702" height="15" font="4">a binary search. If infeasible, the user relaxes one of the constraints and repeats the above method.</text>
<text top="996" left="108" width="702" height="15" font="4">We experimentally validated this tuning method and compared it with an exhaustive search on the</text>
<text top="1016" left="108" width="414" height="15" font="4">parameter space. The results are discussed in Section 5.5.</text>
<text top="1069" left="451" width="16" height="15" font="4">12</text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="26" size="4" family="Times" color="#3b3b3b"/>
	<fontspec id="27" size="8" family="Times" color="#000000"/>
<text top="110" left="108" width="12" height="19" font="3">4</text>
<text top="110" left="144" width="189" height="19" font="3">Inverted Indexing</text>
<text top="150" left="108" width="702" height="15" font="4">To speedup keywords and anchored regex queries on standard ASCII text, a popular technique</text>
<text top="170" left="108" width="702" height="15" font="4">is to use standard inverted-indexing [14]. While indexing k-MAP data is pretty straightforward,</text>
<text top="190" left="108" width="702" height="15" font="4">the FullSFA is diﬃcult. The reason is that the FullSFA encodes exponentially many strings in its</text>
<text top="211" left="108" width="702" height="15" font="4">length, and so indexing all strings for even a moderate-sized SFA is hopeless. Figure 5 shows the</text>
<text top="231" left="108" width="702" height="15" font="4">size of the index obtained (in number of postings [14], in our case line number item pairs) when we</text>
<text top="251" left="108" width="523" height="17" font="4">try to directly index the Staccato text of a single SFA (one OCR line).</text>
<text top="382" left="299" width="2" height="8" font="26"> </text>
<text top="382" left="458" width="2" height="8" font="26"> </text>
<text top="367" left="318" width="39" height="12" font="22">1 10 25</text>
<text top="367" left="375" width="12" height="12" font="22">50</text>
<text top="367" left="405" width="12" height="12" font="22">75</text>
<text top="367" left="432" width="18" height="12" font="22">100</text>
<text top="357" left="298" width="19" height="12" font="22">1E1</text>
<text top="340" left="298" width="19" height="12" font="22">1E2</text>
<text top="322" left="298" width="19" height="12" font="22">1E3</text>
<text top="305" left="298" width="19" height="12" font="22">1E4</text>
<text top="288" left="298" width="19" height="12" font="22">1E5</text>
<text top="367" left="495" width="35" height="12" font="22">1 1020</text>
<text top="367" left="543" width="12" height="12" font="22">40</text>
<text top="367" left="568" width="12" height="12" font="22">60</text>
<text top="367" left="594" width="40" height="12" font="22">80 100</text>
<text top="358" left="475" width="19" height="12" font="22">1E1</text>
<text top="330" left="475" width="19" height="12" font="22">1E9</text>
<text top="302" left="469" width="25" height="12" font="22">1E17</text>
<text top="331" left="388" width="19" height="12" font="22">m 5</text>
<text top="296" left="331" width="25" height="12" font="22">m 20</text>
<text top="352" left="431" width="7" height="12" font="27">A</text>
<text top="309" left="522" width="21" height="12" font="22">k 50</text>
<text top="336" left="583" width="21" height="12" font="22">k 10</text>
<text top="352" left="617" width="7" height="12" font="27">B</text>
<text top="350" left="292" width="0" height="12" font="22"># </text>
<text top="340" left="292" width="0" height="12" font="22">P</text>
<text top="333" left="292" width="0" height="12" font="22">o</text>
<text top="327" left="292" width="0" height="12" font="22">s</text>
<text top="321" left="292" width="0" height="12" font="22">ti</text>
<text top="314" left="292" width="0" height="12" font="22">n</text>
<text top="307" left="292" width="0" height="12" font="22">g</text>
<text top="301" left="292" width="0" height="12" font="22">s</text>
<text top="350" left="466" width="0" height="12" font="22"># </text>
<text top="340" left="466" width="0" height="12" font="22">P</text>
<text top="333" left="466" width="0" height="12" font="22">o</text>
<text top="327" left="466" width="0" height="12" font="22">s</text>
<text top="321" left="466" width="0" height="12" font="22">ti</text>
<text top="314" left="466" width="0" height="12" font="22">n</text>
<text top="307" left="466" width="0" height="12" font="22">g</text>
<text top="301" left="466" width="0" height="12" font="22">s</text>
<text top="343" left="476" width="19" height="12" font="22">1E5</text>
<text top="379" left="325" width="108" height="12" font="22">k: # Paths Parameter</text>
<text top="379" left="501" width="122" height="12" font="22">m: # Chunks Parameter</text>
<text top="316" left="469" width="25" height="12" font="22">1E13</text>
<text top="287" left="469" width="25" height="12" font="22">1E21</text>
<text top="415" left="108" width="702" height="15" font="4">Figure 5: Number of postings (in logscale) from directly indexing one SFA. (A) Fix m, vary k.</text>
<text top="436" left="108" width="702" height="15" font="4">(B) Fix k, vary m. In (B), for k = 50, the number of postings overﬂows the 64-bit representation</text>
<text top="456" left="108" width="114" height="15" font="4">beyond m = 60.</text>
<text top="493" left="133" width="677" height="15" font="4">Figure 5 shows an exponential blowup with m – which is not surprising as we store exponentially</text>
<text top="514" left="108" width="702" height="15" font="4">more paths with increasing m. Our observation is that many of these exponentially many terms</text>
<text top="534" left="108" width="702" height="15" font="4">are useless to applications. Thus, to extend the reach of indexing, we apply a standard technique.</text>
<text top="554" left="108" width="702" height="15" font="4">We use a dictionary of terms input by the user, and construct the index only for these terms [22].</text>
<text top="575" left="108" width="702" height="15" font="4">These terms may be extracted from a known clean text corpus or from other sources like an English</text>
<text top="595" left="108" width="702" height="15" font="4">dictionary. Our construction algorithm builds a DFA from the dictionary of terms, and runs a slight</text>
<text top="615" left="108" width="702" height="15" font="4">modiﬁcation of the SFA composition algorithm [29] with the data to ﬁnd the start locations of all</text>
<text top="636" left="108" width="702" height="15" font="4">terms (details of the modiﬁcation are in the full version [36]). The running time of the algorithm</text>
<text top="656" left="108" width="263" height="15" font="4">is linear in the size of the dictionary.</text>
<text top="699" left="108" width="86" height="15" font="4">Projection</text>
<text top="699" left="211" width="599" height="15" font="4">In traditional text processing, given the length of the keyword and the oﬀset of a</text>
<text top="720" left="108" width="702" height="15" font="4">match, we can read only that small portion of the document to process the query. We extend this</text>
<text top="740" left="108" width="702" height="17" font="4">idea to Staccato by ﬁnding a small portion of the SFA that is needed to answer the query – an</text>
<text top="760" left="108" width="702" height="15" font="4">operation that we call projection. Given a term t of length u, we obtain start locations of t from</text>
<text top="781" left="108" width="702" height="15" font="4">the postings. For each start location, we compute an (over)estimate of the nodes that we must</text>
<text top="801" left="108" width="702" height="15" font="4">process to obtain the term t. More precisely, we want the descendant nodes in the DAG that can</text>
<text top="821" left="108" width="702" height="15" font="4">be reached by a directed path from the start location that contains u or fewer edges (we ﬁnd such</text>
<text top="842" left="108" width="702" height="15" font="4">nodes using a breadth-ﬁrst search). This gives us a set of nodes that we must retrieve, which is</text>
<text top="862" left="108" width="289" height="15" font="4">often much smaller than the entire SFA.</text>
<text top="882" left="133" width="677" height="17" font="4">We empirically show that even a simple indexing scheme as above can be used by Staccato</text>
<text top="902" left="108" width="702" height="15" font="4">to speedup keyword and anchored regular expression queries by over an order of magnitude versus</text>
<text top="923" left="108" width="702" height="15" font="4">a ﬁlescan-based approach. This validates our claim that indexing is possible for OCR transducers,</text>
<text top="943" left="108" width="702" height="15" font="4">and opens the possibility of adapting more advanced indexing techniques to improve the runtime</text>
<text top="963" left="108" width="69" height="15" font="4">speedups.</text>
<text top="1069" left="451" width="16" height="15" font="4">13</text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1188" width="918">
<text top="110" left="108" width="12" height="19" font="3">5</text>
<text top="110" left="144" width="263" height="19" font="3">Experimental Evaluation</text>
<text top="150" left="108" width="702" height="17" font="4">We experimentally verify that the Staccato approach can gracefully tradeoﬀ between performance</text>
<text top="170" left="108" width="702" height="15" font="4">and quality. We also validate that our modiﬁcations to standard inverted indexing allow us to</text>
<text top="190" left="108" width="184" height="15" font="4">speedup query answering.</text>
<text top="236" left="291" width="63" height="15" font="4">Dataset</text>
<text top="226" left="404" width="53" height="15" font="4">No. of</text>
<text top="226" left="477" width="53" height="15" font="4">No. of</text>
<text top="226" left="574" width="61" height="15" font="4">Size as:</text>
<text top="247" left="408" width="47" height="15" font="4">Pages</text>
<text top="247" left="484" width="42" height="15" font="4">SFAs</text>
<text top="247" left="555" width="42" height="15" font="4">SFAs</text>
<text top="247" left="620" width="37" height="15" font="4">Text</text>
<text top="267" left="261" width="124" height="15" font="4">Cong. Acts (CA)</text>
<text top="267" left="423" width="16" height="15" font="4">38</text>
<text top="267" left="488" width="33" height="15" font="4">1590</text>
<text top="267" left="550" width="51" height="15" font="4">533MB</text>
<text top="267" left="620" width="37" height="15" font="4">90kB</text>
<text top="288" left="261" width="125" height="15" font="4">English Lit. (LT)</text>
<text top="288" left="423" width="16" height="15" font="4">32</text>
<text top="288" left="488" width="33" height="15" font="4">1211</text>
<text top="288" left="550" width="51" height="15" font="4">524MB</text>
<text top="288" left="620" width="37" height="15" font="4">78kB</text>
<text top="309" left="263" width="120" height="15" font="4">DB Papers (DB)</text>
<text top="309" left="423" width="16" height="15" font="4">16</text>
<text top="309" left="492" width="25" height="15" font="4">627</text>
<text top="309" left="550" width="51" height="15" font="4">359MB</text>
<text top="309" left="620" width="37" height="15" font="4">54kB</text>
<text top="344" left="181" width="549" height="15" font="4">Table 2: Dataset Statistics. Each SFA represents one line of a scanned page.</text>
<text top="405" left="108" width="119" height="15" font="4">Datasets Used</text>
<text top="405" left="243" width="567" height="15" font="4">We use three real-world datasets from domains where document digitization is</text>
<text top="425" left="108" width="702" height="15" font="4">growing. Congress Acts (CA) is a set of scans of acts of the U.S. Congress, obtained from The</text>
<text top="446" left="108" width="702" height="15" font="4">Hathi Trust [9]. English Literature (LT) is a set of scans of an English literature book, obtained</text>
<text top="466" left="108" width="702" height="15" font="4">from the JSTOR Archive [10]. Database Papers (DB) is a set of papers that we scanned ourselves</text>
<text top="486" left="108" width="702" height="15" font="4">to simulate a setting where an organization would scan documents for in-house usage. All the</text>
<text top="507" left="108" width="702" height="15" font="4">scan images were converted to SFAs using the OCRopus tool [8]. Each line of each document is</text>
<text top="527" left="108" width="702" height="15" font="4">represented by one SFA. We created a manual ground truth for these documents. The relevant</text>
<text top="547" left="108" width="702" height="15" font="4">statistics of these datasets are shown in Table 2. In order to study the scalability of the approaches</text>
<text top="568" left="108" width="605" height="15" font="4">on much larger datasets, we used a 100 GB dataset obtained from Google Books [7].</text>
<text top="611" left="108" width="164" height="15" font="4">Experimental Setup</text>
<text top="611" left="288" width="522" height="15" font="4">The three approaches were implemented in C++ using PostgreSQL 9.0.3.</text>
<text top="631" left="108" width="702" height="15" font="4">The current implementation is single threaded so as to assess the impact of the approximation.</text>
<text top="651" left="108" width="702" height="15" font="4">All experiments are run on Intel Core-2 E6600 machines with 2.4 GHz CPU, 4 GB RAM, running</text>
<text top="672" left="108" width="702" height="15" font="4">Linux 2.6.18-194. The runtimes are averaged over 7 runs. The notation for the parameters is</text>
<text top="692" left="108" width="168" height="15" font="4">summarized in Table 3.</text>
<text top="725" left="271" width="61" height="15" font="4">Symbol</text>
<text top="725" left="455" width="95" height="15" font="4">Description</text>
<text top="746" left="297" width="9" height="15" font="4">k</text>
<text top="746" left="354" width="296" height="17" font="4"># Paths Parameter (k-MAP, Staccato)</text>
<text top="767" left="295" width="14" height="15" font="4">m</text>
<text top="767" left="379" width="247" height="17" font="4"># Chunks Parameter (Staccato)</text>
<text top="788" left="267" width="68" height="15" font="4">N umAns</text>
<text top="788" left="422" width="161" height="15" font="4"># Answers queried for</text>
<text top="822" left="336" width="246" height="15" font="4">Table 3: Notations for Parameters</text>
<text top="860" left="108" width="702" height="15" font="4">We set N umAns = 100, which is greater than the number of answers in the ground truth for all</text>
<text top="881" left="108" width="702" height="17" font="4">reported queries. If Staccato ﬁnds fewer matches than N umAns, it may return fewer answers.</text>
<text top="901" left="108" width="676" height="15" font="4">N umAns aﬀects precision, and we do sensitivity analysis for N umAns in the full version [36].</text>
<text top="944" left="108" width="26" height="16" font="1">5.1</text>
<text top="944" left="154" width="369" height="16" font="1">Quality - Performance Tradeoﬀ (Filescan)</text>
<text top="976" left="108" width="702" height="15" font="4">We now present the detailed quality and performance results for queries run with a full ﬁlescan.</text>
<text top="996" left="108" width="702" height="17" font="4">The central technical claim of this paper is that Staccato bridges the gap from the low-recall-</text>
<text top="1016" left="108" width="702" height="15" font="4">but-fast MAP to the high-recall-but-slow FullSFA. To verify this claim, we measured the recall</text>
<text top="1069" left="451" width="16" height="15" font="4">14</text>
</page>
<page number="15" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">and performance of 21 queries on the three datasets. We formulated these queries based on our</text>
<text top="133" left="108" width="702" height="15" font="4">discussions with practitioners in companies and researchers in the social sciences who work with</text>
<text top="154" left="108" width="702" height="15" font="4">real-world OCR data. Table 4 presents a subset of these results (the rest are presented in the full</text>
<text top="174" left="108" width="188" height="15" font="4">version of this paper [36]).</text>
<text top="211" left="258" width="44" height="15" font="4">Query</text>
<text top="211" left="339" width="38" height="15" font="4">MAP</text>
<text top="211" left="416" width="53" height="15" font="4">k-MAP</text>
<text top="211" left="499" width="58" height="15" font="4">FullSFA</text>
<text top="214" left="583" width="77" height="14" font="4">Staccato</text>
<text top="232" left="424" width="135" height="15" font="4">Precision/Recall</text>
<text top="253" left="264" width="32" height="15" font="4">CA1</text>
<text top="253" left="325" width="66" height="15" font="4">1.00/0.79</text>
<text top="253" left="410" width="66" height="15" font="4">1.00/0.79</text>
<text top="253" left="494" width="66" height="15" font="4">0.14/1.00</text>
<text top="253" left="588" width="66" height="15" font="4">1.00/0.79</text>
<text top="273" left="264" width="32" height="15" font="4">CA2</text>
<text top="273" left="325" width="66" height="15" font="4">1.00/0.28</text>
<text top="273" left="410" width="66" height="15" font="4">1.00/0.52</text>
<text top="273" left="494" width="66" height="15" font="4">0.25/1.00</text>
<text top="273" left="588" width="66" height="15" font="4">0.73/0.76</text>
<text top="294" left="266" width="29" height="15" font="4">LT1</text>
<text top="294" left="325" width="66" height="15" font="4">0.96/0.87</text>
<text top="294" left="410" width="66" height="15" font="4">0.96/0.90</text>
<text top="294" left="494" width="66" height="15" font="4">0.92/1.00</text>
<text top="294" left="588" width="66" height="15" font="4">0.97/0.91</text>
<text top="314" left="266" width="29" height="15" font="4">LT2</text>
<text top="314" left="325" width="66" height="15" font="4">0.78/0.66</text>
<text top="314" left="410" width="66" height="15" font="4">0.76/0.66</text>
<text top="314" left="494" width="66" height="15" font="4">0.31/0.97</text>
<text top="314" left="588" width="66" height="15" font="4">0.44/0.81</text>
<text top="335" left="264" width="32" height="15" font="4">DB1</text>
<text top="335" left="325" width="66" height="15" font="4">0.93/0.75</text>
<text top="335" left="410" width="66" height="15" font="4">0.90/0.92</text>
<text top="335" left="494" width="66" height="15" font="4">0.67/0.99</text>
<text top="335" left="588" width="66" height="15" font="4">0.90/0.96</text>
<text top="356" left="264" width="32" height="15" font="4">DB2</text>
<text top="356" left="325" width="66" height="15" font="4">0.96/0.76</text>
<text top="356" left="410" width="66" height="15" font="4">0.96/0.76</text>
<text top="356" left="494" width="66" height="15" font="4">0.33/1.00</text>
<text top="356" left="588" width="66" height="15" font="4">0.91/0.97</text>
<text top="376" left="404" width="176" height="15" font="4">Runtime (in seconds)</text>
<text top="397" left="264" width="32" height="15" font="4">CA1</text>
<text top="397" left="343" width="29" height="15" font="4">0.17</text>
<text top="397" left="428" width="29" height="15" font="4">0.75</text>
<text top="397" left="509" width="37" height="15" font="4">86.72</text>
<text top="397" left="607" width="29" height="15" font="4">2.87</text>
<text top="418" left="264" width="32" height="15" font="4">CA2</text>
<text top="418" left="343" width="29" height="15" font="4">0.18</text>
<text top="418" left="428" width="29" height="15" font="4">0.84</text>
<text top="418" left="505" width="45" height="15" font="4">150.35</text>
<text top="418" left="607" width="29" height="15" font="4">3.36</text>
<text top="439" left="266" width="29" height="15" font="4">LT1</text>
<text top="439" left="343" width="29" height="15" font="4">0.13</text>
<text top="439" left="428" width="29" height="15" font="4">0.19</text>
<text top="439" left="509" width="37" height="15" font="4">83.78</text>
<text top="439" left="607" width="29" height="15" font="4">1.98</text>
<text top="459" left="266" width="29" height="15" font="4">LT2</text>
<text top="459" left="343" width="29" height="15" font="4">0.14</text>
<text top="459" left="428" width="29" height="15" font="4">0.24</text>
<text top="459" left="505" width="45" height="15" font="4">155.45</text>
<text top="459" left="607" width="29" height="15" font="4">2.88</text>
<text top="480" left="264" width="32" height="15" font="4">DB1</text>
<text top="480" left="343" width="29" height="15" font="4">0.07</text>
<text top="480" left="428" width="29" height="15" font="4">0.29</text>
<text top="480" left="509" width="37" height="15" font="4">40.73</text>
<text top="480" left="607" width="29" height="15" font="4">0.75</text>
<text top="500" left="264" width="32" height="15" font="4">DB2</text>
<text top="500" left="343" width="29" height="15" font="4">0.07</text>
<text top="500" left="428" width="29" height="15" font="4">0.33</text>
<text top="500" left="505" width="45" height="15" font="4">619.31</text>
<text top="500" left="607" width="29" height="15" font="4">0.86</text>
<text top="535" left="108" width="702" height="15" font="4">Table 4: Recall and runtime results across datasets. The keyword queries are – CA1: ‘P resident’,</text>
<text top="555" left="108" width="282" height="15" font="4">LT1: ‘Brinkmann’ and DB1: ‘T rio’.</text>
<text top="555" left="405" width="405" height="15" font="4">The regex queries are – CA2: ‘U.S.C. 2\d\d\d’, LT2:</text>
<text top="575" left="108" width="702" height="15" font="4">‘19\d\d, \d\d’ and DB2: ‘Sec(\x) ∗ \d’. Here, \x is any character and \d is any digit. The number</text>
<text top="596" left="108" width="702" height="15" font="4">of ground truth matches are – CA1: 28, LT1: 92, DB1: 68, CA2: 55, LT2: 32 and DB2: 33. The</text>
<text top="616" left="108" width="435" height="15" font="4">parameter setting here is: k = 25, m = 40, N umAns = 100.</text>
<text top="653" left="133" width="677" height="15" font="4">We classify the kinds of queries to keywords and regular expressions. The intuition is that</text>
<text top="674" left="108" width="702" height="15" font="4">keyword queries are likely to achieve higher recall on k-MAP compared to more complex queries</text>
<text top="694" left="108" width="702" height="15" font="4">that contain spaces, special characters, and wildcards. Table 4 presents the recall and runtime</text>
<text top="714" left="108" width="702" height="15" font="4">results for six queries – one keyword and one regular expression (regex) query per dataset. Table 4</text>
<text top="735" left="108" width="702" height="15" font="4">conﬁrms that indeed there are intermediate points in our approximation that have faster runtimes</text>
<text top="755" left="108" width="694" height="15" font="4">than FullSFA (even up to two orders of magnitude), while providing higher quality than k-MAP.</text>
<text top="775" left="133" width="677" height="15" font="4">We would like the tradeoﬀ of quality for performance to be smooth as we vary m and k. To</text>
<text top="796" left="108" width="702" height="15" font="4">validate that our approximation can support this, we present two queries, a keyword and a regex,</text>
<text top="816" left="108" width="702" height="15" font="4">on the Congress Acts dataset (described below). To demonstrate this point, we vary k (the number</text>
<text top="836" left="108" width="702" height="15" font="4">of paths) for several values of m (the number of chunks) and plot the results in Figure 6. Given an</text>
<text top="857" left="108" width="702" height="15" font="4">SFA, m takes values from 1 to the number of the edges in the SFA (the latter being the nominal</text>
<text top="877" left="108" width="702" height="17" font="4">parameter setting ‘Max’). When m = 1, Staccato is equivalent to k-MAP. Note that the state-</text>
<text top="897" left="108" width="702" height="17" font="4">of-the-art in our comparison is essentially the MAP approach (k-MAP with k = 1, or Staccato</text>
<text top="918" left="108" width="463" height="15" font="4">with m = 1, k = 1), which is what is employed by Google Books.</text>
<text top="961" left="108" width="143" height="15" font="4">Keyword Queries</text>
<text top="961" left="268" width="542" height="15" font="4">In Figures 6 (A1) and (A2), we see the recall and performance behavior of</text>
<text top="981" left="108" width="702" height="17" font="4">running a keyword query (here ‘President’) in Staccato for various combinations of k and m.</text>
<text top="1001" left="108" width="702" height="15" font="4">We observe that the recall of k-MAP is high (0.8) but not perfect and in (A2) k-MAP is eﬃcient</text>
<text top="1022" left="108" width="702" height="15" font="4">(0.1s) to answer the query. Further, as we increase k there is essentially no change in recall (the</text>
<text top="1069" left="451" width="16" height="15" font="4">15</text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="28" size="5" family="Times" color="#000000"/>
<text top="369" left="299" width="2" height="8" font="26"> </text>
<text top="369" left="458" width="2" height="8" font="26"> </text>
<text top="229" left="308" width="43" height="12" font="22">1 10 25</text>
<text top="229" left="373" width="12" height="12" font="22">50</text>
<text top="229" left="407" width="12" height="12" font="22">75</text>
<text top="229" left="438" width="18" height="12" font="22">100</text>
<text top="219" left="301" width="6" height="12" font="22">0</text>
<text top="198" left="292" width="15" height="12" font="22">0.2</text>
<text top="176" left="292" width="15" height="12" font="22">0.4</text>
<text top="155" left="292" width="15" height="12" font="22">0.6</text>
<text top="133" left="292" width="15" height="12" font="22">0.8</text>
<text top="111" left="301" width="6" height="12" font="22">1</text>
<text top="170" left="291" width="0" height="12" font="22">R</text>
<text top="162" left="291" width="0" height="12" font="22">ec</text>
<text top="150" left="291" width="0" height="12" font="22">al</text>
<text top="142" left="291" width="0" height="12" font="22">l</text>
<text top="371" left="308" width="43" height="12" font="22">1 10 25</text>
<text top="371" left="373" width="12" height="12" font="22">50</text>
<text top="371" left="407" width="12" height="12" font="22">75</text>
<text top="371" left="438" width="18" height="12" font="22">100</text>
<text top="362" left="301" width="6" height="12" font="22">0</text>
<text top="340" left="292" width="15" height="12" font="22">0.2</text>
<text top="319" left="292" width="15" height="12" font="22">0.4</text>
<text top="297" left="292" width="15" height="12" font="22">0.6</text>
<text top="276" left="292" width="15" height="12" font="22">0.8</text>
<text top="254" left="301" width="6" height="12" font="22">1</text>
<text top="313" left="291" width="0" height="12" font="22">R</text>
<text top="305" left="291" width="0" height="12" font="22">ec</text>
<text top="293" left="291" width="0" height="12" font="22">al</text>
<text top="284" left="291" width="0" height="12" font="22">l</text>
<text top="371" left="496" width="41" height="12" font="22">1 10 25</text>
<text top="371" left="556" width="12" height="12" font="22">50</text>
<text top="371" left="588" width="12" height="12" font="22">75</text>
<text top="371" left="617" width="18" height="12" font="22">100</text>
<text top="362" left="474" width="21" height="12" font="22">0.01</text>
<text top="340" left="480" width="15" height="12" font="22">0.1</text>
<text top="319" left="489" width="6" height="12" font="22">1</text>
<text top="297" left="483" width="12" height="12" font="22">10</text>
<text top="275" left="477" width="18" height="12" font="22">100</text>
<text top="254" left="471" width="24" height="12" font="22">1000</text>
<text top="335" left="471" width="0" height="12" font="22">R</text>
<text top="327" left="471" width="0" height="12" font="22">u</text>
<text top="321" left="471" width="0" height="12" font="22">n</text>
<text top="314" left="471" width="0" height="12" font="22">ti</text>
<text top="307" left="471" width="0" height="12" font="22">m</text>
<text top="298" left="471" width="0" height="12" font="22">e </text>
<text top="289" left="471" width="0" height="12" font="22">(i</text>
<text top="282" left="471" width="0" height="12" font="22">n</text>
<text top="275" left="471" width="0" height="12" font="22"> s</text>
<text top="266" left="471" width="0" height="12" font="22">)</text>
<text top="229" left="496" width="41" height="12" font="22">1 10 25</text>
<text top="229" left="556" width="12" height="12" font="22">50</text>
<text top="229" left="588" width="12" height="12" font="22">75</text>
<text top="229" left="617" width="18" height="12" font="22">100</text>
<text top="219" left="474" width="21" height="12" font="22">0.01</text>
<text top="198" left="480" width="15" height="12" font="22">0.1</text>
<text top="176" left="489" width="6" height="12" font="22">1</text>
<text top="154" left="483" width="12" height="12" font="22">10</text>
<text top="133" left="477" width="18" height="12" font="22">100</text>
<text top="111" left="471" width="24" height="12" font="22">1000</text>
<text top="192" left="471" width="0" height="12" font="22">R</text>
<text top="185" left="471" width="0" height="12" font="22">u</text>
<text top="178" left="471" width="0" height="12" font="22">n</text>
<text top="171" left="471" width="0" height="12" font="22">ti</text>
<text top="165" left="471" width="0" height="12" font="22">m</text>
<text top="155" left="471" width="0" height="12" font="22">e </text>
<text top="146" left="471" width="0" height="12" font="22">(i</text>
<text top="139" left="471" width="0" height="12" font="22">n</text>
<text top="133" left="471" width="0" height="12" font="22"> s</text>
<text top="124" left="471" width="0" height="12" font="22">)</text>
<text top="214" left="432" width="13" height="12" font="27">A1</text>
<text top="356" left="611" width="13" height="12" font="27">B2</text>
<text top="214" left="611" width="13" height="12" font="27">A2</text>
<text top="356" left="432" width="13" height="12" font="27">B1</text>
<text top="238" left="326" width="108" height="12" font="22">k: # Paths Parameter</text>
<text top="382" left="325" width="108" height="12" font="22">k: # Paths Parameter</text>
<text top="238" left="507" width="108" height="12" font="22">k: # Paths Parameter</text>
<text top="382" left="507" width="108" height="12" font="22">k: # Paths Parameter</text>
<text top="153" left="325" width="26" height="8" font="28">Column B</text>
<text top="163" left="325" width="26" height="8" font="28">Column F</text>
<text top="172" left="325" width="26" height="8" font="28">Column F</text>
<text top="182" left="325" width="26" height="8" font="28">Column F</text>
<text top="192" left="325" width="26" height="8" font="28">Column B</text>
<text top="202" left="325" width="26" height="8" font="28">Column B</text>
<text top="212" left="325" width="25" height="8" font="28">Column J</text>
<text top="152" left="329" width="33" height="10" font="24">FullSFA</text>
<text top="171" left="329" width="6" height="10" font="24">S</text>
<text top="173" left="335" width="35" height="8" font="16">TACCATO</text>
<text top="171" left="370" width="28" height="10" font="24"> m 100</text>
<text top="181" left="329" width="6" height="10" font="24">S</text>
<text top="182" left="335" width="35" height="8" font="16">TACCATO</text>
<text top="181" left="370" width="23" height="10" font="24"> m 40</text>
<text top="191" left="329" width="6" height="10" font="24">S</text>
<text top="192" left="335" width="35" height="8" font="16">TACCATO</text>
<text top="191" left="370" width="23" height="10" font="24"> m 10</text>
<text top="201" left="329" width="28" height="10" font="24">k-MAP</text>
<text top="211" left="329" width="20" height="10" font="24">MAP</text>
<text top="161" left="329" width="6" height="10" font="24">S</text>
<text top="163" left="335" width="35" height="8" font="16">TACCATO</text>
<text top="161" left="370" width="30" height="10" font="24"> m Max</text>
<text top="418" left="108" width="702" height="15" font="4">Figure 6: Recall and Runtime variations with k, for diﬀerent values of m, on two queries: (A)</text>
<text top="438" left="108" width="702" height="15" font="4">‘P resident’ (keyword), and (B) ‘U.S.C. 2\d\d\d’ (regex). The \d is short for (0|1|...|9). The</text>
<text top="459" left="108" width="702" height="15" font="4">runtimes are in logscale. N umAns is set to 100. Recall that m is the number of chunks parameter</text>
<text top="479" left="108" width="371" height="15" font="4">and N umAns is the number of answers queried for.</text>
<text top="529" left="108" width="701" height="15" font="4">running time does increase by an order of magnitude). We veriﬁed that the reason is that the top-k</text>
<text top="549" left="108" width="702" height="15" font="4">paths change in only a small set of locations – and so no new occurrences of the string ‘President’</text>
<text top="569" left="108" width="702" height="15" font="4">are found. In contrast, the FullSFA approach achieves perfect recall, but it takes over 3 orders of</text>
<text top="590" left="108" width="702" height="17" font="4">magnitude longer to process the query. As we can see from the plots, for the Staccato approach,</text>
<text top="610" left="108" width="702" height="15" font="4">the recall improves as we increase m – with corresponding slowdowns in query time. We believe</text>
<text top="630" left="108" width="702" height="15" font="4">that our approach is promising because of the gradual tradeoﬀ of running time for quality. The fact</text>
<text top="651" left="108" width="702" height="15" font="4">that the k-MAP recall does not increase substantially with k, and does not manage to achieve the</text>
<text top="671" left="108" width="702" height="15" font="4">recall of FullSFA even for large k underscores the need for ﬁner-grained partition, which is what</text>
<text top="694" left="108" width="118" height="14" font="4">Staccato does.</text>
<text top="734" left="108" width="166" height="15" font="4">Regular Expressions</text>
<text top="734" left="291" width="519" height="15" font="4">Figures 6 (B1) and (B2) present the results for a more sophisticated regex</text>
<text top="755" left="108" width="702" height="15" font="4">query that looks for a congressional code (‘U.S.C. 2\d\d\d’) referenced in the text. As the ﬁgure</text>
<text top="775" left="108" width="702" height="15" font="4">shows, this more sophisticated query has much lower recall for the MAP approach, and increases</text>
<text top="795" left="108" width="702" height="15" font="4">slowly with increasing k. Again, we see the same tradeoﬀ that the FullSFA approach is orders</text>
<text top="816" left="108" width="702" height="17" font="4">of magnitude slower than k-MAP, but achieves perfect recall. Here, we see that the Staccato</text>
<text top="836" left="108" width="702" height="15" font="4">approach does well: there are substantial (but smooth) jumps in quality as we increase k and m,</text>
<text top="856" left="108" width="702" height="15" font="4">going all the way from MAP to FullSFA. This suggests that more sophisticated queries beneﬁt from</text>
<text top="877" left="108" width="702" height="15" font="4">our scheme more, which is an encouraging ﬁrst step to enable applications to do rich analytics over</text>
<text top="897" left="108" width="73" height="15" font="4">such data.</text>
<text top="940" left="108" width="137" height="15" font="4">Query Eﬃciency</text>
<text top="940" left="261" width="549" height="15" font="4">To assess the impact of query length on recall and runtime, we plot the two</text>
<text top="961" left="108" width="702" height="15" font="4">for a set of keyword queries of increasing length in Figure 7. We observe that the runtimes increase</text>
<text top="981" left="108" width="702" height="15" font="4">polynomially but slowly for all the approaches, while no clear trends exist for the recall. We saw</text>
<text top="1001" left="108" width="665" height="15" font="4">similar results with regular expression queries, and discuss the details in the full version [36].</text>
<text top="1022" left="133" width="677" height="15" font="4">We also studied the impact of m and k on precision (and F-1 score), and observed that the</text>
<text top="1069" left="451" width="16" height="15" font="4">16</text>
</page>
<page number="17" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="29" size="9" family="Times" color="#3b3b3b"/>
	<fontspec id="30" size="7" family="Times" color="#000000"/>
	<fontspec id="31" size="6" family="Times" color="#3b3b3b"/>
	<fontspec id="32" size="7" family="Times" color="#000000"/>
<text top="189" left="299" width="3" height="13" font="29"> </text>
<text top="189" left="458" width="3" height="13" font="29"> </text>
<text top="177" left="323" width="6" height="11" font="15">4</text>
<text top="177" left="354" width="6" height="11" font="15">7</text>
<text top="177" left="382" width="11" height="11" font="15">10</text>
<text top="177" left="413" width="11" height="11" font="15">13</text>
<text top="177" left="444" width="11" height="11" font="15">16</text>
<text top="166" left="306" width="13" height="11" font="15">0.1</text>
<text top="152" left="314" width="6" height="11" font="15">1</text>
<text top="137" left="309" width="11" height="11" font="15">10</text>
<text top="123" left="303" width="17" height="11" font="15">100</text>
<text top="108" left="298" width="22" height="11" font="15">1000</text>
<text top="177" left="499" width="6" height="11" font="15">4</text>
<text top="177" left="531" width="6" height="11" font="15">7</text>
<text top="177" left="560" width="11" height="11" font="15">10</text>
<text top="177" left="592" width="11" height="11" font="15">13</text>
<text top="177" left="624" width="11" height="11" font="15">16</text>
<text top="166" left="491" width="6" height="11" font="15">0</text>
<text top="152" left="477" width="19" height="11" font="15">0.25</text>
<text top="137" left="483" width="14" height="11" font="15">0.5</text>
<text top="123" left="477" width="19" height="11" font="15">0.75</text>
<text top="108" left="491" width="6" height="11" font="15">1</text>
<text top="171" left="293" width="0" height="11" font="15">R</text>
<text top="164" left="293" width="0" height="11" font="15">u</text>
<text top="158" left="293" width="0" height="11" font="15">n</text>
<text top="152" left="293" width="0" height="11" font="15">ti</text>
<text top="146" left="293" width="0" height="11" font="15">m</text>
<text top="138" left="293" width="0" height="11" font="15">e</text>
<text top="132" left="293" width="0" height="11" font="15"> (</text>
<text top="126" left="293" width="0" height="11" font="15">in</text>
<text top="117" left="293" width="0" height="11" font="15"> s</text>
<text top="109" left="293" width="0" height="11" font="15">)</text>
<text top="149" left="472" width="0" height="11" font="15">R</text>
<text top="142" left="472" width="0" height="11" font="15">e</text>
<text top="136" left="472" width="0" height="11" font="15">c</text>
<text top="131" left="472" width="0" height="11" font="15">a</text>
<text top="125" left="472" width="0" height="11" font="15">ll</text>
<text top="186" left="344" width="61" height="11" font="15">Query length</text>
<text top="186" left="523" width="61" height="11" font="15">Query length</text>
<text top="113" left="327" width="7" height="11" font="30">A</text>
<text top="162" left="622" width="7" height="11" font="30">B</text>
<text top="138" left="515" width="4" height="9" font="31">1</text>
<text top="148" left="515" width="4" height="9" font="31">2</text>
<text top="159" left="515" width="4" height="9" font="31">3</text>
<text top="136" left="516" width="37" height="11" font="15">FullSFA</text>
<text top="146" left="516" width="7" height="11" font="15">S</text>
<text top="149" left="523" width="35" height="8" font="16">TACCATO</text>
<text top="146" left="557" width="47" height="11" font="15"> m 40 k 25</text>
<text top="157" left="516" width="56" height="11" font="15">k-MAP k 25 </text>
<text top="221" left="108" width="702" height="15" font="4">Figure 7: Impact of Query Length on (A) Runtime and (B) Recall. N umAns, the number of</text>
<text top="241" left="108" width="239" height="15" font="4">answers queried for, is set to 100.</text>
<text top="291" left="108" width="702" height="17" font="4">precision of Staccato usually falls in between k-MAP and FullSFA (but F-1 of Staccato can be</text>
<text top="311" left="108" width="702" height="17" font="4">better than both in some cases). Similar to the recall-runtime tradeoﬀ, Staccato also manages</text>
<text top="331" left="108" width="702" height="15" font="4">to gracefully tradeoﬀ on precision and recall. Due to space constraints, these results are discussed</text>
<text top="352" left="108" width="161" height="15" font="4">in the full version [36].</text>
<text top="395" left="108" width="26" height="16" font="1">5.2</text>
<text top="395" left="154" width="248" height="16" font="1">Staccato Construction Time</text>
<text top="518" left="299" width="2" height="8" font="26"> </text>
<text top="518" left="458" width="2" height="8" font="26"> </text>
<text top="507" left="308" width="6" height="11" font="15">1</text>
<text top="507" left="330" width="127" height="11" font="15">100 200 300 400 500</text>
<text top="498" left="302" width="6" height="11" font="15">0</text>
<text top="482" left="296" width="11" height="11" font="15">20</text>
<text top="466" left="296" width="11" height="11" font="15">40</text>
<text top="450" left="296" width="11" height="11" font="15">60</text>
<text top="434" left="296" width="11" height="11" font="15">80</text>
<text top="500" left="291" width="0" height="11" font="15">T</text>
<text top="493" left="291" width="0" height="11" font="15">im</text>
<text top="481" left="291" width="0" height="11" font="15">e</text>
<text top="476" left="291" width="0" height="11" font="15"> (</text>
<text top="470" left="291" width="0" height="11" font="15">in</text>
<text top="460" left="291" width="0" height="11" font="15"> s</text>
<text top="452" left="291" width="0" height="11" font="15">)</text>
<text top="508" left="484" width="6" height="11" font="15">1</text>
<text top="508" left="506" width="127" height="11" font="15">100 200 300 400 500</text>
<text top="499" left="477" width="6" height="11" font="15">0</text>
<text top="482" left="472" width="11" height="11" font="15">20</text>
<text top="466" left="472" width="11" height="11" font="15">40</text>
<text top="450" left="472" width="11" height="11" font="15">60</text>
<text top="434" left="472" width="11" height="11" font="15">80</text>
<text top="498" left="468" width="0" height="11" font="15">T</text>
<text top="492" left="468" width="0" height="11" font="15">im</text>
<text top="480" left="468" width="0" height="11" font="15">e</text>
<text top="474" left="468" width="0" height="11" font="15"> (</text>
<text top="468" left="468" width="0" height="11" font="15">in</text>
<text top="459" left="468" width="0" height="11" font="15"> s</text>
<text top="450" left="468" width="0" height="11" font="15">)</text>
<text top="517" left="339" width="66" height="11" font="15">n: Size of SFA</text>
<text top="517" left="503" width="111" height="11" font="15">m: # Chunks Parameter</text>
<text top="439" left="312" width="7" height="11" font="30">A</text>
<text top="439" left="616" width="7" height="11" font="30">B</text>
<text top="442" left="357" width="45" height="11" font="15">m 1 k 100</text>
<text top="458" left="327" width="50" height="11" font="15">m 40 k 100</text>
<text top="443" left="549" width="53" height="11" font="15">n 500 k 100</text>
<text top="475" left="505" width="53" height="11" font="15">n 150 k 100</text>
<text top="550" left="108" width="702" height="17" font="4">Figure 8: (A) Variation of Staccato approximation runtimes with the size of the SFA (n =</text>
<text top="570" left="108" width="702" height="15" font="4">number of nodes + edges) ﬁxing m and k. (B) Sensitivity of the runtimes to m, ﬁxing n and k.</text>
<text top="591" left="108" width="651" height="15" font="4">Recall that m is the number of chunks parameter and k is the number of paths parameter.</text>
<text top="632" left="133" width="677" height="17" font="4">We now investigate the runtime of the Staccato’s approximation algorithm. The runtime</text>
<text top="652" left="108" width="702" height="15" font="4">depends on the size of the input SFA data as well as m and k. We ﬁrst ﬁx m and k, then we plot</text>
<text top="673" left="108" width="702" height="15" font="4">the construction time for SFAs of varying size (number of nodes) from the CA dataset (Figure 8(A)).</text>
<text top="693" left="108" width="702" height="15" font="4">Overall, we can see that the algorithm runs eﬃciently – even in our unoptimized implementation.</text>
<text top="713" left="108" width="702" height="15" font="4">As this is an oﬄine process, speed may not be critical for some applications. Also, this computation</text>
<text top="734" left="108" width="702" height="17" font="4">is embarassingly parallel (across SFAs). We used Condor [2] to run the Staccato construction</text>
<text top="754" left="108" width="702" height="15" font="4">on all the SFAs in the three datasets, for all of the above parameters. This process completed in</text>
<text top="774" left="108" width="173" height="15" font="4">approximately 11 hours.</text>
<text top="795" left="133" width="677" height="15" font="4">To study the sensitivity of the construction time to m, we select a ﬁxed SFA from the CA dataset</text>
<text top="815" left="108" width="702" height="15" font="4">(Figure 8(B)). When m ≥ |E|, the algorithm picks each transition as a block, and terminates. But</text>
<text top="835" left="108" width="702" height="15" font="4">when m = 300 &lt; |E|, the algorithm computes several candidate merges, leading to a sudden spike</text>
<text top="856" left="108" width="702" height="15" font="4">in the runtime. There onwards, the runtime varies almost linearly with decreasing m. However,</text>
<text top="876" left="108" width="702" height="15" font="4">there are some spikes in the middle. We veriﬁed that the spikes arise since the ‘FindMinSFA’</text>
<text top="896" left="108" width="702" height="15" font="4">operation has to ﬁx merged chunks not satisfying the SFA property, thus causing the variation to</text>
<text top="917" left="108" width="702" height="15" font="4">be less smooth. We also veriﬁed that the runtime was linear in k, ﬁxing the SFA and m (see full</text>
<text top="937" left="108" width="702" height="15" font="4">version [36]). In general, a linear runtime in k is not guaranteed since the chunk structure obtained</text>
<text top="957" left="108" width="490" height="15" font="4">during merging may not be similar across k, for a given SFA and m.</text>
<text top="1069" left="451" width="16" height="15" font="4">17</text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="33" size="5" family="Times" color="#3b3b3b"/>
<text top="112" left="108" width="26" height="16" font="1">5.3</text>
<text top="112" left="154" width="157" height="16" font="1">Inverted Indexing</text>
<text top="144" left="108" width="702" height="15" font="4">We now verify that standard inverted indexing can be made to work on SFAs. We implement</text>
<text top="164" left="108" width="452" height="15" font="4">the index as a relational table with a B+-tree on top of it.</text>
<text top="164" left="575" width="235" height="15" font="4">More eﬃcient inverted indexing</text>
<text top="185" left="108" width="702" height="15" font="4">implementations are possible, and so our results are an upperbound on indexing performance.</text>
<text top="205" left="108" width="702" height="15" font="4">However, this prototype serves to illustrate our main technical point that indexing is possible for</text>
<text top="225" left="108" width="73" height="15" font="4">such data.</text>
<text top="246" left="133" width="677" height="15" font="4">A dictionary of about 60,000 terms from a freely available dictionary [4] was converted to a</text>
<text top="266" left="108" width="702" height="15" font="4">preﬁx-trie automaton, and used for index construction. While parsing the query, we ascertain if</text>
<text top="286" left="108" width="702" height="15" font="4">the given regex contains a left-anchor term. If so, we look up the anchor in the index to obtain the</text>
<text top="307" left="108" width="490" height="15" font="4">postings, and retrieve the data to employ query processing on them.</text>
<text top="468" left="299" width="2" height="8" font="26"> </text>
<text top="468" left="458" width="2" height="8" font="26"> </text>
<text top="460" left="434" width="6" height="11" font="15">0</text>
<text top="460" left="459" width="11" height="11" font="15">10</text>
<text top="460" left="487" width="11" height="11" font="15">20</text>
<text top="460" left="515" width="11" height="11" font="15">30</text>
<text top="460" left="542" width="11" height="11" font="15">40</text>
<text top="460" left="570" width="11" height="11" font="15">50</text>
<text top="460" left="597" width="11" height="11" font="15">60</text>
<text top="460" left="625" width="11" height="11" font="15">70</text>
<text top="451" left="428" width="6" height="11" font="15">0</text>
<text top="435" left="423" width="11" height="11" font="15">10</text>
<text top="420" left="423" width="11" height="11" font="15">20</text>
<text top="404" left="423" width="11" height="11" font="15">30</text>
<text top="388" left="423" width="11" height="11" font="15">40</text>
<text top="373" left="423" width="11" height="11" font="15">50</text>
<text top="357" left="423" width="11" height="11" font="15">60</text>
<text top="341" left="423" width="11" height="11" font="15">70</text>
<text top="443" left="533" width="6" height="11" font="15">6</text>
<text top="443" left="563" width="14" height="11" font="15">6.3</text>
<text top="443" left="597" width="14" height="11" font="15">6.6</text>
<text top="433" left="518" width="14" height="11" font="15">3.5</text>
<text top="415" left="526" width="6" height="11" font="15">5</text>
<text top="397" left="518" width="14" height="11" font="15">6.5</text>
<text top="379" left="526" width="6" height="11" font="15">8</text>
<text top="452" left="286" width="20" height="11" font="15">0.01</text>
<text top="415" left="292" width="14" height="11" font="15">0.1</text>
<text top="378" left="301" width="6" height="11" font="15">1</text>
<text top="341" left="295" width="11" height="11" font="15">10</text>
<text top="350" left="463" width="16" height="9" font="33">Max</text>
<text top="360" left="463" width="13" height="9" font="33">100</text>
<text top="370" left="463" width="9" height="9" font="33">40</text>
<text top="380" left="463" width="9" height="9" font="33">10</text>
<text top="391" left="463" width="4" height="9" font="33">1</text>
<text top="345" left="311" width="7" height="11" font="30">A</text>
<text top="346" left="438" width="7" height="11" font="30">B</text>
<text top="348" left="462" width="31" height="11" font="15">m Max</text>
<text top="358" left="462" width="28" height="11" font="15">m 100</text>
<text top="368" left="462" width="23" height="11" font="15">m 40</text>
<text top="379" left="462" width="23" height="11" font="15">m 10</text>
<text top="389" left="462" width="17" height="11" font="15">m 1</text>
<text top="348" left="342" width="31" height="11" font="15">m Max</text>
<text top="391" left="356" width="28" height="11" font="15">m 100</text>
<text top="371" left="373" width="23" height="11" font="15">m 40</text>
<text top="436" left="337" width="17" height="11" font="15">m 1</text>
<text top="431" left="372" width="23" height="11" font="15">m 10</text>
<text top="469" left="473" width="103" height="11" font="15">Query Selectivity in %</text>
<text top="469" left="304" width="98" height="11" font="15">k: # Paths Parameter</text>
<text top="423" left="289" width="0" height="11" font="15">R</text>
<text top="416" left="289" width="0" height="11" font="15">u</text>
<text top="410" left="289" width="0" height="11" font="15">n</text>
<text top="404" left="289" width="0" height="11" font="15">ti</text>
<text top="398" left="289" width="0" height="11" font="15">m</text>
<text top="389" left="289" width="0" height="11" font="15">e</text>
<text top="384" left="289" width="0" height="11" font="15"> (</text>
<text top="377" left="289" width="0" height="11" font="15">in</text>
<text top="369" left="289" width="0" height="11" font="15"> s</text>
<text top="360" left="289" width="0" height="11" font="15">)</text>
<text top="434" left="419" width="0" height="11" font="15">%</text>
<text top="426" left="419" width="0" height="11" font="15"> o</text>
<text top="417" left="419" width="0" height="11" font="15">f </text>
<text top="411" left="419" width="0" height="11" font="15">S</text>
<text top="404" left="419" width="0" height="11" font="15">ca</text>
<text top="393" left="419" width="0" height="11" font="15">n</text>
<text top="387" left="419" width="0" height="11" font="15"> R</text>
<text top="377" left="419" width="0" height="11" font="15">u</text>
<text top="371" left="419" width="0" height="11" font="15">n</text>
<text top="365" left="419" width="0" height="11" font="15">ti</text>
<text top="359" left="419" width="0" height="11" font="15">m</text>
<text top="350" left="419" width="0" height="11" font="15">e</text>
<text top="460" left="307" width="6" height="11" font="15">1</text>
<text top="460" left="327" width="11" height="11" font="15">25</text>
<text top="460" left="349" width="11" height="11" font="15">50</text>
<text top="460" left="372" width="38" height="11" font="15">75 100</text>
<text top="505" left="108" width="69" height="15" font="4">Figure 9:</text>
<text top="505" left="194" width="616" height="15" font="4">(A) Total Runtimes, and (B) Fractional Runtimes Vs Selectivity for the query</text>
<text top="525" left="108" width="702" height="15" font="4">‘P ublic Law (8|9)\d’, using the inverted index with the left anchor term ‘public’. Runtimes are in</text>
<text top="546" left="108" width="425" height="15" font="4">logscale. Recall that m is the number of chunks parameter.</text>
<text top="583" left="133" width="677" height="15" font="4">Figure 9 shows the results for a ﬁxed length left anchored regex on the CA data set that</text>
<text top="604" left="108" width="426" height="15" font="4">is anchored by a word in the dictionary (here, ‘Public’).</text>
<text top="604" left="549" width="261" height="15" font="4">We omit some combinations (m =</text>
<text top="624" left="108" width="702" height="15" font="4">100, Max and k = 50, 75, 100) since their indexes had nearly 100% selectivity for all queries that</text>
<text top="644" left="108" width="702" height="15" font="4">we consider, rendering them useless. The ﬁrst plot shows the sensitivity of the total runtimes to m</text>
<text top="665" left="108" width="702" height="15" font="4">and k. Mostly, there is a linear trend with k, except for a spike at m = 40, k = 50. To understand</text>
<text top="685" left="108" width="702" height="15" font="4">this behavior, we plot the runtime, as a percentage of the ﬁlescan runtime, against the selectivity of</text>
<text top="705" left="108" width="702" height="15" font="4">the term in the index. Ideally, the points should lie on the Y = X line, or slightly above it. For the</text>
<text top="726" left="108" width="702" height="15" font="4">lowest values of m and k, the relative speedup is slightly lowered by the index lookup overhead. But</text>
<text top="746" left="108" width="702" height="15" font="4">as k increases, the query processing dominates, and hence the speedup improves, though selectivity</text>
<text top="766" left="108" width="702" height="15" font="4">changes only slightly. For higher m, the projection overhead lowers the speedup, and as k goes up,</text>
<text top="787" left="108" width="702" height="15" font="4">the selectivity shoots up, increasing the runtime. Overall, we see that dictionary-based indexing</text>
<text top="807" left="108" width="322" height="15" font="4">provides substantial speedups in many cases.</text>
<text top="850" left="108" width="26" height="16" font="1">5.4</text>
<text top="850" left="154" width="91" height="16" font="1">Scalability</text>
<text top="882" left="108" width="702" height="15" font="4">To understand the feasibility of our approaches on larger amounts of data, we now study how the</text>
<text top="902" left="108" width="702" height="15" font="4">runtimes scale with increasing dataset sizes. We use a set of 8 scanned books from Google Books [7]</text>
<text top="922" left="108" width="602" height="15" font="4">and use OCRopus to obtain the SFAs. The total size of the SFA dataset is 100 GB.</text>
<text top="943" left="133" width="677" height="15" font="4">Figure 10 shows the scalability results for a regex query. The ﬁlescans for FullSFA, MAP and</text>
<text top="966" left="108" width="702" height="14" font="4">Staccato all scale linearly in the dataset size. Overall, the ﬁlescan runtimes are in the order</text>
<text top="983" left="108" width="702" height="17" font="4">a few hours for FullSFA. The runtimes are one to two orders of magnitude lower for Staccato,</text>
<text top="1003" left="108" width="702" height="15" font="4">depending on the parameters, and about three orders of magnitude lower for MAP. We also veriﬁed</text>
<text top="1024" left="108" width="702" height="15" font="4">that indexing over this data provides further speedup (subject to query selectivity) as shown before.</text>
<text top="1069" left="451" width="16" height="15" font="4">18</text>
</page>
<page number="19" position="absolute" top="0" left="0" height="1188" width="918">
<text top="234" left="303" width="2" height="10" font="23"> </text>
<text top="234" left="458" width="2" height="10" font="23"> </text>
<text top="118" left="525" width="45" height="11" font="22">Size (GB)</text>
<text top="118" left="586" width="34" height="11" font="22"># SFAs</text>
<text top="139" left="545" width="5" height="11" font="15">1</text>
<text top="139" left="593" width="21" height="11" font="15">3400</text>
<text top="158" left="543" width="11" height="11" font="15">10</text>
<text top="158" left="590" width="27" height="11" font="15">32000</text>
<text top="178" left="543" width="11" height="11" font="15">25</text>
<text top="178" left="590" width="27" height="11" font="15">86000</text>
<text top="198" left="543" width="11" height="11" font="15">50</text>
<text top="198" left="587" width="32" height="11" font="15">172000</text>
<text top="218" left="540" width="16" height="11" font="15">100</text>
<text top="218" left="587" width="32" height="11" font="15">345000</text>
<text top="224" left="337" width="6" height="11" font="22">0</text>
<text top="224" left="376" width="12" height="11" font="22">25</text>
<text top="224" left="417" width="11" height="11" font="22">50</text>
<text top="224" left="459" width="11" height="11" font="22">75</text>
<text top="224" left="498" width="17" height="11" font="22">100</text>
<text top="214" left="321" width="14" height="11" font="22">0.1</text>
<text top="196" left="330" width="6" height="11" font="22">1</text>
<text top="179" left="324" width="11" height="11" font="22">10</text>
<text top="161" left="318" width="17" height="11" font="22">100</text>
<text top="144" left="312" width="23" height="11" font="22">1000</text>
<text top="126" left="306" width="29" height="11" font="22">10000</text>
<text top="108" left="301" width="34" height="11" font="22">100000</text>
<text top="208" left="298" width="0" height="13" font="11">R</text>
<text top="200" left="298" width="0" height="13" font="11">u</text>
<text top="193" left="298" width="0" height="13" font="11">n</text>
<text top="185" left="298" width="0" height="13" font="11">ti</text>
<text top="178" left="298" width="0" height="13" font="11">m</text>
<text top="168" left="298" width="0" height="13" font="11">e </text>
<text top="158" left="298" width="0" height="13" font="11">(i</text>
<text top="151" left="298" width="0" height="13" font="11">n</text>
<text top="144" left="298" width="0" height="13" font="11"> s</text>
<text top="134" left="298" width="0" height="13" font="11">)</text>
<text top="160" left="409" width="7" height="11" font="22">S</text>
<text top="162" left="416" width="36" height="9" font="16">TACCATO</text>
<text top="160" left="451" width="49" height="11" font="22"> m 40 k 50</text>
<text top="191" left="396" width="7" height="11" font="22">S</text>
<text top="193" left="403" width="36" height="9" font="16">TACCATO</text>
<text top="191" left="439" width="49" height="11" font="22"> m 10 k 50</text>
<text top="233" left="365" width="97" height="11" font="22">Dataset Size (in GB)</text>
<text top="232" left="621" width="8" height="13" font="5">B</text>
<text top="114" left="346" width="38" height="11" font="22">FullSFA</text>
<text top="204" left="369" width="23" height="11" font="22">MAP</text>
<text top="197" left="377" width="0" height="13" font="5"> </text>
<text top="208" left="497" width="8" height="13" font="5">A</text>
<text top="222" left="338" width="6" height="13" font="11">1</text>
<text top="270" left="108" width="702" height="17" font="4">Figure 10: (A) Filescan runtimes (logscale) against the dataset size for MAP, FullSFA and Stac-</text>
<text top="293" left="108" width="597" height="14" font="4">cato with two parameter settings. (B) Number of SFAs in the respective datasets.</text>
<text top="341" left="108" width="702" height="15" font="4">One can speedup query answering in all of the approaches by partitioning the dataset across multiple</text>
<text top="361" left="108" width="702" height="15" font="4">machines (or even using multiple disks). Thus, to scale to much larger corpora (say, millions of</text>
<text top="382" left="108" width="702" height="15" font="4">books), we plan to investigate the use of parallel data processing frameworks to attack this problem.</text>
<text top="424" left="108" width="26" height="16" font="1">5.5</text>
<text top="424" left="154" width="267" height="16" font="1">Automated Parameter Tuning</text>
<text top="456" left="108" width="702" height="15" font="4">We now empirically demonstrate the parameter tuning method on a labeled set of 1590 SFAs (from</text>
<text top="477" left="108" width="702" height="15" font="4">the CA dataset), and a set of 5 queries (both keywords and regular expressions). The size constraint</text>
<text top="497" left="108" width="702" height="15" font="4">is chosen as 10% and the recall constraint is chosen as 0.9. We use increments of 5 for both m and</text>
<text top="517" left="108" width="702" height="15" font="4">k. Based on the tuning method described in Section 3.2, we obtain the following size equation:</text>
<text top="538" left="108" width="702" height="15" font="4">20mk + 58k = 45540, and the resultant parameter estimates of m = 45, k = 45, with a recall of</text>
<text top="558" left="108" width="702" height="15" font="4">0.91. We then performed an exhaustive search on the parameter space to obtain the optimal values</text>
<text top="578" left="108" width="702" height="15" font="4">subject to the same constraints. Figure 11 shows the surface plots of the size and the recall obtained</text>
<text top="599" left="108" width="702" height="15" font="4">by varying m and k. The optimal values obtained are: m = 35, k = 80, again with a recall of 0.91.</text>
<text top="619" left="108" width="702" height="15" font="4">The diﬀerence in the parameter values arises primarily because the tuning method overestimated</text>
<text top="639" left="108" width="702" height="15" font="4">the size at this location. Nevertheless, we see that the tuning method provides parameter estimates</text>
<text top="659" left="108" width="232" height="15" font="4">satisfying the user requirements.</text>
<text top="847" left="299" width="3" height="13" font="29"> </text>
<text top="847" left="458" width="3" height="13" font="29"> </text>
<text top="849" left="283" width="8" height="13" font="5">A</text>
<text top="849" left="628" width="8" height="13" font="5">B</text>
<text top="887" left="108" width="702" height="15" font="4">Figure 11: 3-D plots showing the variation of (A) the size of the approximated dataset (in MB),</text>
<text top="907" left="108" width="702" height="15" font="4">and (B) the average recall obtained. Recall that m is the number of chunks parameter and k is the</text>
<text top="927" left="108" width="200" height="15" font="4">number of paths parameter.</text>
<text top="1069" left="451" width="16" height="15" font="4">19</text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1188" width="918">
<text top="110" left="108" width="12" height="19" font="3">6</text>
<text top="110" left="144" width="147" height="19" font="3">Related Work</text>
<text top="150" left="108" width="702" height="15" font="4">Transducers are widely used in the OCR and speech communities [11, 41] and mature open-source</text>
<text top="170" left="108" width="702" height="15" font="4">tools exist to process in-memory transducers [12]. For example we use a popular open-source</text>
<text top="190" left="108" width="702" height="15" font="4">tool, OCRopus [8], from Google Books that provides well-trained language models and outputs</text>
<text top="211" left="108" width="702" height="15" font="4">transducers. See Mohri et al. [41] for a discussion of why transducers are well-suited to represent the</text>
<text top="231" left="108" width="702" height="15" font="4">uncertainty for OCR. In the same work, Mohri et al. also describe speech data. We experimented</text>
<text top="251" left="108" width="702" height="15" font="4">with speech data, but we were hampered by the lack of high quality open-source speech recognizer</text>
<text top="272" left="108" width="702" height="15" font="4">toolkits. Using the available toolkits, we found that the language quality from open source speech</text>
<text top="292" left="108" width="382" height="15" font="4">recognizers is substantially below commercial quality.</text>
<text top="312" left="133" width="677" height="15" font="4">The Lahar system [39, 45] manages Hidden Markov Models (HMMs) as Markovian streams</text>
<text top="333" left="108" width="702" height="15" font="4">inside an RDBMS and allows querying them with SQL-like semantics. In contrast to an HMM [44]</text>
<text top="353" left="108" width="702" height="15" font="4">that requires that all strings be of the same length, transducers are able to encode strings of</text>
<text top="373" left="108" width="702" height="15" font="4">diﬀerent lengths. This is useful in OCR, since identifying spaces between words is diﬃcult, and</text>
<text top="393" left="108" width="702" height="15" font="4">this uncertainty is captured by the branching in the SFA [41]. Our work drew inspiration from</text>
<text top="414" left="108" width="702" height="15" font="4">the empirical study of work of approximation trade-oﬀs from Letchner et al. [39]. Directly relevant</text>
<text top="434" left="108" width="477" height="15" font="4">to this work is the recent theoretical results of Kimelfeld and R´</text>
<text top="434" left="577" width="233" height="15" font="4">e [34], who studied the problem</text>
<text top="454" left="108" width="702" height="15" font="4">of evaluating transducers as queries over uncertain sequence data modeled using Hidden Markov</text>
<text top="475" left="108" width="702" height="17" font="4">Models [44, 45]. Staccato represents both the data and query by transducers which simpliﬁes the</text>
<text top="495" left="108" width="188" height="15" font="4">engineering of our system.</text>
<text top="515" left="133" width="677" height="15" font="4">Transducers are a graphical representation of probability models which makes them related to</text>
<text top="536" left="108" width="702" height="15" font="4">graphical models. Graphical models have been a hot topic in the database research community.</text>
<text top="556" left="108" width="702" height="15" font="4">Kanagal et al. [32] handle general graphical models. Wang et al. [52] also process Conditional</text>
<text top="576" left="108" width="702" height="15" font="4">Random Fields (CRFs) [37]. Though transducers can be viewed as a specialized directed graphical</text>
<text top="597" left="108" width="702" height="15" font="4">model, the primary focus of our work here is on the application of transducers to OCR in the domain</text>
<text top="617" left="108" width="702" height="15" font="4">of content management and the approximations that are critical to achieve good performance.</text>
<text top="637" left="108" width="702" height="15" font="4">However, our work is similar in spirit to these in that we too want to enable SQL-like querying of</text>
<text top="658" left="108" width="307" height="15" font="4">probabilistic OCR data inside an RDBMS.</text>
<text top="678" left="133" width="677" height="15" font="4">Probabilistic graphical models have been successfully applied to various kinds of sequential data</text>
<text top="698" left="108" width="702" height="15" font="4">including OCR [19], RFID [45], speech [40], etc. Various models have been studied in both the</text>
<text top="719" left="108" width="509" height="15" font="4">machine learning and data management communities [23, 31, 32, 45, 52].</text>
<text top="739" left="133" width="677" height="15" font="4">Many approximation schemes for probabilistic models have been studied [30, 39]. We built</text>
<text top="759" left="108" width="702" height="15" font="4">on the technique k-MAP [1], which is particularly relevant to us. Essentially, the idea is to infer</text>
<text top="780" left="108" width="702" height="15" font="4">the top k most likely results from the model and keep only those around. Another popular type</text>
<text top="800" left="108" width="702" height="15" font="4">of approximation is based on mean-ﬁeld theory, where the intuition is that we replace complex</text>
<text top="820" left="108" width="702" height="15" font="4">dependencies (say in a graphical model) with their average (in some sense) [51]. Both mean-ﬁeld</text>
<text top="841" left="108" width="702" height="15" font="4">theory and our approach share a common formal framework: minimizing KL-divergence. For a</text>
<text top="861" left="108" width="702" height="15" font="4">good overview of various probabilistic graphical models, approximation and inference techniques,</text>
<text top="881" left="108" width="524" height="15" font="4">we refer the reader to the excellent book by Wainwright and Jordan [51].</text>
<text top="902" left="133" width="677" height="15" font="4">Gupta and Sarawagi [27] devise eﬃcient approximation schemes to represent the outputs of a</text>
<text top="922" left="108" width="702" height="15" font="4">CRF, viz., labeled segmentations of text, in a probabilistic database. They partition the space of</text>
<text top="942" left="108" width="702" height="15" font="4">segmentations (i.e., the outputs) using boolean constraints on the output segment labels, and then</text>
<text top="963" left="108" width="702" height="15" font="4">structurally merge the partitions to a pre-deﬁned count using Expectation Maximization, without</text>
<text top="983" left="108" width="702" height="15" font="4">any enumeration. Thus, their ﬁnal partitions are disjoint sets of full-row outputs (‘horizontally’</text>
<text top="1003" left="108" width="702" height="17" font="4">partitioned). Both their approach and Staccato use KL-divergence to measure the goodness of</text>
<text top="1024" left="108" width="702" height="17" font="4">approximation. However, Staccato is diﬀerent in that we partition the underlying structure of</text>
<text top="1069" left="451" width="16" height="15" font="4">20</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">the model (‘vertically’ partitioned). They also consider soft-partitioning approaches to overcome</text>
<text top="133" left="108" width="702" height="15" font="4">the limitations of disjoint partitioning. It is interesting future work to adapt such ideas for our</text>
<text top="154" left="108" width="365" height="17" font="4">problem, and compare with Staccato’s approach.</text>
<text top="174" left="133" width="677" height="15" font="4">Probabilistic databases have been studied in several recent projects (e.g., ORION [20],Trio [47],</text>
<text top="194" left="108" width="702" height="15" font="4">MystiQ [24], Sprout [43], and MayBMS [13]). Our work is complementary to these eﬀorts: the</text>
<text top="215" left="108" width="702" height="15" font="4">queries we consider can produce probabilistic data that can be ingested by many of the above</text>
<text top="235" left="108" width="702" height="15" font="4">systems, while the above systems focus on querying restricted models (e.g., U-Relations or BIDs).</text>
<text top="255" left="108" width="702" height="15" font="4">We also use model-based views [25] to expose the results of query-time inference over the OCR</text>
<text top="276" left="108" width="198" height="15" font="4">transducers to applications.</text>
<text top="296" left="133" width="677" height="15" font="4">The OCR, speech and IR communities have explored error correction techniques as well as</text>
<text top="316" left="108" width="702" height="15" font="4">approximate retrieval schemes [18, 28, 42]. However, prior work primarily focus on keyword search</text>
<text top="337" left="108" width="702" height="17" font="4">over plain-text transcriptions. Staccato can beneﬁt from these approaches and is orthogonal</text>
<text top="357" left="108" width="702" height="15" font="4">to our goal of integrating OCR data into an RDBMS. In contrast, we advocate retaining the</text>
<text top="377" left="108" width="231" height="15" font="4">uncertainty in the transcription.</text>
<text top="398" left="133" width="677" height="15" font="4">Many authors have explored indexing techniques for probabilistic data [33, 35, 38, 49]. Letchner</text>
<text top="418" left="108" width="702" height="15" font="4">et al. [38] design new indexes for RFID data stored in an RDBMS as Markovian streams. Kanagal</text>
<text top="438" left="108" width="702" height="15" font="4">et al. [33] consider indexing correlated probabilistic streams using tree partitioning algorithms and</text>
<text top="459" left="108" width="702" height="15" font="4">describe a new technique called shortcut potentials to speedup query answering. Kimura et al. [35]</text>
<text top="479" left="108" width="702" height="15" font="4">propose a new uncertain primary index that clusters heap ﬁles according to uncertain attributes.</text>
<text top="499" left="108" width="702" height="15" font="4">Singh et al. [49] consider indexing categorical data and propose an R-tree based index as well as</text>
<text top="520" left="108" width="702" height="15" font="4">a probabilistic inverted index. Our work focuses on the challenges that content models like OCR</text>
<text top="540" left="108" width="337" height="15" font="4">raise for integrating indexing with an RDBMS.</text>
<text top="588" left="108" width="12" height="19" font="3">7</text>
<text top="588" left="144" width="307" height="19" font="3">Conclusion and Future Work</text>
<text top="628" left="108" width="702" height="17" font="4">We present our prototype system, Staccato, that integrates a probabilistic model for OCR into an</text>
<text top="648" left="108" width="702" height="15" font="4">RDBMS. We demonstrated that it is possible to devise an approximation scheme that trades query</text>
<text top="669" left="108" width="702" height="15" font="4">runtime performance for result quality (in particular, increased recall). The technical contributions</text>
<text top="689" left="108" width="702" height="15" font="4">are a novel approximation scheme and a formal analysis of this scheme. Additionally, we showed</text>
<text top="709" left="108" width="648" height="15" font="4">how to adapt standard text-indexing schemes to OCR data, while retaining more answers.</text>
<text top="730" left="133" width="677" height="17" font="4">Our future work is in two main directions. Firstly, we aim to extend Staccato to handle larger</text>
<text top="750" left="108" width="702" height="15" font="4">data sets and more sophisticated querying (e.g., using aggregation with a probabilistic RDBMS,</text>
<text top="770" left="108" width="702" height="15" font="4">sophisticated indexing, parallel processing etc.). Secondly, we aim to extend our techniques to more</text>
<text top="791" left="108" width="702" height="15" font="4">types of content-management data such as speech transcription data. Interestingly, transducers</text>
<text top="811" left="108" width="702" height="15" font="4">provide a unifying formal framework for both transcription processes. Our initial experiments</text>
<text top="831" left="108" width="702" height="15" font="4">with speech data suggest that similar approximations techniques may be useful. This direction is</text>
<text top="852" left="108" width="702" height="15" font="4">particularly exciting to us: it is a ﬁrst step towards unifying RDBMS and content-management</text>
<text top="872" left="108" width="304" height="15" font="4">systems, two multibillion dollar industries.</text>
<text top="916" left="108" width="190" height="19" font="3">Acknowledgments</text>
<text top="960" left="108" width="702" height="15" font="4">This work is supported by the National Science Foundation under IIS-1054009, the Oﬃce of Naval</text>
<text top="980" left="108" width="702" height="15" font="4">Research under N000141210041 and the Microsoft Jim Gray Systems Lab. Any opinions, ﬁndings,</text>
<text top="1000" left="108" width="702" height="15" font="4">conclusions or recommendations expressed in this work are those of the authors and do not neces-</text>
<text top="1021" left="108" width="702" height="15" font="4">sarily reﬂect the views of the US government or Microsoft. The authors also thank the anonymous</text>
<text top="1069" left="451" width="16" height="15" font="4">21</text>
</page>
<page number="22" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">PVLDB reviewers as well as Jignesh Patel and Benny Kimelfeld for their valuable feedback on an</text>
<text top="133" left="108" width="201" height="15" font="4">earlier version of this paper.</text>
<text top="181" left="108" width="113" height="19" font="3">References</text>
<text top="221" left="116" width="694" height="15" font="4">[1] A Brief Introduction to Graphical Models and Bayesian Networks. http://www.cs.ubc.ca/ mur-</text>
<text top="242" left="142" width="174" height="15" font="4">phyk/Bayes/bayes.html.</text>
<text top="276" left="116" width="587" height="15" font="4">[2] Condor high-throughput computing system. http://www.cs.wisc.edu/condor/.</text>
<text top="309" left="116" width="450" height="15" font="4">[3] Content Management Systems. http://www.cmswire.com/.</text>
<text top="343" left="116" width="450" height="15" font="4">[4] Corncob List. http://www.mieliestronk.com/wordlist.html.</text>
<text top="377" left="116" width="517" height="15" font="4">[5] Digital humanities by UW’s Prof. Witmore. http://winedarksea.org.</text>
<text top="411" left="116" width="371" height="15" font="4">[6] ExperVision Inc. http://www.expervision.com/.</text>
<text top="444" left="116" width="325" height="15" font="4">[7] Google Books. http://books.google.com/.</text>
<text top="478" left="116" width="545" height="15" font="4">[8] OCRopus open source OCR system. http://code.google.com/p/ocropus.</text>
<text top="512" left="116" width="359" height="15" font="4">[9] The Hathi Trust. http://www.hathitrust.org/.</text>
<text top="546" left="108" width="357" height="15" font="4">[10] The JSTOR Archive. http://www.jstor.org/.</text>
<text top="580" left="108" width="702" height="15" font="4">[11] Cyril Allauzen, Mehryar Mohri, and Murat Saraclar. General indexation of weighted automata</text>
<text top="600" left="142" width="668" height="15" font="4">- application to spoken utterance retrieval. In Workshop on Interdisciplinary Approaches to</text>
<text top="620" left="142" width="475" height="15" font="4">Speech Indexing and Retrieval (HLT/NAACL), pages 33–40, 2004.</text>
<text top="654" left="108" width="702" height="15" font="4">[12] Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wojciech Skut, and Mehryar Mohri. Openfst:</text>
<text top="674" left="142" width="661" height="15" font="4">A general and eﬃcient weighted ﬁnite-state transducer library. In CIAA, pages 11–23, 2007.</text>
<text top="708" left="108" width="702" height="15" font="4">[13] Lyublena Antova, Christoph Koch, and Dan Olteanu. Maybms: Managing incomplete infor-</text>
<text top="728" left="142" width="615" height="15" font="4">mation with probabilistic world-set decompositions. In ICDE, pages 1479–1480, 2007.</text>
<text top="762" left="108" width="702" height="15" font="4">[14] Ricardo A. Baeza-Yates and Berthier Ribeiro-Neto. Modern Information Retrieval. Addison-</text>
<text top="782" left="142" width="317" height="15" font="4">Wesley Longman Publishing Co., Inc., 1999.</text>
<text top="816" left="108" width="702" height="15" font="4">[15] Christopher M. Bishop. Pattern Recognition and Machine Learning. Springer-Verlag New</text>
<text top="837" left="142" width="118" height="15" font="4">York, Inc., 2006.</text>
<text top="870" left="108" width="702" height="15" font="4">[16] Vincent D. Blondel and John N. Tsitsiklis. When is a pair of matrices mortal? Inf. Process.</text>
<text top="891" left="142" width="127" height="15" font="4">Lett., 63(5), 1997.</text>
<text top="924" left="108" width="702" height="15" font="4">[17] Olivier Bournez and Michael S. Branicky. The mortality problem for matrices of low dimen-</text>
<text top="945" left="142" width="309" height="15" font="4">sions. Theory of Computing Systems, 2002.</text>
<text top="979" left="108" width="702" height="15" font="4">[18] James Callan, W. Bruce Croft, and Stephen M. Harding. The inquery retrieval system. In</text>
<text top="999" left="142" width="191" height="15" font="4">DEXA, pages 78–83, 1992.</text>
<text top="1069" left="451" width="16" height="15" font="4">22</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">[19] M. Y. Chen, A. Kundu, and J. Zhou. Oﬀ-line handwritten word recognition using a hidden</text>
<text top="133" left="142" width="657" height="15" font="4">markov model type stochastic network. Pattern Anal. Mach. Intell., 16:481–496, May 1994.</text>
<text top="167" left="108" width="702" height="15" font="4">[20] Reynold Cheng, Dmitri V. Kalashnikov, and Sunil Prabhakar. Evaluating probabilistic queries</text>
<text top="188" left="142" width="398" height="15" font="4">over imprecise data. In SIGMOD, pages 551–562, 2003.</text>
<text top="221" left="108" width="702" height="15" font="4">[21] Junghoo Cho and Sridhar Rajagopalan. A fast regular expression indexing engine. In ICDE,</text>
<text top="242" left="142" width="149" height="15" font="4">pages 419–430, 2001.</text>
<text top="275" left="108" width="702" height="15" font="4">[22] Richard Cole, Lee-Ad Gottlieb, and Moshe Lewenstein. Dictionary matching and indexing</text>
<text top="296" left="142" width="422" height="15" font="4">with errors and don’t cares. In STOC, pages 91–100, 2004.</text>
<text top="329" left="108" width="702" height="15" font="4">[23] Robert G. Cowell, A. Philip Dawid, Steﬀen L. Lauritzen, and David J. Spiegelhalter. Proba-</text>
<text top="350" left="142" width="668" height="15" font="4">bilistic Networks and Expert Systems: Exact Computational Methods for Bayesian Networks.</text>
<text top="370" left="142" width="107" height="15" font="4">Springer, 2007.</text>
<text top="404" left="108" width="702" height="15" font="4">[24] Nilesh N. Dalvi and Dan Suciu. Eﬃcient query evaluation on probabilistic databases. In</text>
<text top="424" left="142" width="205" height="15" font="4">VLDB, pages 864–875, 2004.</text>
<text top="458" left="108" width="323" height="15" font="4">[25] Amol Deshpande and Samuel Madden.</text>
<text top="458" left="447" width="363" height="15" font="4">Mauvedb: supporting model-based user views in</text>
<text top="478" left="142" width="366" height="15" font="4">database systems. In SIGMOD, pages 73–84, 2006.</text>
<text top="512" left="108" width="543" height="15" font="4">[26] Jr. Forney, G.D. The viterbi algorithm. Proc. IEEE, 61:268–278, 1973.</text>
<text top="546" left="108" width="702" height="15" font="4">[27] Rahul Gupta and Sunita Sarawagi. Creating probabilistic databases from information extrac-</text>
<text top="566" left="142" width="321" height="15" font="4">tion models. In VLDB, pages 965–976, 2006.</text>
<text top="600" left="108" width="702" height="15" font="4">[28] S.M. Harding, W. B. Croft, and C. Weir. Probabilistic retrieval of ocr degraded text using</text>
<text top="620" left="142" width="294" height="15" font="4">n-grams. In ECDL, pages 345–359, 1997.</text>
<text top="654" left="108" width="702" height="15" font="4">[29] John E. Hopcroft, Rajeev Motwani, and Jeﬀrey D. Ullman. Introduction to Automata Theory,</text>
<text top="674" left="142" width="668" height="15" font="4">Languages, and Computation (3rd Edition). Addison-Wesley Longman Publishing Co., Inc.,</text>
<text top="695" left="142" width="37" height="15" font="4">2006.</text>
<text top="728" left="108" width="702" height="15" font="4">[30] F.V. Jensen and S.K. Andersen. Approx. in bayesian belief universes for knowledge-based</text>
<text top="749" left="142" width="277" height="15" font="4">systems. In UAI, pages 162–169, 1990.</text>
<text top="783" left="108" width="476" height="15" font="4">[31] M. I. Jordan. Learning in graphical models. MIT Press, 1999.</text>
<text top="816" left="108" width="702" height="15" font="4">[32] Bhargav Kanagal and Amol Deshpande. Eﬃcient query evaluation over temporally correlated</text>
<text top="837" left="142" width="398" height="15" font="4">probabilistic streams. In ICDE, pages 1315–1318, 2009.</text>
<text top="870" left="108" width="702" height="15" font="4">[33] Bhargav Kanagal and Amol Deshpande. Indexing correlated probabilistic databases. In SIG-</text>
<text top="891" left="142" width="199" height="15" font="4">MOD, pages 455–468, 2009.</text>
<text top="925" left="108" width="298" height="15" font="4">[34] Benny Kimelfeld and Christopher R´</text>
<text top="925" left="398" width="412" height="15" font="4">e. Transducing markov sequences. In PODS, pages 15–26,</text>
<text top="945" left="142" width="37" height="15" font="4">2010.</text>
<text top="979" left="108" width="702" height="15" font="4">[35] Hideaki Kimura, Samuel Madden, and Stanley B. Zdonik. Upi: A primary index for uncertain</text>
<text top="999" left="142" width="287" height="15" font="4">databases. PVLDB, 3(1):630–637, 2010.</text>
<text top="1069" left="451" width="16" height="15" font="4">23</text>
</page>
<page number="24" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="281" height="15" font="4">[36] Arun Kumar and Christopher R´</text>
<text top="113" left="381" width="429" height="15" font="4">e. Probabilistic management of ocr data using an rdbms.</text>
<text top="133" left="142" width="668" height="15" font="4">UW-CS-Technical Report, 2011. available from http://www.cs.wisc.edu/hazy/staccato/</text>
<text top="155" left="142" width="185" height="14" font="4">papers/HazyOCR_TR.pdf.</text>
<text top="188" left="108" width="702" height="15" font="4">[37] John Laﬀerty. Conditional random ﬁelds: Probabilistic models for segmenting and labeling</text>
<text top="208" left="142" width="294" height="15" font="4">sequence data. Morgan Kaufmann, 2001.</text>
<text top="242" left="108" width="251" height="15" font="4">[38] Julie Letchner, Christopher R´</text>
<text top="242" left="351" width="459" height="15" font="4">e, Magdalena Balazinska, and Matthai Philipose. Access methods</text>
<text top="262" left="142" width="393" height="15" font="4">for markovian streams. In ICDE, pages 246–257, 2009.</text>
<text top="296" left="108" width="252" height="15" font="4">[39] Julie Letchner, Christopher R´</text>
<text top="296" left="352" width="458" height="15" font="4">e, Magdalena Balazinska, and Matthai Philipose. Approximation</text>
<text top="316" left="142" width="668" height="15" font="4">trade-oﬀs in markovian stream processing: An empirical study. In ICDE, pages 936–939, 2010.</text>
<text top="350" left="108" width="702" height="15" font="4">[40] S. E. Levinson, L. R. Rabiner, and M. M. Sondhi. An introduction to the application of the</text>
<text top="370" left="142" width="668" height="15" font="4">theory of probabilistic functions of a markov process to automatic speech recognition. Bell</text>
<text top="390" left="142" width="341" height="15" font="4">Systems Technical Journal, 62:1035–1074, 1983.</text>
<text top="424" left="108" width="702" height="15" font="4">[41] Mehryar Mohri. Finite-state transducers in language and speech processing. Computational</text>
<text top="445" left="142" width="234" height="15" font="4">Linguistics, 23(2):269–311, 1997.</text>
<text top="478" left="108" width="702" height="15" font="4">[42] Shunji Mori, Hirobumi Nishida, and Hiromitsu Yamada. Optical character recognition. John</text>
<text top="499" left="142" width="182" height="15" font="4">Wiley &amp; Sons, Inc., 1999.</text>
<text top="532" left="108" width="702" height="15" font="4">[43] Dan Olteanu, Jiewen Huang, and Christoph Koch. Sprout: Lazy vs. eager query plans for</text>
<text top="553" left="142" width="531" height="15" font="4">tuple-independent probabilistic databases. In ICDE, pages 640–651, 2009.</text>
<text top="587" left="108" width="702" height="15" font="4">[44] Lawrence R. Rabiner. A tutorial on hidden markov models and selected applications in speech</text>
<text top="607" left="142" width="373" height="15" font="4">recognition. In Proc. of IEEE, pages 257–286, 1989.</text>
<text top="641" left="108" width="146" height="15" font="4">[45] Christopher R´</text>
<text top="641" left="246" width="564" height="15" font="4">e, Julie Letchner, Magdalena Balazinska, and Dan Suciu. Event queries on</text>
<text top="661" left="142" width="484" height="15" font="4">correlated probabilistic streams. In SIGMOD, pages 715–728, 2008.</text>
<text top="695" left="108" width="145" height="15" font="4">[46] Christopher R´</text>
<text top="695" left="245" width="565" height="15" font="4">e and Dan Suciu. Approximate lineage for probabilistic databases. PVLDB,</text>
<text top="715" left="142" width="138" height="15" font="4">1(1):797–808, 2008.</text>
<text top="749" left="108" width="702" height="15" font="4">[47] Anish Das Sarma, Omar Benjelloun, Alon Halevy, and Jennifer Widom. Working models for</text>
<text top="769" left="142" width="292" height="15" font="4">uncertain data. ICDE, pages 7–18, 2006.</text>
<text top="803" left="108" width="702" height="15" font="4">[48] Anish Das Sarma, Martin Theobald, and Jennifer Widom. Exploiting lineage for conﬁdence</text>
<text top="823" left="142" width="631" height="15" font="4">computation in uncertain and probabilistic databases. In ICDE, pages 1023–1032, 2008.</text>
<text top="857" left="108" width="702" height="15" font="4">[49] Sarvjeet Singh, Chris Mayﬁeld, Sunil Prabhakar, Rahul Shah, and Susanne Hambrusch. In-</text>
<text top="877" left="142" width="472" height="15" font="4">dexing uncertain categorical data. In ICDE, pages 616–625, 2007.</text>
<text top="911" left="108" width="702" height="15" font="4">[50] Paavo Turakainen. Generalized automata and stochastic languages. Proc. of American Math-</text>
<text top="931" left="142" width="210" height="15" font="4">ematical Society, 21(2), 1969.</text>
<text top="965" left="108" width="702" height="15" font="4">[51] Martin J. Wainwright and Michael I. Jordan. Graphical models, exponential families, and</text>
<text top="986" left="142" width="549" height="15" font="4">variational inference. Foundations and Trends of Machine Learning, 1, 2008.</text>
<text top="1069" left="451" width="16" height="15" font="4">24</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">[52] Daisy Zhe Wang, Eirinaios Michelakis, Minos N. Garofalakis, and Joseph M. Hellerstein.</text>
<text top="133" left="142" width="668" height="15" font="4">Bayesstore: managing large, uncertain data repositories with probabilistic graphical models.</text>
<text top="154" left="142" width="206" height="15" font="4">PVLDB, 1(1):340–351, 2008.</text>
<text top="188" left="108" width="702" height="15" font="4">[53] Jennifer Widom. Trio: A system for integrated management of data, accuracy, and lineage.</text>
<text top="208" left="142" width="222" height="15" font="4">In CIDR, pages 262–276, 2005.</text>
<text top="242" left="108" width="702" height="15" font="4">[54] Jin Y. Yen. Finding the k shortest loopless paths in a network. In Management Science, 1971.</text>
<text top="275" left="108" width="702" height="15" font="4">[55] Justin Zobel, Alistair Moﬀat, and Ron Sacks-davis. An eﬃcient indexing technique for full-text</text>
<text top="296" left="142" width="249" height="15" font="4">database systems. In VLDB, 1992.</text>
<text top="329" left="108" width="702" height="15" font="4">[56] Argyrios Zymnis, Stephen Boyd, and Dimitry Gorinevsky. Relaxed maximum a posteriori fault</text>
<text top="350" left="142" width="325" height="15" font="4">identiﬁcation. Signal Process., 89, June 2009.</text>
<text top="398" left="108" width="18" height="19" font="3">A</text>
<text top="398" left="150" width="261" height="19" font="3">Finite State Transducers</text>
<text top="438" left="108" width="702" height="17" font="4">As mentioned in Section 2, the formal model used by Staccato to encode the uncertainty informa-</text>
<text top="458" left="108" width="702" height="15" font="4">tion in OCR data is the Finite State Transducer (FST). A transducer is an automaton that converts</text>
<text top="479" left="108" width="702" height="15" font="4">(tranduces) strings from an input alphabet to an output alphabet. We can view a transducer as an</text>
<text top="499" left="108" width="702" height="15" font="4">SFA that both reads and emits characters on its transitions. Formally, we ﬁx an input alphabet Γ</text>
<text top="519" left="108" width="702" height="15" font="4">and an output alphabet Σ. An FST S over Γ and Σ is a tuple S = (V, E, s, f, δ) where V is a set</text>
<text top="539" left="108" width="702" height="15" font="4">of nodes, E ⊆ V × V is a set of edges such that (V, E) is a directed acyclic graph, and s (resp. f )</text>
<text top="560" left="108" width="702" height="15" font="4">is a distinguished start (resp. ﬁnal) node (state). Each edge has ﬁnitely many arcs. The function</text>
<text top="580" left="108" width="288" height="15" font="4">δ is a stochastic transition function, i.e.,</text>
<text top="618" left="244" width="182" height="15" font="4">δ : E × Γ × Σ → [0, 1] s.t.</text>
<text top="644" left="430" width="49" height="8" font="6">y:(x,y)∈E</text>
<text top="653" left="429" width="53" height="11" font="5">γ∈Γ,σ∈Σ</text>
<text top="618" left="484" width="122" height="15" font="4">δ((x, y), γ, σ) = 1</text>
<text top="618" left="623" width="48" height="15" font="4">∀x ∈ V</text>
<text top="684" left="108" width="702" height="15" font="4">In essence, δ(e, γ, σ), where e = (x, y), is the conditional probability of transitioning from x → y,</text>
<text top="705" left="108" width="702" height="15" font="4">reading γ and emitting σ. In OCR, the input alphabet is an encoding of the location of the character</text>
<text top="725" left="108" width="702" height="15" font="4">glyphs in the image, while the output alphabet is the set of ASCII characters. An FST also deﬁnes</text>
<text top="745" left="108" width="479" height="15" font="4">a discrete probability distribution over strings through its outputs.</text>
<text top="793" left="108" width="17" height="19" font="3">B</text>
<text top="793" left="149" width="310" height="19" font="3">Illustrations for FindMinSFA</text>
<text top="833" left="108" width="702" height="15" font="4">We now present more illustrations for the FindMinSFA operation (Section 3.1) in Figure 12. As</text>
<text top="854" left="108" width="702" height="15" font="4">shown in Algorithm 1, three cases arise when the given subset of nodes of the SFA S do not form</text>
<text top="874" left="108" width="702" height="15" font="4">an SFA by themselves. Firstly, they might not have a unique start node, in which case their least</text>
<text top="894" left="108" width="702" height="15" font="4">common ancestor has to be computed (Figure 12 (A)). Secondly, they might not have a unique end</text>
<text top="915" left="108" width="702" height="15" font="4">node, in which case their greatest common descendant has to be computed (Figure 12 (B). Finally,</text>
<text top="935" left="108" width="702" height="15" font="4">there could be an external edge incident upon an internal node of the subset (Figure 12 (C)). In all</text>
<text top="955" left="108" width="702" height="15" font="4">cases, FindMinSFA outputs a subset of nodes that form a valid SFA, which is then collapsed and</text>
<text top="976" left="108" width="233" height="15" font="4">replaced with a single edge in S.</text>
<text top="1069" left="451" width="16" height="15" font="4">25</text>
</page>
<page number="26" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="34" size="10" family="Helvetica" color="#000000"/>
	<fontspec id="35" size="10" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="36" size="7" family="Helvetica" color="#0000ff"/>
	<fontspec id="37" size="7" family="Helvetica" color="#ff0000"/>
	<fontspec id="38" size="7" family="Helvetica" color="#008000"/>
	<fontspec id="39" size="6" family="Times" color="#ff0000"/>
	<fontspec id="40" size="7" family="Helvetica" color="#800080"/>
<text top="396" left="143" width="1" height="4" font="18"> </text>
<text top="396" left="459" width="1" height="4" font="18"> </text>
<text top="364" left="662" width="7" height="11" font="34">0</text>
<text top="363" left="775" width="7" height="11" font="34">5</text>
<text top="355" left="696" width="18" height="11" font="34">aef</text>
<text top="371" left="721" width="28" height="11" font="34">abcd</text>
<text top="323" left="287" width="16" height="11" font="35">C2</text>
<text top="323" left="462" width="16" height="11" font="35">C3</text>
<text top="323" left="638" width="16" height="11" font="35">C4</text>
<text top="335" left="214" width="7" height="11" font="34">4</text>
<text top="355" left="118" width="7" height="11" font="34">0</text>
<text top="354" left="268" width="7" height="11" font="34">5</text>
<text top="386" left="247" width="7" height="11" font="34">3</text>
<text top="347" left="139" width="7" height="11" font="34">a</text>
<text top="336" left="184" width="7" height="11" font="34">e</text>
<text top="335" left="245" width="4" height="11" font="34">f</text>
<text top="370" left="187" width="7" height="11" font="34">b</text>
<text top="379" left="226" width="7" height="11" font="34">c</text>
<text top="370" left="252" width="7" height="11" font="34">d</text>
<text top="355" left="169" width="7" height="11" font="34">1</text>
<text top="386" left="202" width="7" height="11" font="34">2</text>
<text top="323" left="111" width="16" height="11" font="35">C1</text>
<text top="397" left="116" width="57" height="9" font="36">Edge 1-4 has</text>
<text top="409" left="116" width="63" height="9" font="36">to be included</text>
<text top="335" left="390" width="7" height="11" font="34">4</text>
<text top="355" left="294" width="7" height="11" font="34">0</text>
<text top="354" left="443" width="7" height="11" font="34">5</text>
<text top="386" left="422" width="7" height="11" font="34">3</text>
<text top="347" left="315" width="7" height="11" font="34">a</text>
<text top="336" left="365" width="7" height="11" font="34">e</text>
<text top="335" left="421" width="4" height="11" font="34">f</text>
<text top="370" left="363" width="7" height="11" font="34">b</text>
<text top="379" left="401" width="7" height="11" font="34">c</text>
<text top="370" left="427" width="7" height="11" font="34">d</text>
<text top="355" left="344" width="7" height="11" font="34">1</text>
<text top="386" left="378" width="7" height="11" font="34">2</text>
<text top="398" left="292" width="45" height="9" font="37">No unique</text>
<text top="410" left="292" width="41" height="9" font="37">end node</text>
<text top="341" left="565" width="7" height="11" font="34">4</text>
<text top="360" left="469" width="7" height="11" font="34">0</text>
<text top="360" left="619" width="7" height="11" font="34">5</text>
<text top="392" left="597" width="7" height="11" font="34">3</text>
<text top="353" left="490" width="7" height="11" font="34">a</text>
<text top="341" left="541" width="7" height="11" font="34">e</text>
<text top="341" left="596" width="4" height="11" font="34">f</text>
<text top="376" left="538" width="7" height="11" font="34">b</text>
<text top="385" left="577" width="7" height="11" font="34">c</text>
<text top="376" left="603" width="7" height="11" font="34">d</text>
<text top="360" left="520" width="7" height="11" font="34">1</text>
<text top="392" left="553" width="7" height="11" font="34">2</text>
<text top="399" left="462" width="71" height="9" font="37">5 is the greatest</text>
<text top="410" left="462" width="93" height="9" font="37">common descendant</text>
<text top="405" left="671" width="99" height="9" font="38">Collapsed to one edge</text>
<text top="257" left="584" width="7" height="11" font="34">0</text>
<text top="257" left="622" width="7" height="11" font="34">1</text>
<text top="257" left="734" width="7" height="11" font="34">5</text>
<text top="250" left="602" width="7" height="11" font="34">a</text>
<text top="250" left="655" width="11" height="11" font="34">ef</text>
<text top="264" left="680" width="22" height="11" font="34">bcd</text>
<text top="217" left="404" width="16" height="11" font="35">B2</text>
<text top="218" left="579" width="16" height="11" font="35">B3</text>
<text top="228" left="323" width="7" height="11" font="34">4</text>
<text top="257" left="233" width="7" height="11" font="34">0</text>
<text top="252" left="384" width="7" height="11" font="34">5</text>
<text top="293" left="355" width="7" height="11" font="34">3</text>
<text top="250" left="249" width="7" height="11" font="34">a</text>
<text top="235" left="294" width="7" height="11" font="34">e</text>
<text top="232" left="355" width="4" height="11" font="34">f</text>
<text top="272" left="295" width="7" height="11" font="34">b</text>
<text top="285" left="330" width="7" height="11" font="34">c</text>
<text top="270" left="366" width="7" height="11" font="34">d</text>
<text top="257" left="271" width="7" height="11" font="34">1</text>
<text top="293" left="305" width="7" height="11" font="34">2</text>
<text top="217" left="228" width="16" height="11" font="35">B1</text>
<text top="228" left="497" width="7" height="11" font="34">4</text>
<text top="257" left="408" width="7" height="11" font="34">0</text>
<text top="252" left="559" width="7" height="11" font="34">5</text>
<text top="292" left="530" width="7" height="11" font="34">3</text>
<text top="249" left="424" width="7" height="11" font="34">a</text>
<text top="235" left="469" width="7" height="11" font="34">e</text>
<text top="232" left="530" width="4" height="11" font="34">f</text>
<text top="272" left="469" width="7" height="11" font="34">b</text>
<text top="285" left="505" width="7" height="11" font="34">c</text>
<text top="270" left="541" width="7" height="11" font="34">d</text>
<text top="257" left="446" width="7" height="11" font="34">1</text>
<text top="292" left="480" width="7" height="11" font="34">2</text>
<text top="294" left="231" width="45" height="9" font="37">No unique</text>
<text top="306" left="231" width="41" height="9" font="37">end node</text>
<text top="249" left="482" width="67" height="10" font="39">5 is the greatest</text>
<text top="259" left="461" width="88" height="10" font="39">common descendant</text>
<text top="301" left="626" width="99" height="9" font="38">Collapsed to one edge</text>
<text top="152" left="584" width="7" height="11" font="34">0</text>
<text top="152" left="622" width="7" height="11" font="34">1</text>
<text top="151" left="734" width="7" height="11" font="34">5</text>
<text top="144" left="602" width="7" height="11" font="34">a</text>
<text top="144" left="655" width="11" height="11" font="34">ef</text>
<text top="158" left="680" width="22" height="11" font="34">bcd</text>
<text top="112" left="404" width="16" height="11" font="35">A2</text>
<text top="112" left="579" width="16" height="11" font="35">A3</text>
<text top="122" left="317" width="7" height="11" font="34">4</text>
<text top="152" left="233" width="7" height="11" font="34">0</text>
<text top="147" left="378" width="7" height="11" font="34">5</text>
<text top="187" left="350" width="7" height="11" font="34">3</text>
<text top="144" left="249" width="7" height="11" font="34">a</text>
<text top="130" left="285" width="7" height="11" font="34">e</text>
<text top="127" left="342" width="4" height="11" font="34">f</text>
<text top="166" left="292" width="7" height="11" font="34">b</text>
<text top="180" left="323" width="7" height="11" font="34">c</text>
<text top="164" left="361" width="7" height="11" font="34">d</text>
<text top="152" left="271" width="7" height="11" font="34">1</text>
<text top="187" left="299" width="7" height="11" font="34">2</text>
<text top="112" left="228" width="16" height="11" font="35">A1</text>
<text top="189" left="231" width="45" height="9" font="40">No unique</text>
<text top="200" left="231" width="45" height="9" font="40">start node</text>
<text top="195" left="626" width="99" height="9" font="38">Collapsed to one edge</text>
<text top="127" left="497" width="7" height="11" font="34">4</text>
<text top="152" left="409" width="7" height="11" font="34">0</text>
<text top="148" left="554" width="7" height="11" font="34">5</text>
<text top="181" left="526" width="7" height="11" font="34">3</text>
<text top="144" left="425" width="7" height="11" font="34">a</text>
<text top="133" left="468" width="7" height="11" font="34">e</text>
<text top="130" left="525" width="4" height="11" font="34">f</text>
<text top="159" left="468" width="7" height="11" font="34">b</text>
<text top="174" left="508" width="7" height="11" font="34">c</text>
<text top="163" left="536" width="7" height="11" font="34">d</text>
<text top="152" left="447" width="7" height="11" font="34">1</text>
<text top="181" left="487" width="7" height="11" font="34">2</text>
<text top="189" left="404" width="56" height="9" font="40">1 is the least</text>
<text top="200" left="404" width="80" height="9" font="40">common ancestor</text>
<text top="448" left="108" width="702" height="15" font="4">Figure 12: Illustrating FindMinSFA: (A) No unique start node for the set X = {3, 4, 5}, (B) No</text>
<text top="468" left="108" width="702" height="15" font="4">unique end node for the set X = {1, 2, 4}, and (C) Set X = {0, 1, 2} has external edge 1 − 4 incident</text>
<text top="488" left="108" width="309" height="15" font="4">on internal node 1, and has to be included.</text>
<text top="534" left="108" width="17" height="19" font="3">C</text>
<text top="534" left="150" width="318" height="19" font="3">Conditional is a KL Minimizer</text>
<text top="574" left="108" width="702" height="15" font="4">KL divergence is similar to a distance metric in that it allows us to say whether or not two probability</text>
<text top="595" left="108" width="481" height="15" font="4">distributions are close. Given two probability distribution µ, ν : Σ</text>
<text top="591" left="589" width="6" height="11" font="5">∗</text>
<text top="594" left="602" width="208" height="15" font="4">→ [0, 1] the KL-divergence is</text>
<text top="615" left="108" width="252" height="15" font="4">denoted KL(µ||ν) and is deﬁned as:</text>
<text top="660" left="353" width="78" height="15" font="4">KL(µ||ν) =</text>
<text top="683" left="436" width="25" height="11" font="5">σ∈Σ</text>
<text top="682" left="461" width="6" height="8" font="6">∗</text>
<text top="660" left="471" width="56" height="15" font="4">µ(x) log</text>
<text top="649" left="531" width="32" height="15" font="4">µ(x)</text>
<text top="672" left="531" width="31" height="15" font="4">ν(x)</text>
<text top="713" left="108" width="702" height="15" font="4">The above quantity is only deﬁned for µ, ν such that µ(x) &gt; 0 implies that ν(x) &gt; 0. If µ = ν then</text>
<text top="733" left="108" width="96" height="15" font="4">KL(µ||ν) = 0.</text>
<text top="754" left="133" width="677" height="15" font="4">We justify our choice to retain the probability of each string we select by showing that it is in</text>
<text top="774" left="108" width="702" height="15" font="4">fact a minimizer for a common information theoretic measure, KL-divergence. Given a probability</text>
<text top="794" left="108" width="138" height="15" font="4">distribution µ on Σ</text>
<text top="791" left="246" width="6" height="11" font="5">∗</text>
<text top="794" left="258" width="118" height="15" font="4">and a set X ⊆ Σ</text>
<text top="791" left="376" width="6" height="11" font="5">∗</text>
<text top="794" left="383" width="43" height="15" font="4">, let µ</text>
<text top="800" left="426" width="14" height="11" font="5">|X</text>
<text top="794" left="447" width="363" height="15" font="4">denote the result of conditioning µ on X. Let A be</text>
<text top="815" left="108" width="282" height="15" font="4">the set of all distributions on X. Then,</text>
<text top="851" left="363" width="36" height="15" font="4">KL(µ</text>
<text top="857" left="400" width="14" height="11" font="5">|X</text>
<text top="850" left="415" width="74" height="15" font="4">||µ) ≤ min</text>
<text top="865" left="463" width="26" height="11" font="5">α∈A</text>
<text top="851" left="492" width="62" height="15" font="4">KL(α||µ)</text>
<text top="851" left="789" width="21" height="15" font="4">(1)</text>
<text top="894" left="108" width="702" height="15" font="4">That is, selecting the probabilities according to the conditional probability distribution is optimal</text>
<text top="914" left="108" width="541" height="15" font="4">with respect to KL divergence. Eq. 1 follows from the observation that KL(µ</text>
<text top="920" left="649" width="14" height="11" font="5">|X</text>
<text top="913" left="665" width="145" height="15" font="4">||µ) = − log Z where</text>
<text top="935" left="108" width="30" height="15" font="4">Z =</text>
<text top="942" left="159" width="26" height="11" font="5">x∈X</text>
<text top="935" left="190" width="309" height="15" font="4">µ(x). Using the log-sum inequality one has</text>
<text top="1010" left="242" width="26" height="11" font="5">x∈X</text>
<text top="987" left="272" width="56" height="15" font="4">α(x) log</text>
<text top="976" left="333" width="33" height="15" font="4">α(x)</text>
<text top="998" left="333" width="32" height="15" font="4">µ(x)</text>
<text top="986" left="372" width="13" height="15" font="4">≥</text>
<text top="1010" left="402" width="26" height="11" font="5">x∈X</text>
<text top="987" left="432" width="33" height="15" font="4">α(x)</text>
<text top="987" left="480" width="21" height="15" font="4">log</text>
<text top="983" left="530" width="26" height="11" font="5">x∈X</text>
<text top="975" left="561" width="33" height="15" font="4">α(x)</text>
<text top="1007" left="531" width="26" height="11" font="5">x∈X</text>
<text top="999" left="561" width="32" height="15" font="4">µ(x)</text>
<text top="987" left="607" width="68" height="15" font="4">= − log Z</text>
<text top="1069" left="451" width="16" height="15" font="4">26</text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1188" width="918">
<text top="110" left="108" width="19" height="19" font="3">D</text>
<text top="110" left="151" width="9" height="19" font="3">δ</text>
<text top="117" left="160" width="8" height="13" font="2">k</text>
<text top="110" left="177" width="338" height="19" font="3">is a minimizer (Proposition 3.1)</text>
<text top="150" left="108" width="702" height="15" font="4">There are two observations. The ﬁrst is that by normalization, since the probability of every string</text>
<text top="170" left="108" width="333" height="15" font="4">is simply proportional to its probability in Pr</text>
<text top="176" left="441" width="13" height="11" font="5">[δ]</text>
<text top="170" left="461" width="349" height="15" font="4">then the KL divergence is inversely proportional</text>
<text top="190" left="108" width="702" height="15" font="4">to the probability mass retained. Thus, the minimizer must retain as much probability mass as</text>
<text top="211" left="108" width="512" height="15" font="4">possible. The second observation is the following: consider any chunk (S</text>
<text top="216" left="620" width="4" height="11" font="5">i</text>
<text top="211" left="625" width="185" height="15" font="4">, s, f ) where s is the single</text>
<text top="231" left="108" width="657" height="15" font="4">start state and f is the ﬁnal state. By construction, every path that uses a character from S</text>
<text top="236" left="765" width="4" height="11" font="5">i</text>
<text top="231" left="775" width="35" height="15" font="4">must</text>
<text top="251" left="108" width="702" height="15" font="4">enter through s and leave through f . And the higher probability that we place in that state, the</text>
<text top="272" left="108" width="238" height="15" font="4">higher the retained mass. Since δ</text>
<text top="277" left="346" width="7" height="11" font="5">k</text>
<text top="272" left="359" width="451" height="15" font="4">retains the highest probability in each segment, it is indeed the</text>
<text top="292" left="108" width="76" height="15" font="4">minimizer.</text>
<text top="340" left="108" width="16" height="19" font="3">E</text>
<text top="340" left="148" width="228" height="19" font="3">Proof of Theorem 3.1</text>
<text top="380" left="108" width="610" height="17" font="4">The starting point is that the following problem is NP-hard: Given vectors x, y ∈ Q</text>
<text top="377" left="718" width="4" height="11" font="5">l</text>
<text top="380" left="729" width="81" height="15" font="4">and a ﬁxed</text>
<text top="400" left="108" width="409" height="15" font="4">constant λ ≥ 0 for l = 4 and sets of stochastic matrices S</text>
<text top="406" left="517" width="6" height="11" font="5">1</text>
<text top="400" left="525" width="46" height="15" font="4">, . . . , S</text>
<text top="406" left="571" width="10" height="11" font="5">N</text>
<text top="400" left="588" width="94" height="15" font="4">where each S</text>
<text top="406" left="682" width="4" height="11" font="5">i</text>
<text top="400" left="693" width="117" height="15" font="4">is a set of 2 l × l</text>
<text top="421" left="108" width="367" height="15" font="4">matrices, determine if there is a sequence ¯i ∈ {1, 2}</text>
<text top="416" left="475" width="10" height="11" font="5">N</text>
<text top="421" left="493" width="88" height="15" font="4">such that M</text>
<text top="426" left="581" width="4" height="11" font="5">i</text>
<text top="430" left="585" width="5" height="8" font="6">j</text>
<text top="420" left="596" width="25" height="15" font="4">∈ S</text>
<text top="426" left="622" width="5" height="11" font="5">j</text>
<text top="421" left="634" width="31" height="15" font="4">and:</text>
<text top="459" left="388" width="9" height="15" font="4">x</text>
<text top="456" left="397" width="7" height="11" font="5">T</text>
<text top="459" left="407" width="16" height="15" font="4">M</text>
<text top="465" left="423" width="4" height="11" font="5">i</text>
<text top="469" left="427" width="9" height="8" font="6">N</text>
<text top="459" left="441" width="38" height="15" font="4">· · · M</text>
<text top="465" left="479" width="4" height="11" font="5">i</text>
<text top="469" left="483" width="5" height="8" font="6">1</text>
<text top="459" left="490" width="40" height="15" font="4">y ≥ λ</text>
<text top="496" left="133" width="677" height="15" font="4">We ﬁnd a small l such that the claim holds. For this, we start with the results of Bournez</text>
<text top="517" left="108" width="702" height="15" font="4">and Branicky who show that a related problem called the Matrix Mortality problem is NP-hard for</text>
<text top="537" left="108" width="582" height="15" font="4">matrices of size 2 × 2 [17], where we ask for to ﬁnd a selection as above where x</text>
<text top="534" left="690" width="7" height="11" font="5">T</text>
<text top="537" left="700" width="16" height="15" font="4">M</text>
<text top="542" left="716" width="4" height="11" font="5">i</text>
<text top="546" left="720" width="9" height="8" font="6">N</text>
<text top="536" left="734" width="38" height="15" font="4">· · · M</text>
<text top="542" left="772" width="4" height="11" font="5">i</text>
<text top="546" left="776" width="5" height="8" font="6">1</text>
<text top="537" left="783" width="27" height="15" font="4">y =</text>
<text top="557" left="108" width="252" height="15" font="4">0. Unfortunately, the matrices (M</text>
<text top="563" left="360" width="9" height="11" font="5">ij</text>
<text top="557" left="371" width="439" height="15" font="4">) are not stochastic (not even positive). However, using the</text>
<text top="578" left="108" width="702" height="15" font="4">techniques of Turakainen [50] (and Blondel [16]), we can transform the matrices into slightly larger,</text>
<text top="598" left="108" width="410" height="15" font="4">but still constant dimensions, stochastic matrices (l = 4).</text>
<text top="618" left="133" width="677" height="15" font="4">Now, we construct a transducer and chunk structure Φ such that if it is possible to choose at</text>
<text top="639" left="108" width="582" height="15" font="4">most k = 2 in each chunk with the total probability mass being greater than λ2</text>
<text top="635" left="690" width="20" height="11" font="5">−N</text>
<text top="639" left="712" width="98" height="15" font="4">, then we can</text>
<text top="659" left="108" width="702" height="15" font="4">get a choice for ¯i. Equally, if there exists such a choice for ¯i, then we can ﬁnd such a transducer</text>
<text top="679" left="108" width="668" height="15" font="4">representation. So the problem of ﬁnding the highest mass representation is NP-hard as well.</text>
<text top="699" left="133" width="677" height="15" font="4">Throughout this reduction, we assume that every edge is assigned a unique character to ensure</text>
<text top="720" left="108" width="702" height="15" font="4">the unique path property. It is straightforward to optimize for a binary alphabet: simply add</text>
<text top="740" left="108" width="702" height="15" font="4">replace each character a sequence of edges with a binary encoding (then make this one chunk). So,</text>
<text top="760" left="108" width="382" height="15" font="4">we omit the emitted string in the transition function.</text>
<text top="781" left="133" width="677" height="15" font="4">Let P (x) denote the probability mass that a string is emitted that passes through the node x.</text>
<text top="801" left="108" width="702" height="15" font="4">We will group nodes together as components of a vector. The start node s has P (s) = 1. Then,</text>
<text top="821" left="108" width="337" height="15" font="4">we construct the vector y by creating nodes v</text>
<text top="827" left="445" width="6" height="11" font="5">1</text>
<text top="821" left="452" width="44" height="15" font="4">, . . . , v</text>
<text top="827" left="497" width="4" height="11" font="5">l</text>
<text top="821" left="508" width="173" height="15" font="4">with a transition δ((s, v</text>
<text top="827" left="681" width="4" height="11" font="5">i</text>
<text top="821" left="686" width="62" height="15" font="4">), 0) = y</text>
<text top="827" left="749" width="4" height="11" font="5">i</text>
<text top="821" left="754" width="56" height="15" font="4">. Thus,</text>
<text top="842" left="108" width="27" height="15" font="4">P (v</text>
<text top="847" left="135" width="4" height="11" font="5">i</text>
<text top="842" left="140" width="41" height="15" font="4">) = y</text>
<text top="847" left="181" width="4" height="11" font="5">i</text>
<text top="842" left="187" width="623" height="15" font="4">. We need two main gadgets: (1) A gadget to encode matrix multiplication and (2)</text>
<text top="862" left="108" width="702" height="15" font="4">a gadget that intuitively encodes that given two inputs, we can select one or the other, but not</text>
<text top="882" left="108" width="702" height="15" font="4">both. We provide a slightly weaker property: For a ﬁxed parameter α ≥ 0 (we pick α below). We</text>
<text top="903" left="108" width="702" height="15" font="4">construct a gadget that takes as input two nodes x, x and has output two nodes u, u such that</text>
<text top="923" left="108" width="606" height="15" font="4">the probability at u (P (u)) and at u (P (u )) satisﬁes the following weak-exclusivity:</text>
<text top="960" left="299" width="311" height="15" font="4">(P (u), P (u )) = (P (x), 0), (0, P (x )), (v, v )</text>
<text top="960" left="789" width="21" height="15" font="4">(2)</text>
<text top="997" left="108" width="702" height="15" font="4">where v ≤ αP (x) and v ≤ αP (x ). Intuitively, this gadget forces us to choose x or x or not both.</text>
<text top="1017" left="108" width="658" height="15" font="4">Notice that if we select both, then for sure the output of each component is smaller than α.</text>
<text top="1069" left="451" width="16" height="15" font="4">27</text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="41" size="10" family="Times" color="#3b3b3b"/>
	<fontspec id="42" size="12" family="Times" color="#000000"/>
	<fontspec id="43" size="19" family="Times" color="#000000"/>
	<fontspec id="44" size="8" family="Times" color="#3b3b3b"/>
<text top="192" left="143" width="3" height="14" font="41"> </text>
<text top="192" left="458" width="3" height="14" font="41"> </text>
<text top="144" left="140" width="13" height="18" font="4">...</text>
<text top="172" left="175" width="12" height="10" font="24">0.5</text>
<text top="117" left="306" width="12" height="16" font="42">M</text>
<text top="128" left="318" width="5" height="9" font="24">1</text>
<text top="166" left="307" width="12" height="16" font="42">M</text>
<text top="178" left="319" width="5" height="9" font="24">2</text>
<text top="142" left="258" width="12" height="24" font="43">+</text>
<text top="144" left="374" width="13" height="18" font="4">...</text>
<text top="167" left="112" width="7" height="14" font="19">y</text>
<text top="133" left="115" width="0" height="27" font="4">...</text>
<text top="167" left="162" width="7" height="14" font="19">x</text>
<text top="133" left="165" width="0" height="27" font="4">...</text>
<text top="137" left="214" width="7" height="14" font="19">v</text>
<text top="104" left="217" width="0" height="27" font="4">...</text>
<text top="185" left="214" width="8" height="14" font="19">u</text>
<text top="151" left="217" width="0" height="27" font="4">...</text>
<text top="123" left="173" width="12" height="10" font="24">0.5</text>
<text top="139" left="176" width="12" height="10" font="24">0.5</text>
<text top="157" left="176" width="12" height="10" font="24">0.5</text>
<text top="168" left="357" width="10" height="14" font="19">x'</text>
<text top="133" left="360" width="0" height="27" font="4">...</text>
<text top="168" left="410" width="13" height="14" font="19">x''</text>
<text top="133" left="413" width="0" height="27" font="4">...</text>
<text top="111" left="727" width="6" height="12" font="22">1</text>
<text top="135" left="705" width="15" height="12" font="22">0.5</text>
<text top="135" left="756" width="6" height="12" font="22">1</text>
<text top="160" left="757" width="6" height="12" font="22">1</text>
<text top="116" left="674" width="7" height="14" font="19">x</text>
<text top="145" left="673" width="10" height="14" font="19">x'</text>
<text top="116" left="795" width="8" height="14" font="19">u</text>
<text top="144" left="795" width="10" height="14" font="19">u'</text>
<text top="187" left="691" width="91" height="12" font="22">Repeated m times</text>
<text top="160" left="702" width="15" height="12" font="22">0.5</text>
<text top="129" left="433" width="7" height="14" font="19">a</text>
<text top="139" left="440" width="8" height="8" font="16">11</text>
<text top="149" left="434" width="7" height="14" font="19">a</text>
<text top="159" left="441" width="8" height="8" font="16">21</text>
<text top="149" left="454" width="7" height="14" font="19">a</text>
<text top="159" left="461" width="8" height="8" font="16">22</text>
<text top="129" left="454" width="7" height="14" font="19">a</text>
<text top="139" left="461" width="8" height="8" font="16">12</text>
<text top="129" left="488" width="7" height="14" font="19">x</text>
<text top="139" left="495" width="4" height="8" font="16">1</text>
<text top="149" left="488" width="7" height="14" font="19">x</text>
<text top="158" left="495" width="4" height="8" font="16">2</text>
<text top="129" left="525" width="7" height="14" font="19">y</text>
<text top="139" left="532" width="4" height="8" font="16">1</text>
<text top="149" left="525" width="7" height="14" font="19">y</text>
<text top="158" left="532" width="4" height="8" font="16">2</text>
<text top="139" left="506" width="9" height="18" font="9">=</text>
<text top="156" left="596" width="7" height="14" font="19">a</text>
<text top="166" left="603" width="8" height="8" font="16">22</text>
<text top="165" left="654" width="7" height="14" font="19">y</text>
<text top="175" left="661" width="4" height="8" font="16">2</text>
<text top="122" left="654" width="7" height="14" font="19">y</text>
<text top="132" left="660" width="4" height="8" font="16">1</text>
<text top="164" left="548" width="7" height="14" font="19">x</text>
<text top="174" left="555" width="4" height="8" font="16">2</text>
<text top="123" left="548" width="7" height="14" font="19">x</text>
<text top="133" left="555" width="4" height="8" font="16">1</text>
<text top="138" left="572" width="7" height="14" font="19">a</text>
<text top="148" left="579" width="8" height="8" font="16">21</text>
<text top="148" left="562" width="7" height="14" font="19">a</text>
<text top="158" left="569" width="8" height="8" font="16">12</text>
<text top="116" left="594" width="7" height="14" font="19">a</text>
<text top="126" left="601" width="8" height="8" font="16">11</text>
<text top="188" left="418" width="8" height="12" font="44">A</text>
<text top="188" left="657" width="8" height="12" font="44">B</text>
<text top="188" left="800" width="8" height="12" font="44">C</text>
<text top="224" left="108" width="702" height="15" font="4">Figure 13: Gadgets used in the proof of Theorem 3.1: (A) Overall Reduction. We create one block</text>
<text top="244" left="108" width="171" height="15" font="4">for each of the N sets S</text>
<text top="250" left="279" width="4" height="11" font="5">i</text>
<text top="244" left="290" width="363" height="15" font="4">(B) Multiply Gadget (C) Binary Exclusive Gadget</text>
<text top="295" left="133" width="677" height="15" font="4">Assuming these gadgets, the overall construction is shown in Figure 13(A) that illustrates a</text>
<text top="315" left="108" width="169" height="15" font="4">chunk for a single set S</text>
<text top="321" left="277" width="4" height="11" font="5">i</text>
<text top="315" left="282" width="528" height="15" font="4">. Each chunk contains two matrix multiply gadgets (representing the two</text>
<text top="335" left="108" width="94" height="15" font="4">matrices in S</text>
<text top="341" left="202" width="4" height="11" font="5">i</text>
<text top="335" left="207" width="603" height="15" font="4">) and a large gadget that ensures we either choose one matrix or the other – but not</text>
<text top="356" left="108" width="702" height="15" font="4">elements of both. The input to the chunk is a vector x: in the ﬁrst chunk, x = y above. In chunk</text>
<text top="376" left="108" width="366" height="15" font="4">j, x will represent the result of some of choice M</text>
<text top="382" left="474" width="4" height="11" font="5">i</text>
<text top="386" left="479" width="19" height="8" font="6">j−1</text>
<text top="375" left="502" width="38" height="15" font="4">· · · M</text>
<text top="382" left="540" width="4" height="11" font="5">i</text>
<text top="385" left="544" width="5" height="8" font="6">1</text>
<text top="376" left="551" width="259" height="15" font="4">y. As shown, for each i = 1, . . . , l,</text>
<text top="396" left="108" width="73" height="15" font="4">we send x</text>
<text top="402" left="181" width="4" height="11" font="5">i</text>
<text top="396" left="193" width="29" height="15" font="4">to v</text>
<text top="402" left="222" width="4" height="11" font="5">i</text>
<text top="396" left="234" width="193" height="15" font="4">with probability 0.5 and x</text>
<text top="402" left="427" width="4" height="11" font="5">i</text>
<text top="396" left="439" width="31" height="15" font="4">to u</text>
<text top="402" left="469" width="4" height="11" font="5">i</text>
<text top="396" left="481" width="329" height="15" font="4">with probability 0.5. In turn, u is fed to the</text>
<text top="417" left="108" width="164" height="15" font="4">multiply gadget for M</text>
<text top="422" left="272" width="11" height="11" font="5">1j</text>
<text top="417" left="292" width="311" height="15" font="4">and v is fed to the multiply gadget for M</text>
<text top="422" left="603" width="11" height="11" font="5">2j</text>
<text top="417" left="623" width="187" height="15" font="4">(with δ = 1). We ensure</text>
<text top="437" left="108" width="206" height="15" font="4">that we cannot select both v</text>
<text top="443" left="314" width="4" height="11" font="5">i</text>
<text top="437" left="325" width="42" height="15" font="4">and u</text>
<text top="443" left="366" width="5" height="11" font="5">j</text>
<text top="437" left="379" width="431" height="15" font="4">for any i, j using the exclusive gadget described below. The</text>
<text top="457" left="108" width="249" height="15" font="4">output of this chunk is either 0.5M</text>
<text top="463" left="357" width="11" height="11" font="5">i1</text>
<text top="457" left="369" width="71" height="15" font="4">x or 0.5M</text>
<text top="463" left="440" width="11" height="11" font="5">i2</text>
<text top="457" left="451" width="128" height="15" font="4">x or a vector with</text>
<text top="463" left="591" width="6" height="11" font="5">1</text>
<text top="457" left="603" width="207" height="15" font="4">norm smaller than α. We set</text>
<text top="478" left="108" width="43" height="15" font="4">α &lt; 2</text>
<text top="474" left="151" width="20" height="11" font="5">−N</text>
<text top="478" left="173" width="637" height="15" font="4">λ. Given this, property is clear that given any solution to the original problem, we can</text>
<text top="498" left="108" width="702" height="15" font="4">create a solution to this problem. On the other hand, if the solution with highest probability mass</text>
<text top="518" left="108" width="174" height="15" font="4">has mass greater than 2</text>
<text top="515" left="282" width="20" height="11" font="5">−N</text>
<text top="518" left="304" width="393" height="15" font="4">λ then it must be a valid solution (since we set α &lt; 2</text>
<text top="515" left="697" width="20" height="11" font="5">−N</text>
<text top="518" left="719" width="91" height="15" font="4">λ). Now the</text>
<text top="539" left="108" width="58" height="15" font="4">gadgets:</text>
<text top="582" left="108" width="175" height="15" font="4">The Multiply Gadget</text>
<text top="582" left="300" width="510" height="15" font="4">Matrix multiplication can be encoded via a transducer (see Fig. 13(B)).</text>
<text top="602" left="108" width="702" height="15" font="4">Notice that the “outputs” in the above gadget have the probability of the matrix multiply for 2 × 2</text>
<text top="623" left="108" width="406" height="15" font="4">matrices. That is, given a matrix A and input nodes x</text>
<text top="628" left="514" width="6" height="11" font="5">1</text>
<text top="623" left="521" width="46" height="15" font="4">, . . . , x</text>
<text top="628" left="566" width="11" height="11" font="5">m</text>
<text top="623" left="578" width="151" height="15" font="4">, the output nodes y</text>
<text top="628" left="729" width="4" height="11" font="5">i</text>
<text top="623" left="741" width="69" height="15" font="4">above are</text>
<text top="643" left="108" width="100" height="15" font="4">such that P (y</text>
<text top="648" left="208" width="4" height="11" font="5">i</text>
<text top="643" left="213" width="24" height="15" font="4">) =</text>
<text top="638" left="258" width="11" height="11" font="5">m</text>
<text top="651" left="258" width="22" height="11" font="5">j=0</text>
<text top="643" left="284" width="12" height="15" font="4">A</text>
<text top="648" left="296" width="9" height="11" font="5">ij</text>
<text top="643" left="307" width="27" height="15" font="4">P (y</text>
<text top="648" left="334" width="5" height="11" font="5">j</text>
<text top="643" left="340" width="219" height="15" font="4">). Each edge is a single chunk.</text>
<text top="686" left="108" width="183" height="15" font="4">The Exclusive Gadget</text>
<text top="686" left="307" width="503" height="15" font="4">We illustrate the gadget for k = 2. We have two inputs x, x and two</text>
<text top="706" left="108" width="702" height="15" font="4">outputs u, u . Our goal is to ensure the property described by Eq. 2. The gadget is shown in</text>
<text top="727" left="108" width="702" height="15" font="4">Figure 13(C). The chunk here contains the entire gadget, since we can only select k paths, it is</text>
<text top="747" left="108" width="458" height="15" font="4">clear that each iteration of the gadget we get the property that:</text>
<text top="784" left="299" width="311" height="15" font="4">(P (u), P (u )) = (P (x), 0), (0, P (x )), (v, v )</text>
<text top="821" left="108" width="618" height="15" font="4">where v ≤ 0.5P (x) and v ≤ 0.5P (x ). Repeating the gadget m times (taking m s.t. 2</text>
<text top="817" left="726" width="21" height="11" font="5">−m</text>
<text top="820" left="753" width="26" height="15" font="4">≤ 2</text>
<text top="817" left="778" width="20" height="11" font="5">−N</text>
<text top="821" left="800" width="10" height="15" font="4">λ</text>
<text top="841" left="108" width="702" height="15" font="4">suﬃces). The property we need is that we only select one vector or the other – to ensure this we</text>
<text top="861" left="108" width="89" height="15" font="4">simply place</text>
<text top="857" left="211" width="4" height="11" font="5">l</text>
<text top="870" left="210" width="6" height="11" font="5">2</text>
<text top="861" left="230" width="228" height="15" font="4">gadgets: each one says that if u</text>
<text top="867" left="458" width="4" height="11" font="5">i</text>
<text top="861" left="468" width="79" height="15" font="4">&gt; 0 =⇒ v</text>
<text top="867" left="547" width="5" height="11" font="5">j</text>
<text top="861" left="559" width="251" height="15" font="4">= 0 (and vice versa). Observe that</text>
<text top="882" left="108" width="702" height="15" font="4">the resulting gadget is polynomial sized. After concatenating the gadgets together, the end result</text>
<text top="902" left="108" width="85" height="15" font="4">is either a 2</text>
<text top="898" left="193" width="20" height="11" font="5">−N</text>
<text top="902" left="215" width="16" height="15" font="4">M</text>
<text top="907" left="231" width="4" height="11" font="5">i</text>
<text top="912" left="235" width="9" height="8" font="6">N</text>
<text top="901" left="249" width="38" height="15" font="4">· · · M</text>
<text top="907" left="287" width="4" height="11" font="5">i</text>
<text top="911" left="291" width="4" height="8" font="6">i</text>
<text top="902" left="302" width="149" height="15" font="4">(a valid result) or its</text>
<text top="907" left="464" width="6" height="11" font="5">1</text>
<text top="902" left="476" width="172" height="15" font="4">norm is smaller than λ2</text>
<text top="898" left="648" width="20" height="11" font="5">−N</text>
<text top="902" left="676" width="134" height="15" font="4">(since it messes up</text>
<text top="922" left="108" width="222" height="15" font="4">on at least one of the gadgets).</text>
<text top="965" left="108" width="149" height="15" font="4">Proof of Hardness</text>
<text top="965" left="273" width="537" height="17" font="4">We now complete the proof by showing that a problem, called StocAut is</text>
<text top="986" left="108" width="702" height="17" font="4">NP-hard – for a ﬁxed size alphabet. Then, we show how to encode this in the Layout problem,</text>
<text top="1006" left="108" width="427" height="17" font="4">thereby proving that Layout is NP-hard for a ﬁxed size Σ.</text>
<text top="1069" left="451" width="16" height="15" font="4">28</text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="133" width="602" height="17" font="4">The GenAut Generic automaton problem is the following: Given vectors x, y ∈ Q</text>
<text top="110" left="735" width="7" height="11" font="5">k</text>
<text top="113" left="749" width="61" height="15" font="4">for some</text>
<text top="133" left="108" width="216" height="15" font="4">ﬁxed k and sets of matrices G</text>
<text top="139" left="324" width="6" height="11" font="5">1</text>
<text top="133" left="331" width="46" height="15" font="4">, . . . , G</text>
<text top="139" left="377" width="10" height="11" font="5">N</text>
<text top="133" left="395" width="95" height="15" font="4">where each G</text>
<text top="139" left="491" width="4" height="11" font="5">i</text>
<text top="133" left="502" width="308" height="15" font="4">for i = 1, . . . , N is a set of k × k matrices,</text>
<text top="154" left="108" width="529" height="15" font="4">the goal is to determine if there is a tuple of natural numbers ¯i such that:</text>
<text top="190" left="331" width="9" height="15" font="4">x</text>
<text top="187" left="340" width="7" height="11" font="5">T</text>
<text top="190" left="350" width="16" height="15" font="4">M</text>
<text top="196" left="366" width="4" height="11" font="5">i</text>
<text top="200" left="370" width="9" height="8" font="6">N</text>
<text top="190" left="384" width="38" height="15" font="4">· · · M</text>
<text top="196" left="422" width="4" height="11" font="5">i</text>
<text top="200" left="426" width="5" height="8" font="6">1</text>
<text top="190" left="433" width="107" height="15" font="4">y ≥ 0 where M</text>
<text top="196" left="540" width="4" height="11" font="5">i</text>
<text top="200" left="544" width="5" height="8" font="6">j</text>
<text top="190" left="556" width="25" height="15" font="4">∈ G</text>
<text top="196" left="581" width="5" height="11" font="5">j</text>
<text top="227" left="133" width="677" height="17" font="4">We are concerned with the related problem StocAut where all matrices and vectors in the</text>
<text top="248" left="108" width="702" height="15" font="4">problem are stochastic. A matrix is stochastic if all entries are positive, and its row sums and</text>
<text top="268" left="108" width="702" height="15" font="4">column sums are 1. A vector is stochastic if each entry is positive and its 1-norm (sum of entries)</text>
<text top="288" left="108" width="520" height="17" font="4">is 1. In StocAut the condition we want to check is slightly generalized:</text>
<text top="329" left="322" width="9" height="15" font="4">x</text>
<text top="325" left="331" width="7" height="11" font="5">T</text>
<text top="329" left="341" width="16" height="15" font="4">M</text>
<text top="334" left="357" width="4" height="11" font="5">i</text>
<text top="338" left="361" width="9" height="8" font="6">N</text>
<text top="328" left="375" width="38" height="15" font="4">· · · M</text>
<text top="334" left="413" width="4" height="11" font="5">i</text>
<text top="338" left="417" width="5" height="8" font="6">1</text>
<text top="329" left="424" width="39" height="15" font="4">y ≥ k</text>
<text top="325" left="463" width="16" height="11" font="5">−1</text>
<text top="329" left="486" width="63" height="15" font="4">where M</text>
<text top="334" left="549" width="4" height="11" font="5">i</text>
<text top="338" left="553" width="5" height="8" font="6">j</text>
<text top="328" left="565" width="25" height="15" font="4">∈ G</text>
<text top="334" left="590" width="5" height="11" font="5">j</text>
<text top="359" left="108" width="278" height="15" font="4">and k is the dimension of the problem.</text>
<text top="393" left="108" width="702" height="17" font="4">Lemma E.1. For ﬁxed dimension, k = 2, the GenAut problem is NP-Complete in N even if</text>
<text top="412" left="108" width="14" height="15" font="4">|G</text>
<text top="419" left="122" width="4" height="11" font="5">i</text>
<text top="412" left="127" width="158" height="15" font="4">| ≤ 2 for i = 1, . . . , N .</text>
<text top="447" left="108" width="374" height="15" font="4">Proof. This is shown by using the observation that x</text>
<text top="444" left="482" width="7" height="11" font="5">T</text>
<text top="443" left="496" width="8" height="15" font="4">¯</text>
<text top="447" left="492" width="318" height="15" font="4">Ay = 0 is NP-hard (exact sequence mortality</text>
<text top="467" left="108" width="181" height="15" font="4">problem [17]) and that x</text>
<text top="464" left="289" width="7" height="11" font="5">T</text>
<text top="463" left="304" width="8" height="15" font="4">¯</text>
<text top="467" left="299" width="184" height="15" font="4">Ay = 0 if and only if −x</text>
<text top="464" left="483" width="7" height="11" font="5">T</text>
<text top="463" left="497" width="8" height="15" font="4">¯</text>
<text top="467" left="493" width="30" height="15" font="4">Ayx</text>
<text top="464" left="523" width="7" height="11" font="5">T</text>
<text top="463" left="537" width="8" height="15" font="4">¯</text>
<text top="467" left="533" width="250" height="15" font="4">Ay ≥ 0. We then observe that yx</text>
<text top="464" left="783" width="7" height="11" font="5">T</text>
<text top="467" left="799" width="11" height="15" font="4">is</text>
<text top="487" left="108" width="639" height="15" font="4">such a matrix. More precisely, the following problem is NP-hard: Given a set of values s</text>
<text top="493" left="747" width="6" height="11" font="5">1</text>
<text top="487" left="754" width="44" height="15" font="4">, . . . , s</text>
<text top="493" left="798" width="10" height="11" font="5">N</text>
<text top="508" left="108" width="227" height="15" font="4">is there a set S ⊆ [N ] such that</text>
<text top="516" left="356" width="48" height="11" font="5">i=1,...,N</text>
<text top="508" left="409" width="8" height="15" font="4">s</text>
<text top="513" left="416" width="4" height="11" font="5">i</text>
<text top="508" left="426" width="147" height="15" font="4">= b for some ﬁxed b.</text>
<text top="557" left="399" width="32" height="15" font="4">H =</text>
<text top="547" left="455" width="8" height="15" font="4">0</text>
<text top="547" left="485" width="8" height="15" font="4">1</text>
<text top="567" left="455" width="8" height="15" font="4">0</text>
<text top="566" left="478" width="21" height="15" font="4">−1</text>
<text top="603" left="108" width="377" height="15" font="4">It is not hard to check that for any 2 × 2 A we have:</text>
<text top="648" left="351" width="59" height="15" font="4">HAH =</text>
<text top="638" left="435" width="8" height="15" font="4">0</text>
<text top="638" left="464" width="15" height="15" font="4">(a</text>
<text top="644" left="479" width="13" height="11" font="5">21</text>
<text top="637" left="496" width="25" height="15" font="4">− a</text>
<text top="644" left="521" width="13" height="11" font="5">22</text>
<text top="638" left="535" width="6" height="15" font="4">)</text>
<text top="658" left="435" width="8" height="15" font="4">0</text>
<text top="658" left="458" width="28" height="15" font="4">−(a</text>
<text top="664" left="485" width="13" height="11" font="5">21</text>
<text top="658" left="503" width="25" height="15" font="4">− a</text>
<text top="664" left="528" width="13" height="11" font="5">22</text>
<text top="658" left="541" width="6" height="15" font="4">)</text>
<text top="694" left="108" width="240" height="15" font="4">so that HAH = 0 if and only if a</text>
<text top="699" left="348" width="13" height="11" font="5">21</text>
<text top="694" left="366" width="26" height="15" font="4">= a</text>
<text top="699" left="391" width="13" height="11" font="5">22</text>
<text top="694" left="405" width="293" height="15" font="4">. Then, we create the following matrices:</text>
<text top="739" left="320" width="10" height="15" font="4">S</text>
<text top="745" left="330" width="4" height="11" font="5">i</text>
<text top="739" left="340" width="13" height="15" font="4">=</text>
<text top="729" left="377" width="8" height="15" font="4">1</text>
<text top="729" left="412" width="8" height="15" font="4">0</text>
<text top="750" left="377" width="8" height="15" font="4">0</text>
<text top="750" left="400" width="33" height="15" font="4">s(A)</text>
<text top="739" left="460" width="62" height="15" font="4">and B =</text>
<text top="729" left="547" width="8" height="15" font="4">1</text>
<text top="729" left="570" width="8" height="15" font="4">0</text>
<text top="750" left="547" width="7" height="15" font="4">b</text>
<text top="750" left="570" width="8" height="15" font="4">1</text>
<text top="786" left="108" width="136" height="15" font="4">Then, denote by I</text>
<text top="791" left="244" width="6" height="11" font="5">2</text>
<text top="786" left="258" width="277" height="15" font="4">the identity matrix. Then, we set: G</text>
<text top="791" left="535" width="6" height="11" font="5">0</text>
<text top="786" left="549" width="115" height="15" font="4">= {HB} and G</text>
<text top="791" left="665" width="4" height="11" font="5">i</text>
<text top="786" left="677" width="38" height="15" font="4">= {S</text>
<text top="791" left="715" width="4" height="11" font="5">i</text>
<text top="786" left="721" width="14" height="15" font="4">, I</text>
<text top="791" left="735" width="6" height="11" font="5">2</text>
<text top="785" left="742" width="68" height="15" font="4">} for i =</text>
<text top="806" left="108" width="345" height="15" font="4">1, . . . , N . The vectors are x = (1, 1) and y = x</text>
<text top="803" left="453" width="7" height="11" font="5">T</text>
<text top="806" left="463" width="347" height="15" font="4">. Then, applying the construction above proves</text>
<text top="826" left="108" width="71" height="15" font="4">the claim.</text>
<text top="860" left="133" width="677" height="15" font="4">We now apply Turakainen’s technique [50] (we learned of the technique from Blondel [16]) to</text>
<text top="881" left="108" width="702" height="15" font="4">transform the above matrices into slightly larger, but still constant dimensions, that are positive</text>
<text top="901" left="108" width="702" height="17" font="4">and then ﬁnally stochastic. First, we deﬁne a further restriction ZeroAut which requires that</text>
<text top="921" left="108" width="702" height="15" font="4">each matrix row/column sum is zero. We prove that this is still NP-complete over slightly larger</text>
<text top="942" left="108" width="65" height="15" font="4">matrices.</text>
<text top="975" left="108" width="546" height="17" font="4">Lemma E.2. For dimension k = 4, the ZeroAut problem is NP-complete.</text>
<text top="1069" left="451" width="16" height="15" font="4">29</text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="548" height="15" font="4">Proof. For each matrix M above we create a new 4 × 4 matrix N as follows:</text>
<text top="169" left="364" width="32" height="15" font="4">N =</text>
<text top="147" left="401" width="14" height="7" font="4"></text>
<text top="177" left="401" width="14" height="7" font="4"></text>
<text top="149" left="438" width="8" height="15" font="4">0</text>
<text top="146" left="488" width="8" height="15" font="4">¯</text>
<text top="149" left="488" width="8" height="15" font="4">0</text>
<text top="149" left="524" width="8" height="15" font="4">0</text>
<text top="169" left="426" width="33" height="15" font="4">α(x)</text>
<text top="169" left="484" width="16" height="15" font="4">M</text>
<text top="169" left="524" width="8" height="15" font="4">0</text>
<text top="190" left="423" width="9" height="15" font="4">β</text>
<text top="195" left="432" width="6" height="11" font="5">0</text>
<text top="190" left="439" width="22" height="15" font="4">(x)</text>
<text top="190" left="476" width="32" height="15" font="4">β(x)</text>
<text top="190" left="524" width="8" height="15" font="4">0</text>
<text top="147" left="539" width="14" height="7" font="4"></text>
<text top="177" left="539" width="14" height="7" font="4"></text>
<text top="216" left="108" width="702" height="15" font="4">we choose α, β to be vectors such that the row,column sums are zero. Then, we take the original</text>
<text top="236" left="108" width="104" height="15" font="4">x and create x</text>
<text top="242" left="212" width="6" height="11" font="5">1</text>
<text top="236" left="224" width="116" height="15" font="4">= (0, x, 0) and y</text>
<text top="242" left="339" width="6" height="11" font="5">1</text>
<text top="236" left="351" width="47" height="15" font="4">= (0, y</text>
<text top="233" left="399" width="7" height="11" font="5">T</text>
<text top="236" left="409" width="22" height="15" font="4">, 0)</text>
<text top="233" left="430" width="7" height="11" font="5">T</text>
<text top="236" left="440" width="321" height="15" font="4">. It follows then that for any set of matrices:</text>
<text top="267" left="400" width="9" height="15" font="4">x</text>
<text top="273" left="410" width="6" height="11" font="5">1</text>
<text top="263" left="422" width="8" height="15" font="4">¯</text>
<text top="267" left="417" width="23" height="15" font="4">N y</text>
<text top="264" left="440" width="7" height="11" font="5">T</text>
<text top="274" left="440" width="6" height="11" font="5">1</text>
<text top="267" left="455" width="52" height="15" font="4">= xM y</text>
<text top="264" left="508" width="7" height="11" font="5">T</text>
<text top="299" left="108" width="702" height="15" font="4">Thus, we have shown the stronger claim that all products are equal and so it directly follows that</text>
<text top="319" left="108" width="371" height="15" font="4">the corresponding decision problem is NP-complete.</text>
<text top="352" left="133" width="677" height="17" font="4">We deﬁne StocAut to be the restriction that all matrices are stochastic (as above) and we</text>
<text top="372" left="108" width="271" height="15" font="4">check a slightly generalized condition:</text>
<text top="403" left="380" width="9" height="15" font="4">x</text>
<text top="400" left="389" width="7" height="11" font="5">T</text>
<text top="403" left="399" width="16" height="15" font="4">M</text>
<text top="409" left="415" width="4" height="11" font="5">i</text>
<text top="413" left="419" width="9" height="8" font="6">N</text>
<text top="402" left="433" width="38" height="15" font="4">· · · M</text>
<text top="409" left="471" width="4" height="11" font="5">i</text>
<text top="413" left="475" width="5" height="8" font="6">1</text>
<text top="403" left="482" width="39" height="15" font="4">y ≥ k</text>
<text top="399" left="521" width="16" height="11" font="5">−1</text>
<text top="435" left="108" width="63" height="15" font="4">where M</text>
<text top="440" left="171" width="4" height="11" font="5">i</text>
<text top="444" left="176" width="5" height="8" font="6">j</text>
<text top="434" left="187" width="27" height="18" font="4">∈ R</text>
<text top="432" left="214" width="7" height="11" font="5">k</text>
<text top="435" left="222" width="5" height="15" font="4">.</text>
<text top="432" left="226" width="6" height="11" font="5">7</text>
<text top="464" left="108" width="546" height="17" font="4">Lemma E.3. The problem StocAut is NP-complete for matrices of 4 × 4.</text>
<text top="493" left="108" width="702" height="17" font="4">Proof. We ﬁrst show that we may assume that the vectors from the ZeroAut problem are stochas-</text>
<text top="513" left="108" width="260" height="17" font="4">tic. Let 1 be the all ones vector in R</text>
<text top="511" left="368" width="7" height="11" font="5">k</text>
<text top="513" left="375" width="435" height="15" font="4">. Observe that for any Z such that the row and column sums</text>
<text top="534" left="108" width="405" height="17" font="4">are 0 (as is each matrix in the input of ZeroAut) then:</text>
<text top="565" left="355" width="62" height="15" font="4">(x + α1)</text>
<text top="561" left="417" width="7" height="11" font="5">T</text>
<text top="565" left="427" width="105" height="15" font="4">Z(y + α1) = x</text>
<text top="561" left="532" width="7" height="11" font="5">T</text>
<text top="565" left="542" width="20" height="15" font="4">Zy</text>
<text top="596" left="108" width="181" height="15" font="4">for any value of α since 1</text>
<text top="593" left="289" width="7" height="11" font="5">T</text>
<text top="596" left="299" width="316" height="15" font="4">Z = Z1 = 0 the zero vector. Take α = | min</text>
<text top="602" left="615" width="4" height="11" font="5">i</text>
<text top="596" left="622" width="27" height="15" font="4">min</text>
<text top="602" left="650" width="33" height="11" font="5">z=x,y</text>
<text top="596" left="687" width="8" height="15" font="4">z</text>
<text top="602" left="695" width="4" height="11" font="5">i</text>
<text top="595" left="700" width="110" height="15" font="4">|. Thus, we can</text>
<text top="617" left="108" width="702" height="15" font="4">take x + α1 and y + α1 and preserve the product (which are both entry-wise positive). Then, we</text>
<text top="637" left="108" width="417" height="15" font="4">can scale both x + α1 and y + 1 by any positive constant:</text>
<text top="668" left="374" width="33" height="15" font="4">(αx)</text>
<text top="665" left="407" width="7" height="11" font="5">T</text>
<text top="668" left="416" width="96" height="15" font="4">Q(βy) = αβx</text>
<text top="665" left="513" width="7" height="11" font="5">T</text>
<text top="668" left="523" width="21" height="15" font="4">Qy</text>
<text top="700" left="108" width="701" height="15" font="4">So the sign is preserved if α, β &gt; 0. And we can assume without loss of generality that both x, y</text>
<text top="720" left="108" width="311" height="15" font="4">are stochastic by scaling by their respective</text>
<text top="725" left="431" width="6" height="11" font="5">1</text>
<text top="720" left="444" width="142" height="15" font="4">norms. (If either x</text>
<text top="728" left="594" width="6" height="11" font="5">1</text>
<text top="720" left="606" width="67" height="15" font="4">= 0 or y</text>
<text top="728" left="681" width="6" height="11" font="5">1</text>
<text top="720" left="693" width="117" height="15" font="4">= 0 the problem</text>
<text top="740" left="108" width="556" height="15" font="4">is trivially satisﬁed: the product is 0 and since they must be the zero vector.)</text>
<text top="761" left="133" width="677" height="15" font="4">We now show how to achieve the condition of stochastic matrices. First, we show how to achieve</text>
<text top="781" left="108" width="509" height="15" font="4">positive matrices. To do this, let Q be the all ones matrix of 4 × 4 (Q</text>
<text top="786" left="617" width="9" height="11" font="5">ij</text>
<text top="781" left="633" width="177" height="15" font="4">= 1). Then let λ ≥ 0 be</text>
<text top="801" left="108" width="702" height="15" font="4">such that for all matrices M + λQ ≥ 0 entrywise. Then, for each matrix M replace it with a new</text>
<text top="822" left="108" width="149" height="15" font="4">matrix N deﬁned as:</text>
<text top="842" left="379" width="68" height="15" font="4">N = (λk)</text>
<text top="837" left="447" width="16" height="11" font="5">−1</text>
<text top="842" left="466" width="73" height="15" font="4">(M + λQ)</text>
<text top="869" left="108" width="253" height="15" font="4">Since M Q = 0, the following holds:</text>
<text top="915" left="292" width="9" height="15" font="4">x</text>
<text top="911" left="301" width="7" height="11" font="5">T</text>
<text top="898" left="319" width="10" height="11" font="5">N</text>
<text top="938" left="314" width="21" height="11" font="5">i=1</text>
<text top="915" left="335" width="22" height="15" font="4">(M</text>
<text top="921" left="357" width="4" height="11" font="5">i</text>
<text top="915" left="366" width="107" height="15" font="4">+ λQ)y = (λk)</text>
<text top="911" left="473" width="21" height="11" font="5">−m</text>
<text top="915" left="495" width="9" height="15" font="4">x</text>
<text top="911" left="504" width="7" height="11" font="5">T</text>
<text top="898" left="521" width="10" height="11" font="5">N</text>
<text top="938" left="517" width="21" height="11" font="5">i=1</text>
<text top="915" left="540" width="16" height="15" font="4">M</text>
<text top="921" left="556" width="4" height="11" font="5">i</text>
<text top="915" left="561" width="38" height="15" font="4">y + x</text>
<text top="911" left="599" width="5" height="11" font="5">t</text>
<text top="915" left="604" width="21" height="15" font="4">Qy</text>
<text top="962" left="108" width="626" height="15" font="4">Thus, the original product is positive if and only if the modiﬁed product is bigger than k</text>
<text top="959" left="735" width="16" height="11" font="5">−1</text>
<text top="962" left="756" width="54" height="15" font="4">proving</text>
<text top="983" left="108" width="71" height="15" font="4">the claim.</text>
<text top="1007" left="127" width="5" height="8" font="6">7</text>
<text top="1009" left="133" width="677" height="12" font="7">Although unnecessary for our purpose we observe that with r repetitions of the problem, one can drive the</text>
<text top="1026" left="108" width="116" height="12" font="7">constant down to k</text>
<text top="1023" left="225" width="14" height="8" font="6">−r</text>
<text top="1026" left="240" width="229" height="12" font="7">. Thus, the constant here is arbitrary.</text>
<text top="1069" left="451" width="16" height="15" font="4">30</text>
</page>
<page number="31" position="absolute" top="0" left="0" height="1188" width="918">
<text top="110" left="108" width="15" height="19" font="3">F</text>
<text top="110" left="147" width="118" height="19" font="3">Algorithms</text>
<text top="163" left="108" width="86" height="15" font="4">Notations:</text>
<text top="183" left="108" width="312" height="17" font="4">G = (V, E, s, f, δ), the Staccato data SFA</text>
<text top="203" left="108" width="51" height="15" font="4">Q = (V</text>
<text top="209" left="159" width="10" height="11" font="5">Q</text>
<text top="203" left="169" width="19" height="15" font="4">, E</text>
<text top="209" left="189" width="10" height="11" font="5">Q</text>
<text top="203" left="199" width="15" height="15" font="4">, s</text>
<text top="209" left="214" width="10" height="11" font="5">Q</text>
<text top="203" left="225" width="18" height="15" font="4">, F</text>
<text top="209" left="243" width="10" height="11" font="5">Q</text>
<text top="203" left="254" width="15" height="15" font="4">, δ</text>
<text top="209" left="268" width="10" height="11" font="5">Q</text>
<text top="203" left="279" width="156" height="15" font="4">), the dictionary DFA</text>
<text top="224" left="108" width="58" height="15" font="4">D = {(f</text>
<text top="229" left="166" width="10" height="11" font="5">Q</text>
<text top="223" left="182" width="26" height="15" font="4">∈ F</text>
<text top="229" left="208" width="10" height="11" font="5">Q</text>
<text top="224" left="218" width="306" height="15" font="4">, term)}, the dictionary terms (hash table)</text>
<text top="244" left="108" width="99" height="15" font="4">AugSts = {(v</text>
<text top="250" left="207" width="10" height="11" font="5">Q</text>
<text top="243" left="222" width="25" height="15" font="4">∈ V</text>
<text top="250" left="247" width="10" height="11" font="5">Q</text>
<text top="244" left="258" width="331" height="15" font="4">, P ostingSet)}, augmented states (hash table)</text>
<text top="264" left="108" width="354" height="15" font="4">I = {(term, P ostingSet)}, the index (hash table)</text>
<text top="320" left="300" width="319" height="15" font="4">Figure 14: Notations for Algorithms 3 and 4</text>
<text top="357" left="133" width="677" height="15" font="4">Here we present the algorithm for constructing the inverted index for a given SFA, as referred</text>
<text top="378" left="108" width="422" height="15" font="4">to in Section 4. The notations used are listed in Figure 14.</text>
<text top="419" left="121" width="516" height="17" font="4">Algorithm 3: The dynamic program for Staccato index construction</text>
<text top="441" left="133" width="236" height="15" font="4">∀e ∈ E with parent edges e ∈ E</text>
<text top="461" left="164" width="17" height="15" font="4">∀f</text>
<text top="468" left="181" width="10" height="11" font="5">Q</text>
<text top="461" left="197" width="26" height="15" font="4">∈ F</text>
<text top="468" left="223" width="10" height="11" font="5">Q</text>
<text top="462" left="233" width="67" height="15" font="4">, AugSts</text>
<text top="467" left="301" width="19" height="11" font="5">par</text>
<text top="462" left="321" width="55" height="15" font="4">(f ) = ∪</text>
<text top="469" left="376" width="6" height="11" font="5">e</text>
<text top="462" left="387" width="55" height="15" font="4">AugSts</text>
<text top="468" left="441" width="6" height="11" font="5">e</text>
<text top="462" left="452" width="14" height="15" font="4">(f</text>
<text top="468" left="466" width="10" height="11" font="5">Q</text>
<text top="462" left="477" width="6" height="15" font="4">)</text>
<text top="482" left="170" width="55" height="15" font="4">AugSts</text>
<text top="488" left="224" width="6" height="11" font="5">e</text>
<text top="482" left="236" width="149" height="15" font="4">= RunDF A(AugSts</text>
<text top="488" left="385" width="19" height="11" font="5">par</text>
<text top="482" left="405" width="21" height="15" font="4">, e)</text>
<text top="503" left="133" width="76" height="15" font="4">otherwise,</text>
<text top="522" left="164" width="17" height="15" font="4">∀f</text>
<text top="529" left="181" width="10" height="11" font="5">Q</text>
<text top="522" left="197" width="26" height="15" font="4">∈ F</text>
<text top="529" left="223" width="10" height="11" font="5">Q</text>
<text top="523" left="233" width="67" height="15" font="4">, AugSts</text>
<text top="528" left="301" width="6" height="11" font="5">e</text>
<text top="523" left="307" width="14" height="15" font="4">(f</text>
<text top="529" left="322" width="10" height="11" font="5">Q</text>
<text top="523" left="333" width="38" height="15" font="4">) = φ</text>
<text top="572" left="133" width="677" height="15" font="4">The construction, presented in Algorithms 3 and 4, is similar to automata composition. The</text>
<text top="592" left="108" width="702" height="15" font="4">dictionary of terms is ﬁrst compressed into a trie-automaton [29] with multiple ﬁnal states, each</text>
<text top="612" left="108" width="702" height="15" font="4">corresponding to a term. Then, we walk through the data SFA (using a dynamic program on the</text>
<text top="633" left="108" width="702" height="15" font="4">SFA’s graph) and obtain the locations (postings) where any dictionary term starts. A key thing</text>
<text top="653" left="108" width="702" height="15" font="4">to note here is that terms can straddle mutiple SFA edges, which needs to be tracked. We pass</text>
<text top="673" left="108" width="702" height="15" font="4">information about such multi-edge terms through sets of ‘augmented states’, which store pairs of</text>
<text top="693" left="108" width="702" height="15" font="4">the query DFA’s state and possible postings. When the DFA reaches a ﬁnal state (i.e., a term has</text>
<text top="714" left="108" width="450" height="15" font="4">been seen), the corresponding postings are added to the index.</text>
<text top="762" left="108" width="19" height="19" font="3">G</text>
<text top="762" left="151" width="249" height="19" font="3">Implementation Details</text>
<text top="802" left="108" width="702" height="15" font="4">Each line of a document corresponds to one transducer, which is stored as such in the FullSFA</text>
<text top="822" left="108" width="702" height="15" font="4">approach. k-MAP stores a ranked list of strings for each line after inference on the transducer. In</text>
<text top="845" left="108" width="702" height="14" font="4">Staccato, each line corresponds to a graph of chunks, where each chunk is a ranked list of strings.</text>
<text top="863" left="108" width="702" height="15" font="4">These data are stored inside the RDBMS with a relational schema, shown in Table 5. There is</text>
<text top="883" left="108" width="702" height="15" font="4">one master table per dataset, which contains the auxiliary information like document name, line</text>
<text top="904" left="108" width="481" height="15" font="4">number, etc., and there are separate data tables for each approach.</text>
<text top="1069" left="451" width="16" height="15" font="4">31</text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1188" width="918">
<text top="252" left="121" width="249" height="15" font="4">Algorithm 4: RunDFA(AugSts,e)</text>
<text top="277" left="133" width="126" height="15" font="4">for each string p</text>
<text top="283" left="260" width="4" height="11" font="5">i</text>
<text top="277" left="271" width="168" height="15" font="4">on e, i = 0 to k − 1 do</text>
<text top="296" left="159" width="243" height="15" font="4">SO ← {(0, 0)} //{(State, Oﬀset)}</text>
<text top="316" left="159" width="150" height="15" font="4">for each character c</text>
<text top="322" left="309" width="5" height="11" font="5">j</text>
<text top="316" left="321" width="177" height="15" font="4">in p, j = 0 to |p| − 1 do</text>
<text top="334" left="184" width="74" height="15" font="4">N SO ← φ</text>
<text top="354" left="184" width="142" height="15" font="4">for each t ∈ SO do</text>
<text top="372" left="209" width="63" height="15" font="4">N xt ← δ</text>
<text top="378" left="272" width="10" height="11" font="5">Q</text>
<text top="372" left="282" width="70" height="15" font="4">(t.State, c</text>
<text top="378" left="353" width="5" height="11" font="5">j</text>
<text top="372" left="359" width="6" height="15" font="4">)</text>
<text top="393" left="209" width="121" height="15" font="4">if N xt = 0 then</text>
<text top="411" left="234" width="247" height="15" font="4">N SO ← N SO ∪ (N xt, t.Of f set)</text>
<text top="431" left="234" width="79" height="15" font="4">if N xt ∈ F</text>
<text top="437" left="313" width="10" height="11" font="5">Q</text>
<text top="431" left="329" width="37" height="15" font="4">then</text>
<text top="450" left="259" width="315" height="15" font="4">I(D(N xt)) ← I(D(N xt)) ∪ (e, i, t.Of f set)</text>
<text top="485" left="184" width="198" height="15" font="4">SO ← N SO ∪ {(0, j + 1)}</text>
<text top="509" left="159" width="150" height="15" font="4">for each r ∈ SO do</text>
<text top="530" left="184" width="141" height="15" font="4">if r.State = 0 then</text>
<text top="548" left="209" width="431" height="15" font="4">N AugSts(r.State) ← N AugSts(r.State) ∪ {(e, i, r.Of f set)}</text>
<text top="579" left="159" width="181" height="15" font="4">for each d ∈ AugSts do</text>
<text top="596" left="184" width="108" height="15" font="4">Cur ← d.State</text>
<text top="617" left="184" width="150" height="15" font="4">for each character c</text>
<text top="622" left="334" width="5" height="11" font="5">j</text>
<text top="617" left="346" width="177" height="15" font="4">in p, j = 0 to |p| − 1 do</text>
<text top="635" left="209" width="134" height="15" font="4">N xt ← δ(t.State, c</text>
<text top="640" left="343" width="5" height="11" font="5">j</text>
<text top="635" left="349" width="6" height="15" font="4">)</text>
<text top="655" left="209" width="121" height="15" font="4">if N xt = 0 then</text>
<text top="673" left="234" width="82" height="15" font="4">Cur = N xt</text>
<text top="693" left="234" width="79" height="15" font="4">if N xt ∈ F</text>
<text top="698" left="313" width="10" height="11" font="5">Q</text>
<text top="693" left="329" width="37" height="15" font="4">then</text>
<text top="713" left="259" width="219" height="15" font="4">for each l ∈ d.P ostingSet do</text>
<text top="732" left="284" width="232" height="15" font="4">I(D(N xt)) ← I(D(N xt)) ∪ {l}</text>
<text top="764" left="209" width="30" height="15" font="4">else</text>
<text top="782" left="234" width="242" height="15" font="4">break //DFA ‘dies’ reading string</text>
<text top="807" left="209" width="136" height="15" font="4">if j = |p| − 1 then</text>
<text top="827" left="234" width="219" height="15" font="4">for each l ∈ d.P ostingSet do</text>
<text top="845" left="259" width="290" height="15" font="4">N AugSts(Cur) ← N AugSts(Cur) ∪ {l}</text>
<text top="1069" left="451" width="16" height="15" font="4">32</text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1188" width="918">
<text top="122" left="134" width="69" height="15" font="4">Approach</text>
<text top="122" left="238" width="86" height="15" font="4">Table Name</text>
<text top="111" left="438" width="74" height="15" font="4">Attributes</text>
<text top="122" left="615" width="93" height="15" font="4">Primary Key</text>
<text top="132" left="353" width="41" height="15" font="4">Name</text>
<text top="132" left="478" width="37" height="15" font="4">Type</text>
<text top="177" left="166" width="5" height="15" font="4">-</text>
<text top="177" left="239" width="85" height="15" font="4">MasterData</text>
<text top="156" left="353" width="64" height="15" font="4">DataKey</text>
<text top="156" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="177" left="615" width="64" height="15" font="4">DataKey</text>
<text top="177" left="353" width="70" height="15" font="4">DocName</text>
<text top="177" left="478" width="112" height="15" font="4">VARCHAR(50)</text>
<text top="197" left="353" width="65" height="15" font="4">SFANum</text>
<text top="197" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="242" left="142" width="53" height="15" font="4">k-MAP</text>
<text top="242" left="240" width="82" height="15" font="4">kMAPData</text>
<text top="221" left="353" width="64" height="15" font="4">DataKey</text>
<text top="221" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="242" left="615" width="139" height="15" font="4">DataKey, LineNum</text>
<text top="242" left="353" width="66" height="15" font="4">LineNum</text>
<text top="242" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="262" left="353" width="35" height="15" font="4">Data</text>
<text top="262" left="478" width="47" height="15" font="4">TEXT</text>
<text top="282" left="353" width="61" height="15" font="4">LogProb</text>
<text top="282" left="478" width="64" height="15" font="4">FLOAT8</text>
<text top="317" left="139" width="58" height="15" font="4">FullSFA</text>
<text top="317" left="235" width="93" height="15" font="4">FullSFAData</text>
<text top="307" left="353" width="64" height="15" font="4">DataKey</text>
<text top="307" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="317" left="615" width="64" height="15" font="4">DataKey</text>
<text top="327" left="353" width="64" height="15" font="4">SFABlob</text>
<text top="327" left="478" width="31" height="15" font="4">OID</text>
<text top="416" left="127" width="77" height="14" font="4">Staccato</text>
<text top="392" left="233" width="96" height="15" font="4">StaccatoData</text>
<text top="352" left="353" width="64" height="15" font="4">DataKey</text>
<text top="352" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="384" left="615" width="159" height="15" font="4">DataKey, ChunkNum,</text>
<text top="404" left="615" width="66" height="15" font="4">LineNum</text>
<text top="372" left="353" width="82" height="15" font="4">ChunkNum</text>
<text top="372" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="392" left="353" width="66" height="15" font="4">LineNum</text>
<text top="392" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="413" left="353" width="35" height="15" font="4">Data</text>
<text top="413" left="478" width="47" height="15" font="4">TEXT</text>
<text top="433" left="353" width="61" height="15" font="4">LogProb</text>
<text top="433" left="478" width="64" height="15" font="4">FLOAT8</text>
<text top="464" left="228" width="107" height="15" font="4">StaccatoGraph</text>
<text top="453" left="353" width="64" height="15" font="4">DataKey</text>
<text top="453" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="463" left="615" width="64" height="15" font="4">DataKey</text>
<text top="474" left="353" width="79" height="15" font="4">GraphBlob</text>
<text top="474" left="478" width="31" height="15" font="4">OID</text>
<text top="508" left="166" width="5" height="15" font="4">-</text>
<text top="508" left="233" width="96" height="15" font="4">GroundTruth</text>
<text top="498" left="353" width="64" height="15" font="4">DataKey</text>
<text top="498" left="478" width="77" height="15" font="4">INTEGER</text>
<text top="508" left="615" width="64" height="15" font="4">DataKey</text>
<text top="519" left="353" width="35" height="15" font="4">Data</text>
<text top="519" left="478" width="47" height="15" font="4">TEXT</text>
<text top="553" left="285" width="348" height="15" font="4">Table 5: Relational schema for storing SFA data</text>
<text top="599" left="108" width="19" height="19" font="3">H</text>
<text top="599" left="151" width="242" height="19" font="3">Extended Experiments</text>
<text top="639" left="108" width="702" height="15" font="4">We now present more experimental results relating to runtimes and answer quality for the ﬁlescans,</text>
<text top="659" left="108" width="702" height="15" font="4">as well as some aspects of the inverted indexing. The queries we use are listed in Table 6, along</text>
<text top="680" left="108" width="565" height="15" font="4">with the number of ground truth answers for each on their respective datasets.</text>
<text top="722" left="108" width="31" height="16" font="1">H.1</text>
<text top="722" left="160" width="176" height="16" font="1">Recall and Runtime</text>
<text top="754" left="108" width="702" height="15" font="4">Table 7 presents the precision and recall results of the queries, while Table 8 presents the respective</text>
<text top="775" left="108" width="702" height="15" font="4">runtime results. The values of the parameters are m = 40, k = 50 and N umAns = 100. As in</text>
<text top="795" left="108" width="702" height="17" font="4">Section 5, here too we see that Staccato lies between k-MAP and FullSFA on both recall and</text>
<text top="815" left="108" width="702" height="15" font="4">runtime. The precision too exhibits a similar trend. Again, the FullSFA approach is upto three</text>
<text top="836" left="108" width="702" height="15" font="4">orders of magnitude slower than MAP but achieves perfect recall on most queries, though precision</text>
<text top="856" left="108" width="702" height="17" font="4">is lower. Interestingly, on some queries in the DB dataset (e.g., DB3 and DB6), Staccato recall is</text>
<text top="876" left="108" width="702" height="15" font="4">close to 1.0 while the runtime is about two orders of magnitude lower than FullSFA. Another thing</text>
<text top="897" left="108" width="702" height="17" font="4">to note is that the recall increase for k-MAP and Staccato (over MAP) is more pronounced in</text>
<text top="917" left="108" width="702" height="15" font="4">DB and LT than CA. We can also see that keyword queries can have lower recall than some regex</text>
<text top="937" left="108" width="205" height="15" font="4">queries (e.g., LT3 and DB2).</text>
<text top="1069" left="451" width="16" height="15" font="4">33</text>
</page>
<page number="34" position="absolute" top="0" left="0" height="1188" width="918">
<text top="329" left="276" width="55" height="15" font="4">Dataset</text>
<text top="329" left="350" width="39" height="15" font="4">S.No.</text>
<text top="329" left="453" width="44" height="15" font="4">Query</text>
<text top="329" left="562" width="80" height="15" font="4"># in Truth</text>
<text top="415" left="292" width="24" height="15" font="4">CA</text>
<text top="354" left="365" width="8" height="15" font="4">1</text>
<text top="354" left="443" width="64" height="15" font="4">Attorney</text>
<text top="354" left="594" width="16" height="15" font="4">28</text>
<text top="374" left="365" width="8" height="15" font="4">2</text>
<text top="374" left="432" width="87" height="15" font="4">Commission</text>
<text top="374" left="590" width="25" height="15" font="4">128</text>
<text top="394" left="365" width="8" height="15" font="4">3</text>
<text top="394" left="432" width="87" height="15" font="4">employment</text>
<text top="394" left="594" width="16" height="15" font="4">73</text>
<text top="415" left="365" width="8" height="15" font="4">4</text>
<text top="415" left="442" width="67" height="15" font="4">President</text>
<text top="415" left="594" width="16" height="15" font="4">14</text>
<text top="435" left="365" width="8" height="15" font="4">5</text>
<text top="435" left="427" width="98" height="15" font="4">United States</text>
<text top="435" left="594" width="16" height="15" font="4">52</text>
<text top="455" left="365" width="8" height="15" font="4">6</text>
<text top="455" left="407" width="137" height="15" font="4">Public Law (8|9)\d</text>
<text top="455" left="594" width="16" height="15" font="4">55</text>
<text top="476" left="365" width="8" height="15" font="4">7</text>
<text top="476" left="420" width="111" height="15" font="4">U.S.C. 2\d\d\d</text>
<text top="476" left="594" width="16" height="15" font="4">25</text>
<text top="561" left="292" width="24" height="15" font="4">DB</text>
<text top="500" left="365" width="8" height="15" font="4">1</text>
<text top="500" left="444" width="62" height="15" font="4">accuracy</text>
<text top="500" left="594" width="16" height="15" font="4">65</text>
<text top="520" left="365" width="8" height="15" font="4">2</text>
<text top="520" left="439" width="74" height="15" font="4">conﬁdence</text>
<text top="520" left="594" width="16" height="15" font="4">36</text>
<text top="541" left="365" width="8" height="15" font="4">3</text>
<text top="541" left="444" width="63" height="15" font="4">database</text>
<text top="541" left="594" width="16" height="15" font="4">43</text>
<text top="561" left="365" width="8" height="15" font="4">4</text>
<text top="561" left="451" width="49" height="15" font="4">lineage</text>
<text top="561" left="594" width="16" height="15" font="4">83</text>
<text top="581" left="365" width="8" height="15" font="4">5</text>
<text top="581" left="461" width="30" height="15" font="4">Trio</text>
<text top="581" left="594" width="16" height="15" font="4">68</text>
<text top="602" left="365" width="8" height="15" font="4">6</text>
<text top="602" left="437" width="78" height="15" font="4">Sec(\x) ∗ d</text>
<text top="602" left="594" width="16" height="15" font="4">33</text>
<text top="622" left="365" width="8" height="15" font="4">7</text>
<text top="621" left="432" width="86" height="15" font="4">\x\x\x\d\d</text>
<text top="622" left="594" width="16" height="15" font="4">47</text>
<text top="708" left="293" width="21" height="15" font="4">LT</text>
<text top="647" left="365" width="8" height="15" font="4">1</text>
<text top="647" left="435" width="80" height="15" font="4">Brinkmann</text>
<text top="647" left="594" width="16" height="15" font="4">92</text>
<text top="667" left="365" width="8" height="15" font="4">2</text>
<text top="667" left="455" width="41" height="15" font="4">Hitler</text>
<text top="667" left="594" width="16" height="15" font="4">12</text>
<text top="687" left="365" width="8" height="15" font="4">3</text>
<text top="687" left="442" width="67" height="15" font="4">Jonathan</text>
<text top="687" left="594" width="16" height="15" font="4">18</text>
<text top="708" left="365" width="8" height="15" font="4">4</text>
<text top="708" left="446" width="59" height="15" font="4">Kerouac</text>
<text top="708" left="594" width="16" height="15" font="4">21</text>
<text top="728" left="365" width="8" height="15" font="4">5</text>
<text top="728" left="432" width="86" height="15" font="4">Third Reich</text>
<text top="728" left="598" width="8" height="15" font="4">7</text>
<text top="748" left="365" width="8" height="15" font="4">6</text>
<text top="748" left="428" width="96" height="15" font="4">19\d\d, \d\d</text>
<text top="748" left="594" width="16" height="15" font="4">32</text>
<text top="768" left="365" width="8" height="15" font="4">7</text>
<text top="768" left="427" width="96" height="15" font="4">spontan(\x)∗</text>
<text top="768" left="594" width="16" height="15" font="4">99</text>
<text top="803" left="299" width="315" height="15" font="4">Table 6: Queries and ground truth numbers</text>
<text top="1069" left="451" width="16" height="15" font="4">34</text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1188" width="918">
<text top="325" left="258" width="44" height="15" font="4">Query</text>
<text top="315" left="458" width="69" height="15" font="4">Approach</text>
<text top="335" left="339" width="38" height="15" font="4">MAP</text>
<text top="335" left="416" width="53" height="15" font="4">k-MAP</text>
<text top="335" left="499" width="58" height="15" font="4">FullSFA</text>
<text top="338" left="583" width="77" height="14" font="4">Staccato</text>
<text top="360" left="264" width="32" height="15" font="4">CA1</text>
<text top="360" left="325" width="66" height="15" font="4">1.00/0.93</text>
<text top="360" left="410" width="66" height="15" font="4">1.00/0.93</text>
<text top="360" left="494" width="66" height="15" font="4">0.28/1.00</text>
<text top="360" left="588" width="66" height="15" font="4">0.87/0.96</text>
<text top="381" left="264" width="32" height="15" font="4">CA2</text>
<text top="381" left="325" width="66" height="15" font="4">1.00/0.78</text>
<text top="381" left="410" width="66" height="15" font="4">1.00/0.78</text>
<text top="381" left="494" width="66" height="15" font="4">1.00/0.78</text>
<text top="381" left="588" width="66" height="15" font="4">1.00/0.78</text>
<text top="402" left="264" width="32" height="15" font="4">CA3</text>
<text top="402" left="325" width="66" height="15" font="4">1.00/0.90</text>
<text top="402" left="410" width="66" height="15" font="4">1.00/0.90</text>
<text top="402" left="494" width="66" height="15" font="4">0.73/1.00</text>
<text top="402" left="588" width="66" height="15" font="4">0.97/0.93</text>
<text top="423" left="264" width="32" height="15" font="4">CA4</text>
<text top="423" left="325" width="66" height="15" font="4">1.00/0.79</text>
<text top="423" left="410" width="66" height="15" font="4">1.00/0.79</text>
<text top="423" left="494" width="66" height="15" font="4">0.14/1.00</text>
<text top="423" left="588" width="66" height="15" font="4">0.85/0.79</text>
<text top="444" left="264" width="32" height="15" font="4">CA5</text>
<text top="444" left="325" width="66" height="15" font="4">1.00/0.77</text>
<text top="444" left="410" width="66" height="15" font="4">1.00/0.79</text>
<text top="444" left="494" width="66" height="15" font="4">0.52/1.00</text>
<text top="444" left="588" width="66" height="15" font="4">1.00/0.88</text>
<text top="465" left="264" width="32" height="15" font="4">CA6</text>
<text top="465" left="325" width="66" height="15" font="4">1.00/0.87</text>
<text top="465" left="410" width="66" height="15" font="4">1.00/0.96</text>
<text top="465" left="494" width="66" height="15" font="4">0.55/1.00</text>
<text top="465" left="588" width="66" height="15" font="4">1.00/0.98</text>
<text top="486" left="264" width="32" height="15" font="4">CA7</text>
<text top="486" left="325" width="66" height="15" font="4">1.00/0.28</text>
<text top="486" left="410" width="66" height="15" font="4">1.00/0.52</text>
<text top="486" left="494" width="66" height="15" font="4">0.25/1.00</text>
<text top="486" left="588" width="66" height="15" font="4">0.50/0.80</text>
<text top="510" left="264" width="32" height="15" font="4">DB1</text>
<text top="510" left="325" width="66" height="15" font="4">1.00/0.58</text>
<text top="510" left="410" width="66" height="15" font="4">0.98/0.93</text>
<text top="510" left="494" width="66" height="15" font="4">0.65/1.00</text>
<text top="510" left="588" width="66" height="15" font="4">0.95/0.97</text>
<text top="531" left="264" width="32" height="15" font="4">DB2</text>
<text top="531" left="325" width="66" height="15" font="4">0.00/0.00</text>
<text top="531" left="410" width="66" height="15" font="4">0.87/0.19</text>
<text top="531" left="494" width="66" height="15" font="4">0.36/1.00</text>
<text top="531" left="588" width="66" height="15" font="4">0.90/0.53</text>
<text top="552" left="264" width="32" height="15" font="4">DB3</text>
<text top="552" left="325" width="66" height="15" font="4">0.85/0.67</text>
<text top="552" left="410" width="66" height="15" font="4">0.87/0.79</text>
<text top="552" left="494" width="66" height="15" font="4">0.43/1.00</text>
<text top="552" left="588" width="66" height="15" font="4">0.90/1.00</text>
<text top="573" left="264" width="32" height="15" font="4">DB4</text>
<text top="573" left="325" width="66" height="15" font="4">0.97/0.91</text>
<text top="573" left="410" width="66" height="15" font="4">0.96/0.93</text>
<text top="573" left="494" width="66" height="15" font="4">0.82/0.99</text>
<text top="573" left="588" width="66" height="15" font="4">0.85/0.95</text>
<text top="594" left="264" width="32" height="15" font="4">DB5</text>
<text top="594" left="325" width="66" height="15" font="4">0.93/0.75</text>
<text top="594" left="410" width="66" height="15" font="4">0.90/0.95</text>
<text top="594" left="494" width="66" height="15" font="4">0.67/0.99</text>
<text top="594" left="588" width="66" height="15" font="4">0.79/0.96</text>
<text top="615" left="264" width="32" height="15" font="4">DB6</text>
<text top="615" left="325" width="66" height="15" font="4">0.96/0.76</text>
<text top="615" left="410" width="66" height="15" font="4">0.96/0.81</text>
<text top="615" left="494" width="66" height="15" font="4">0.33/1.00</text>
<text top="615" left="588" width="66" height="15" font="4">0.40/0.96</text>
<text top="636" left="264" width="32" height="15" font="4">DB7</text>
<text top="636" left="325" width="66" height="15" font="4">0.91/0.85</text>
<text top="636" left="410" width="66" height="15" font="4">0.73/0.89</text>
<text top="636" left="494" width="66" height="15" font="4">0.44/0.94</text>
<text top="636" left="588" width="66" height="15" font="4">0.42/0.89</text>
<text top="660" left="266" width="29" height="15" font="4">LT1</text>
<text top="660" left="325" width="66" height="15" font="4">0.96/0.87</text>
<text top="660" left="410" width="66" height="15" font="4">0.96/0.90</text>
<text top="660" left="494" width="66" height="15" font="4">0.92/1.00</text>
<text top="660" left="588" width="66" height="15" font="4">0.94/0.91</text>
<text top="681" left="266" width="29" height="15" font="4">LT2</text>
<text top="681" left="325" width="66" height="15" font="4">1.00/0.92</text>
<text top="681" left="410" width="66" height="15" font="4">1.00/1.00</text>
<text top="681" left="494" width="66" height="15" font="4">0.12/1.00</text>
<text top="681" left="588" width="66" height="15" font="4">0.12/1.00</text>
<text top="702" left="266" width="29" height="15" font="4">LT3</text>
<text top="702" left="325" width="66" height="15" font="4">1.00/0.11</text>
<text top="702" left="410" width="66" height="15" font="4">1.00/0.17</text>
<text top="702" left="494" width="66" height="15" font="4">0.18/1.00</text>
<text top="702" left="588" width="66" height="15" font="4">0.94/0.83</text>
<text top="723" left="266" width="29" height="15" font="4">LT4</text>
<text top="723" left="325" width="66" height="15" font="4">0.81/0.62</text>
<text top="723" left="410" width="66" height="15" font="4">0.86/0.90</text>
<text top="723" left="494" width="66" height="15" font="4">0.21/1.00</text>
<text top="723" left="588" width="66" height="15" font="4">0.74/0.95</text>
<text top="744" left="266" width="29" height="15" font="4">LT5</text>
<text top="744" left="325" width="66" height="15" font="4">1.00/0.29</text>
<text top="744" left="410" width="66" height="15" font="4">1.00/1.00</text>
<text top="744" left="494" width="66" height="15" font="4">0.07/1.00</text>
<text top="744" left="588" width="66" height="15" font="4">1.00/1.00</text>
<text top="765" left="266" width="29" height="15" font="4">LT6</text>
<text top="765" left="325" width="66" height="15" font="4">0.77/0.65</text>
<text top="765" left="410" width="66" height="15" font="4">0.76/0.67</text>
<text top="765" left="494" width="66" height="15" font="4">0.31/0.97</text>
<text top="765" left="588" width="66" height="15" font="4">0.26/0.81</text>
<text top="786" left="266" width="29" height="15" font="4">LT7</text>
<text top="786" left="325" width="66" height="15" font="4">0.84/0.88</text>
<text top="786" left="410" width="66" height="15" font="4">0.83/0.88</text>
<text top="786" left="494" width="66" height="15" font="4">0.83/0.88</text>
<text top="786" left="588" width="66" height="15" font="4">0.83/0.88</text>
<text top="820" left="328" width="257" height="15" font="4">Table 7: Precision and recall results</text>
<text top="1069" left="451" width="16" height="15" font="4">35</text>
</page>
<page number="36" position="absolute" top="0" left="0" height="1188" width="918">
<text top="325" left="283" width="44" height="15" font="4">Query</text>
<text top="315" left="458" width="69" height="15" font="4">Approach</text>
<text top="335" left="350" width="38" height="15" font="4">MAP</text>
<text top="335" left="407" width="53" height="15" font="4">k-MAP</text>
<text top="335" left="478" width="58" height="15" font="4">FullSFA</text>
<text top="338" left="558" width="77" height="14" font="4">Staccato</text>
<text top="360" left="289" width="32" height="15" font="4">CA1</text>
<text top="360" left="354" width="29" height="15" font="4">0.17</text>
<text top="360" left="419" width="29" height="15" font="4">0.82</text>
<text top="360" left="488" width="37" height="15" font="4">81.54</text>
<text top="360" left="582" width="29" height="15" font="4">4.38</text>
<text top="381" left="289" width="32" height="15" font="4">CA2</text>
<text top="381" left="354" width="29" height="15" font="4">0.17</text>
<text top="381" left="419" width="29" height="15" font="4">0.96</text>
<text top="381" left="488" width="37" height="15" font="4">91.84</text>
<text top="381" left="582" width="29" height="15" font="4">4.93</text>
<text top="402" left="289" width="32" height="15" font="4">CA3</text>
<text top="402" left="354" width="29" height="15" font="4">0.17</text>
<text top="402" left="419" width="29" height="15" font="4">0.96</text>
<text top="402" left="488" width="37" height="15" font="4">91.85</text>
<text top="402" left="582" width="29" height="15" font="4">4.94</text>
<text top="423" left="289" width="32" height="15" font="4">CA4</text>
<text top="423" left="354" width="29" height="15" font="4">0.17</text>
<text top="423" left="419" width="29" height="15" font="4">0.89</text>
<text top="423" left="488" width="37" height="15" font="4">86.72</text>
<text top="423" left="582" width="29" height="15" font="4">4.63</text>
<text top="444" left="289" width="32" height="15" font="4">CA5</text>
<text top="444" left="354" width="29" height="15" font="4">0.18</text>
<text top="444" left="419" width="29" height="15" font="4">1.16</text>
<text top="444" left="484" width="45" height="15" font="4">106.17</text>
<text top="444" left="582" width="29" height="15" font="4">5.97</text>
<text top="465" left="289" width="32" height="15" font="4">CA6</text>
<text top="465" left="354" width="29" height="15" font="4">0.18</text>
<text top="465" left="419" width="29" height="15" font="4">1.17</text>
<text top="465" left="484" width="45" height="15" font="4">125.63</text>
<text top="465" left="582" width="29" height="15" font="4">5.98</text>
<text top="486" left="289" width="32" height="15" font="4">CA7</text>
<text top="486" left="354" width="29" height="15" font="4">0.18</text>
<text top="486" left="419" width="29" height="15" font="4">1.05</text>
<text top="486" left="484" width="45" height="15" font="4">150.35</text>
<text top="486" left="582" width="29" height="15" font="4">5.40</text>
<text top="510" left="289" width="32" height="15" font="4">DB1</text>
<text top="510" left="354" width="29" height="15" font="4">0.07</text>
<text top="510" left="419" width="29" height="15" font="4">0.44</text>
<text top="510" left="488" width="37" height="15" font="4">56.42</text>
<text top="510" left="582" width="29" height="15" font="4">1.61</text>
<text top="531" left="289" width="32" height="15" font="4">DB2</text>
<text top="531" left="354" width="29" height="15" font="4">0.07</text>
<text top="531" left="419" width="29" height="15" font="4">0.51</text>
<text top="531" left="488" width="37" height="15" font="4">62.89</text>
<text top="531" left="582" width="29" height="15" font="4">1.81</text>
<text top="552" left="289" width="32" height="15" font="4">DB3</text>
<text top="552" left="354" width="29" height="15" font="4">0.07</text>
<text top="552" left="419" width="29" height="15" font="4">0.43</text>
<text top="552" left="488" width="37" height="15" font="4">54.92</text>
<text top="552" left="582" width="29" height="15" font="4">1.59</text>
<text top="573" left="289" width="32" height="15" font="4">DB4</text>
<text top="573" left="354" width="29" height="15" font="4">0.07</text>
<text top="573" left="419" width="29" height="15" font="4">0.40</text>
<text top="573" left="488" width="37" height="15" font="4">51.45</text>
<text top="573" left="582" width="29" height="15" font="4">1.48</text>
<text top="594" left="289" width="32" height="15" font="4">DB5</text>
<text top="594" left="354" width="29" height="15" font="4">0.07</text>
<text top="594" left="419" width="29" height="15" font="4">0.42</text>
<text top="594" left="488" width="37" height="15" font="4">40.72</text>
<text top="594" left="582" width="29" height="15" font="4">1.21</text>
<text top="615" left="289" width="32" height="15" font="4">DB6</text>
<text top="615" left="354" width="29" height="15" font="4">0.07</text>
<text top="615" left="419" width="29" height="15" font="4">0.35</text>
<text top="615" left="484" width="45" height="15" font="4">619.31</text>
<text top="615" left="582" width="29" height="15" font="4">1.39</text>
<text top="636" left="289" width="32" height="15" font="4">DB7</text>
<text top="636" left="354" width="29" height="15" font="4">0.07</text>
<text top="636" left="419" width="29" height="15" font="4">0.31</text>
<text top="636" left="480" width="54" height="15" font="4">1738.78</text>
<text top="636" left="582" width="29" height="15" font="4">1.37</text>
<text top="660" left="291" width="29" height="15" font="4">LT1</text>
<text top="660" left="354" width="29" height="15" font="4">0.14</text>
<text top="660" left="419" width="29" height="15" font="4">0.73</text>
<text top="660" left="488" width="37" height="15" font="4">83.78</text>
<text top="660" left="582" width="29" height="15" font="4">3.27</text>
<text top="681" left="291" width="29" height="15" font="4">LT2</text>
<text top="681" left="354" width="29" height="15" font="4">0.13</text>
<text top="681" left="419" width="29" height="15" font="4">0.59</text>
<text top="681" left="488" width="37" height="15" font="4">69.68</text>
<text top="681" left="582" width="29" height="15" font="4">2.72</text>
<text top="702" left="291" width="29" height="15" font="4">LT3</text>
<text top="702" left="354" width="29" height="15" font="4">0.14</text>
<text top="702" left="419" width="29" height="15" font="4">0.71</text>
<text top="702" left="488" width="37" height="15" font="4">79.76</text>
<text top="702" left="582" width="29" height="15" font="4">3.10</text>
<text top="723" left="291" width="29" height="15" font="4">LT4</text>
<text top="723" left="354" width="29" height="15" font="4">0.14</text>
<text top="723" left="419" width="29" height="15" font="4">0.65</text>
<text top="723" left="488" width="37" height="15" font="4">74.58</text>
<text top="723" left="582" width="29" height="15" font="4">2.90</text>
<text top="744" left="291" width="29" height="15" font="4">LT5</text>
<text top="744" left="354" width="29" height="15" font="4">0.14</text>
<text top="744" left="419" width="29" height="15" font="4">0.85</text>
<text top="744" left="488" width="37" height="15" font="4">93.35</text>
<text top="744" left="582" width="29" height="15" font="4">3.72</text>
<text top="765" left="291" width="29" height="15" font="4">LT6</text>
<text top="765" left="354" width="29" height="15" font="4">0.14</text>
<text top="765" left="419" width="29" height="15" font="4">1.02</text>
<text top="765" left="484" width="45" height="15" font="4">155.45</text>
<text top="765" left="582" width="29" height="15" font="4">4.52</text>
<text top="786" left="291" width="29" height="15" font="4">LT7</text>
<text top="786" left="354" width="29" height="15" font="4">0.15</text>
<text top="786" left="419" width="29" height="15" font="4">1.00</text>
<text top="786" left="484" width="45" height="15" font="4">887.19</text>
<text top="786" left="582" width="29" height="15" font="4">4.23</text>
<text top="820" left="271" width="369" height="15" font="4">Table 8: Runtime results. Runtimes are in seconds.</text>
<text top="1069" left="451" width="16" height="15" font="4">36</text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="45" size="7" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="46" size="8" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="47" size="8" family="Times" color="#3b3b3b"/>
	<fontspec id="48" size="5" family="Helvetica" color="#3b3b3b"/>
<text top="112" left="108" width="31" height="16" font="1">H.2</text>
<text top="112" left="160" width="210" height="16" font="1">Precision and F-1 Score</text>
<text top="144" left="108" width="702" height="15" font="4">Though our focus is on recall-sensitive applications, we also study how the precision is aﬀected</text>
<text top="164" left="108" width="702" height="15" font="4">when we vary m and k. For the same queries and parameter setting as in Figure 6, we plot the</text>
<text top="185" left="108" width="552" height="15" font="4">precision and F-1 score of the answers obtained. Figure 15 shows the results.</text>
<text top="532" left="265" width="2" height="9" font="23"> </text>
<text top="532" left="458" width="2" height="9" font="23"> </text>
<text top="362" left="272" width="22" height="9" font="45">1 10</text>
<text top="362" left="312" width="11" height="9" font="45">25</text>
<text top="362" left="356" width="11" height="9" font="45">50</text>
<text top="362" left="399" width="11" height="9" font="45">75</text>
<text top="362" left="439" width="16" height="9" font="45">100</text>
<text top="351" left="265" width="5" height="9" font="45">0</text>
<text top="326" left="257" width="13" height="9" font="45">0.2</text>
<text top="300" left="257" width="13" height="9" font="45">0.4</text>
<text top="274" left="257" width="13" height="9" font="45">0.6</text>
<text top="249" left="257" width="13" height="9" font="45">0.8</text>
<text top="223" left="265" width="5" height="9" font="45">1</text>
<text top="376" left="308" width="109" height="10" font="46">k - # Paths Parameter</text>
<text top="316" left="254" width="0" height="10" font="46">P</text>
<text top="309" left="254" width="0" height="10" font="46">re</text>
<text top="299" left="254" width="0" height="10" font="46">c</text>
<text top="293" left="254" width="0" height="10" font="46">is</text>
<text top="284" left="254" width="0" height="10" font="46">io</text>
<text top="274" left="254" width="0" height="10" font="46">n</text>
<text top="344" left="433" width="13" height="12" font="47">A1</text>
<text top="344" left="649" width="13" height="12" font="47">A2</text>
<text top="362" left="488" width="22" height="9" font="45">1 10</text>
<text top="362" left="528" width="11" height="9" font="45">25</text>
<text top="362" left="572" width="11" height="9" font="45">50</text>
<text top="362" left="615" width="11" height="9" font="45">75</text>
<text top="362" left="655" width="16" height="9" font="45">100</text>
<text top="351" left="481" width="5" height="9" font="45">0</text>
<text top="326" left="473" width="13" height="9" font="45">0.2</text>
<text top="300" left="473" width="13" height="9" font="45">0.4</text>
<text top="274" left="473" width="13" height="9" font="45">0.6</text>
<text top="249" left="473" width="13" height="9" font="45">0.8</text>
<text top="223" left="481" width="5" height="9" font="45">1</text>
<text top="376" left="524" width="109" height="10" font="46">k - # Paths Parameter</text>
<text top="318" left="470" width="0" height="10" font="46">F</text>
<text top="311" left="470" width="0" height="10" font="46">-1</text>
<text top="301" left="470" width="0" height="10" font="46"> S</text>
<text top="291" left="470" width="0" height="10" font="46">c</text>
<text top="285" left="470" width="0" height="10" font="46">o</text>
<text top="279" left="470" width="0" height="10" font="46">re</text>
<text top="535" left="272" width="22" height="9" font="45">1 10</text>
<text top="535" left="312" width="11" height="9" font="45">25</text>
<text top="535" left="356" width="11" height="9" font="45">50</text>
<text top="535" left="399" width="11" height="9" font="45">75</text>
<text top="535" left="439" width="16" height="9" font="45">100</text>
<text top="524" left="265" width="5" height="9" font="45">0</text>
<text top="499" left="257" width="13" height="9" font="45">0.2</text>
<text top="473" left="257" width="13" height="9" font="45">0.4</text>
<text top="447" left="257" width="13" height="9" font="45">0.6</text>
<text top="422" left="257" width="13" height="9" font="45">0.8</text>
<text top="396" left="265" width="5" height="9" font="45">1</text>
<text top="549" left="308" width="109" height="10" font="46">k - # Paths Parameter</text>
<text top="489" left="254" width="0" height="10" font="46">P</text>
<text top="482" left="254" width="0" height="10" font="46">re</text>
<text top="472" left="254" width="0" height="10" font="46">c</text>
<text top="466" left="254" width="0" height="10" font="46">is</text>
<text top="457" left="254" width="0" height="10" font="46">io</text>
<text top="447" left="254" width="0" height="10" font="46">n</text>
<text top="535" left="488" width="22" height="9" font="45">1 10</text>
<text top="535" left="528" width="11" height="9" font="45">25</text>
<text top="535" left="572" width="11" height="9" font="45">50</text>
<text top="535" left="615" width="11" height="9" font="45">75</text>
<text top="535" left="655" width="16" height="9" font="45">100</text>
<text top="524" left="481" width="5" height="9" font="45">0</text>
<text top="499" left="473" width="13" height="9" font="45">0.2</text>
<text top="473" left="473" width="13" height="9" font="45">0.4</text>
<text top="447" left="473" width="13" height="9" font="45">0.6</text>
<text top="422" left="473" width="13" height="9" font="45">0.8</text>
<text top="396" left="481" width="5" height="9" font="45">1</text>
<text top="549" left="524" width="109" height="10" font="46">k - # Paths Parameter</text>
<text top="489" left="470" width="0" height="10" font="46">F</text>
<text top="482" left="470" width="0" height="10" font="46">-1</text>
<text top="472" left="470" width="0" height="10" font="46"> S</text>
<text top="462" left="470" width="0" height="10" font="46">c</text>
<text top="456" left="470" width="0" height="10" font="46">o</text>
<text top="450" left="470" width="0" height="10" font="46">re</text>
<text top="250" left="295" width="25" height="9" font="31">KMAP</text>
<text top="261" left="295" width="5" height="9" font="31">1</text>
<text top="272" left="295" width="10" height="9" font="31">10</text>
<text top="284" left="295" width="10" height="9" font="31">40</text>
<text top="516" left="649" width="13" height="12" font="47">B2</text>
<text top="516" left="433" width="13" height="12" font="47">B1</text>
<text top="343" left="649" width="13" height="12" font="47">A2</text>
<text top="261" left="297" width="30" height="9" font="45">k-MAP</text>
<text top="272" left="296" width="6" height="9" font="45">S</text>
<text top="274" left="303" width="36" height="7" font="48">TACCATO</text>
<text top="272" left="339" width="24" height="9" font="45"> m 10</text>
<text top="284" left="296" width="6" height="9" font="45">S</text>
<text top="285" left="303" width="36" height="7" font="48">TACCATO</text>
<text top="284" left="339" width="24" height="9" font="45"> m 40</text>
<text top="295" left="295" width="15" height="9" font="31">100</text>
<text top="307" left="295" width="17" height="9" font="31">Max</text>
<text top="318" left="295" width="33" height="9" font="31">FullSFA</text>
<text top="297" left="296" width="6" height="9" font="45">S</text>
<text top="298" left="302" width="36" height="7" font="48">TACCATO</text>
<text top="297" left="339" width="30" height="9" font="45"> m 100</text>
<text top="308" left="296" width="6" height="9" font="45">S</text>
<text top="309" left="302" width="36" height="7" font="48">TACCATO</text>
<text top="308" left="339" width="32" height="9" font="45"> m Max</text>
<text top="319" left="296" width="36" height="9" font="45">FullSFA</text>
<text top="251" left="296" width="21" height="9" font="45">MAP</text>
<text top="587" left="108" width="702" height="15" font="4">Figure 15: Precision and F-1 Score variations with k on two queries: (A) ‘P resident’, and (B)</text>
<text top="607" left="108" width="296" height="15" font="4">‘U.S.C. 2\d\d\d’. N umAns is set to 100.</text>
<text top="646" left="133" width="677" height="15" font="4">As mentioned before, k-MAP precision is high, since it returns only a few answers, almost</text>
<text top="666" left="108" width="702" height="15" font="4">all of which are correct. On the other hand, FullSFA precision is lowest, since it returns many</text>
<text top="687" left="108" width="702" height="17" font="4">incorrect answers (along with most of the correct ones). Again, Staccato falls in between, with</text>
<text top="707" left="108" width="702" height="15" font="4">the precision being high (close to k-MAP) for lower values of m and k, and gradually drops as</text>
<text top="727" left="108" width="702" height="15" font="4">we increase m and k. Also, the precision drops faster for higher values of m. It should be noted</text>
<text top="748" left="108" width="702" height="15" font="4">that the precision needn’t drop monotonically, since additional correct answers might be obtained</text>
<text top="768" left="108" width="702" height="15" font="4">at higher m and k, boosting both the recall and precision. For completeness sake, the F-1 score</text>
<text top="788" left="108" width="702" height="15" font="4">variation is also presented in Figure 15. Interestingly, for the regex query, the F-1 score of both</text>
<text top="809" left="108" width="702" height="17" font="4">k-MAP and FullSFA are lower than that of Staccato, the former due to its lower recall, and the</text>
<text top="829" left="108" width="229" height="15" font="4">latter due to its lower precision.</text>
<text top="872" left="108" width="31" height="16" font="1">H.3</text>
<text top="872" left="160" width="202" height="16" font="1">Sensitivity to NumAns</text>
<text top="904" left="108" width="702" height="15" font="4">As we mentioned in Section 5, the quality of the answers obtained is sensitive to the N umAns</text>
<text top="924" left="108" width="702" height="15" font="4">parameter. If it is set too low (lower than the number of ground truth answers), the recall is likely</text>
<text top="944" left="108" width="702" height="15" font="4">to be low. On the other hand, if it is set too high, the recall will increase, but the precision might</text>
<text top="965" left="108" width="702" height="15" font="4">suﬀer. Thus, we perform a sensitivity analysis on N umAns for the recall, precision and F-1 score</text>
<text top="985" left="108" width="702" height="15" font="4">obtained. The same queries as in Figure 6 are used and the parameter setting is m = 40, k = 75.</text>
<text top="1005" left="108" width="200" height="15" font="4">Figure 16 shows the results.</text>
<text top="1069" left="451" width="16" height="15" font="4">37</text>
</page>
<page number="38" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="49" size="9" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="50" size="6" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="51" size="12" family="Times" color="#3b3b3b"/>
	<fontspec id="52" size="10" family="Times" color="#3b3b3b"/>
	<fontspec id="53" size="7" family="Times" color="#3b3b3b"/>
	<fontspec id="54" size="8" family="Helvetica" color="#3b3b3b"/>
<text top="365" left="240" width="3" height="13" font="29"> </text>
<text top="365" left="458" width="3" height="13" font="29"> </text>
<text top="243" left="328" width="49" height="13" font="12">NumAns</text>
<text top="243" left="571" width="49" height="13" font="12">NumAns</text>
<text top="232" left="255" width="6" height="11" font="44">1</text>
<text top="232" left="348" width="11" height="11" font="44">10</text>
<text top="232" left="442" width="17" height="11" font="44">100</text>
<text top="221" left="246" width="6" height="11" font="44">0</text>
<text top="202" left="238" width="14" height="11" font="44">0.2</text>
<text top="182" left="238" width="14" height="11" font="44">0.4</text>
<text top="163" left="238" width="14" height="11" font="44">0.6</text>
<text top="143" left="238" width="14" height="11" font="44">0.8</text>
<text top="124" left="246" width="6" height="11" font="44">1</text>
<text top="201" left="230" width="0" height="13" font="12">P</text>
<text top="192" left="230" width="0" height="13" font="12">re</text>
<text top="181" left="230" width="0" height="13" font="12">c</text>
<text top="174" left="230" width="0" height="13" font="12">is</text>
<text top="164" left="230" width="0" height="13" font="12">io</text>
<text top="153" left="230" width="0" height="13" font="12">n</text>
<text top="217" left="437" width="12" height="11" font="47">A1</text>
<text top="181" left="272" width="26" height="11" font="44">kmap</text>
<text top="193" left="272" width="37" height="11" font="44">m40k50</text>
<text top="206" left="272" width="14" height="11" font="44">sfa</text>
<text top="181" left="274" width="37" height="11" font="49">k-MAP</text>
<text top="194" left="274" width="8" height="11" font="49">S</text>
<text top="195" left="282" width="43" height="9" font="45">TACCATO</text>
<text top="194" left="326" width="57" height="11" font="49"> m 40 k 50</text>
<text top="207" left="274" width="44" height="11" font="49">FullSFA</text>
<text top="181" left="272" width="26" height="11" font="44">kmap</text>
<text top="193" left="272" width="37" height="11" font="44">m40k50</text>
<text top="206" left="272" width="14" height="11" font="44">sfa</text>
<text top="183" left="274" width="54" height="9" font="46">k-MAP k 75</text>
<text top="195" left="274" width="7" height="9" font="46">S</text>
<text top="197" left="281" width="40" height="8" font="50">TACCATO</text>
<text top="195" left="321" width="48" height="9" font="46"> m 40 k 75</text>
<text top="208" left="274" width="38" height="9" font="46">FullSFA</text>
<text top="232" left="498" width="6" height="11" font="44">1</text>
<text top="232" left="591" width="11" height="11" font="44">10</text>
<text top="232" left="685" width="17" height="11" font="44">100</text>
<text top="221" left="489" width="6" height="11" font="44">0</text>
<text top="202" left="481" width="14" height="11" font="44">0.2</text>
<text top="182" left="481" width="14" height="11" font="44">0.4</text>
<text top="163" left="481" width="14" height="11" font="44">0.6</text>
<text top="143" left="481" width="14" height="11" font="44">0.8</text>
<text top="124" left="489" width="6" height="11" font="44">1</text>
<text top="191" left="473" width="0" height="13" font="12">R</text>
<text top="182" left="473" width="0" height="13" font="12">e</text>
<text top="176" left="473" width="0" height="13" font="12">c</text>
<text top="169" left="473" width="0" height="13" font="12">a</text>
<text top="162" left="473" width="0" height="13" font="12">ll</text>
<text top="217" left="680" width="12" height="11" font="47">A2</text>
<text top="366" left="255" width="6" height="11" font="44">1</text>
<text top="366" left="348" width="11" height="11" font="44">10</text>
<text top="366" left="442" width="17" height="11" font="44">100</text>
<text top="355" left="246" width="6" height="11" font="44">0</text>
<text top="335" left="238" width="14" height="11" font="44">0.2</text>
<text top="316" left="238" width="14" height="11" font="44">0.4</text>
<text top="296" left="238" width="14" height="11" font="44">0.6</text>
<text top="277" left="238" width="14" height="11" font="44">0.8</text>
<text top="258" left="246" width="6" height="11" font="44">1</text>
<text top="334" left="230" width="0" height="13" font="12">P</text>
<text top="326" left="230" width="0" height="13" font="12">re</text>
<text top="315" left="230" width="0" height="13" font="12">c</text>
<text top="308" left="230" width="0" height="13" font="12">is</text>
<text top="298" left="230" width="0" height="13" font="12">io</text>
<text top="287" left="230" width="0" height="13" font="12">n</text>
<text top="377" left="328" width="49" height="13" font="12">NumAns</text>
<text top="351" left="437" width="12" height="11" font="47">B1</text>
<text top="194" left="585" width="99" height="11" font="49">No more answers</text>
<text top="366" left="498" width="6" height="11" font="44">1</text>
<text top="366" left="591" width="11" height="11" font="44">10</text>
<text top="366" left="685" width="17" height="11" font="44">100</text>
<text top="355" left="489" width="6" height="11" font="44">0</text>
<text top="335" left="481" width="14" height="11" font="44">0.2</text>
<text top="316" left="481" width="14" height="11" font="44">0.4</text>
<text top="296" left="481" width="14" height="11" font="44">0.6</text>
<text top="277" left="481" width="14" height="11" font="44">0.8</text>
<text top="258" left="489" width="6" height="11" font="44">1</text>
<text top="325" left="473" width="0" height="13" font="12">R</text>
<text top="316" left="473" width="0" height="13" font="12">e</text>
<text top="309" left="473" width="0" height="13" font="12">c</text>
<text top="302" left="473" width="0" height="13" font="12">a</text>
<text top="295" left="473" width="0" height="13" font="12">ll</text>
<text top="377" left="571" width="49" height="13" font="12">NumAns</text>
<text top="351" left="680" width="12" height="11" font="47">B2</text>
<text top="413" left="108" width="702" height="15" font="4">Figure 16: Sensitivity of Precision and Recall to N umAns on two queries: (A) P resident, and (B)</text>
<text top="434" left="108" width="312" height="15" font="4">U.S.C. 2\d\d\d. The x-axes are in logscale.</text>
<text top="732" left="192" width="4" height="16" font="51"> </text>
<text top="732" left="457" width="4" height="16" font="51"> </text>
<text top="596" left="218" width="6" height="12" font="44">4</text>
<text top="596" left="253" width="6" height="12" font="44">7</text>
<text top="596" left="286" width="11" height="12" font="44">10</text>
<text top="596" left="321" width="11" height="12" font="44">13</text>
<text top="596" left="357" width="11" height="12" font="44">16</text>
<text top="583" left="199" width="14" height="12" font="44">0.1</text>
<text top="562" left="208" width="6" height="12" font="44">1</text>
<text top="541" left="202" width="11" height="12" font="44">10</text>
<text top="520" left="197" width="17" height="12" font="44">100</text>
<text top="498" left="192" width="22" height="12" font="44">1000</text>
<text top="596" left="407" width="6" height="12" font="44">0</text>
<text top="596" left="456" width="6" height="12" font="44">1</text>
<text top="596" left="505" width="6" height="12" font="44">2</text>
<text top="596" left="553" width="6" height="12" font="44">3</text>
<text top="583" left="389" width="14" height="12" font="44">0.1</text>
<text top="562" left="397" width="6" height="12" font="44">1</text>
<text top="541" left="392" width="11" height="12" font="44">10</text>
<text top="520" left="386" width="17" height="12" font="44">100</text>
<text top="498" left="381" width="22" height="12" font="44">1000</text>
<text top="596" left="606" width="6" height="12" font="44">0</text>
<text top="596" left="653" width="6" height="12" font="44">1</text>
<text top="596" left="699" width="6" height="12" font="44">2</text>
<text top="596" left="746" width="6" height="12" font="44">3</text>
<text top="583" left="587" width="14" height="12" font="44">0.1</text>
<text top="566" left="596" width="6" height="12" font="44">1</text>
<text top="549" left="590" width="11" height="12" font="44">10</text>
<text top="532" left="585" width="17" height="12" font="44">100</text>
<text top="515" left="579" width="22" height="12" font="44">1000</text>
<text top="498" left="574" width="27" height="12" font="44">10000</text>
<text top="723" left="216" width="6" height="12" font="44">4</text>
<text top="723" left="252" width="6" height="12" font="44">7</text>
<text top="723" left="285" width="11" height="12" font="44">10</text>
<text top="723" left="321" width="11" height="12" font="44">13</text>
<text top="723" left="357" width="11" height="12" font="44">16</text>
<text top="710" left="206" width="6" height="12" font="44">0</text>
<text top="689" left="192" width="20" height="12" font="44">0.25</text>
<text top="668" left="197" width="14" height="12" font="44">0.5</text>
<text top="647" left="192" width="20" height="12" font="44">0.75</text>
<text top="626" left="206" width="6" height="12" font="44">1</text>
<text top="723" left="405" width="6" height="12" font="44">0</text>
<text top="723" left="454" width="6" height="12" font="44">1</text>
<text top="723" left="503" width="6" height="12" font="44">2</text>
<text top="723" left="552" width="6" height="12" font="44">3</text>
<text top="710" left="395" width="6" height="12" font="44">0</text>
<text top="689" left="381" width="20" height="12" font="44">0.25</text>
<text top="668" left="386" width="14" height="12" font="44">0.5</text>
<text top="647" left="381" width="20" height="12" font="44">0.75</text>
<text top="626" left="395" width="6" height="12" font="44">1</text>
<text top="723" left="598" width="6" height="12" font="44">0</text>
<text top="723" left="647" width="6" height="12" font="44">1</text>
<text top="723" left="696" width="6" height="12" font="44">2</text>
<text top="723" left="745" width="6" height="12" font="44">3</text>
<text top="710" left="588" width="6" height="12" font="44">0</text>
<text top="689" left="574" width="20" height="12" font="44">0.25</text>
<text top="668" left="579" width="14" height="12" font="44">0.5</text>
<text top="647" left="574" width="20" height="12" font="44">0.75</text>
<text top="626" left="588" width="6" height="12" font="44">1</text>
<text top="597" left="180" width="0" height="14" font="52">To</text>
<text top="583" left="180" width="0" height="14" font="52">ta</text>
<text top="572" left="180" width="0" height="14" font="52">l </text>
<text top="565" left="180" width="0" height="14" font="52">R</text>
<text top="556" left="180" width="0" height="14" font="52">u</text>
<text top="549" left="180" width="0" height="14" font="52">n</text>
<text top="541" left="180" width="0" height="14" font="52">ti</text>
<text top="534" left="180" width="0" height="14" font="52">m</text>
<text top="523" left="180" width="0" height="14" font="52">e</text>
<text top="516" left="180" width="0" height="14" font="52"> (</text>
<text top="508" left="180" width="0" height="14" font="52">s</text>
<text top="501" left="180" width="0" height="14" font="52">e</text>
<text top="494" left="180" width="0" height="14" font="52">c</text>
<text top="487" left="180" width="0" height="14" font="52">)</text>
<text top="688" left="180" width="0" height="14" font="52">R</text>
<text top="679" left="180" width="0" height="14" font="52">e</text>
<text top="672" left="180" width="0" height="14" font="52">c</text>
<text top="665" left="180" width="0" height="14" font="52">a</text>
<text top="658" left="180" width="0" height="14" font="52">ll</text>
<text top="608" left="244" width="76" height="14" font="52">Query length</text>
<text top="608" left="422" width="114" height="14" font="52">No. of wildcards: \d</text>
<text top="608" left="618" width="127" height="14" font="52">No. of wildcards: (\x)*</text>
<text top="736" left="244" width="76" height="14" font="52">Query length</text>
<text top="737" left="417" width="114" height="14" font="52">No. of wildcards: \d</text>
<text top="737" left="609" width="127" height="14" font="52">No. of wildcards: (\x)*</text>
<text top="505" left="222" width="11" height="10" font="53">A1</text>
<text top="505" left="610" width="11" height="10" font="53">A3</text>
<text top="505" left="412" width="11" height="10" font="53">A2</text>
<text top="705" left="220" width="11" height="10" font="53">B1</text>
<text top="706" left="602" width="11" height="10" font="53">B3</text>
<text top="705" left="410" width="11" height="10" font="53">B2</text>
<text top="654" left="245" width="7" height="14" font="52">1</text>
<text top="670" left="245" width="7" height="14" font="52">2</text>
<text top="686" left="245" width="7" height="14" font="52">3</text>
<text top="674" left="243" width="7" height="10" font="46">S</text>
<text top="675" left="250" width="39" height="8" font="50">TACCATO</text>
<text top="674" left="289" width="49" height="10" font="46"> m 40 k 25</text>
<text top="657" left="245" width="58" height="10" font="46">k-MAP k 25 </text>
<text top="689" left="244" width="38" height="10" font="46">FullSFA</text>
<text top="780" left="108" width="702" height="15" font="4">Figure 17: Impact of Query Length and Complexity: (A1, B1) correspond to the keyword queries,</text>
<text top="800" left="108" width="702" height="15" font="4">(A2, B2) correspond to the simple wildcard queries, while the last pair correspond to the complex</text>
<text top="820" left="108" width="479" height="15" font="4">wildcard queries. N umAns is set to 100. Runtimes are in logscale.</text>
<text top="973" left="313" width="3" height="12" font="47"> </text>
<text top="973" left="458" width="3" height="12" font="47"> </text>
<text top="958" left="330" width="6" height="13" font="12">1</text>
<text top="958" left="354" width="12" height="13" font="12">10</text>
<text top="958" left="394" width="12" height="13" font="12">25</text>
<text top="958" left="462" width="12" height="13" font="12">50</text>
<text top="958" left="530" width="12" height="13" font="12">75</text>
<text top="958" left="594" width="19" height="13" font="12">100</text>
<text top="946" left="321" width="7" height="13" font="52">0</text>
<text top="930" left="314" width="13" height="13" font="52">20</text>
<text top="914" left="314" width="13" height="13" font="52">40</text>
<text top="898" left="314" width="13" height="13" font="52">60</text>
<text top="881" left="314" width="13" height="13" font="52">80</text>
<text top="954" left="309" width="0" height="11" font="35">T</text>
<text top="947" left="309" width="0" height="11" font="35">im</text>
<text top="932" left="309" width="0" height="11" font="35">e</text>
<text top="926" left="309" width="0" height="11" font="35"> (</text>
<text top="918" left="309" width="0" height="11" font="35">in</text>
<text top="908" left="309" width="0" height="11" font="35"> s</text>
<text top="898" left="309" width="0" height="11" font="35">e</text>
<text top="891" left="309" width="0" height="11" font="35">c</text>
<text top="884" left="309" width="0" height="11" font="35">s</text>
<text top="877" left="309" width="0" height="11" font="35">)</text>
<text top="967" left="390" width="122" height="13" font="52">k - # Paths Parameter</text>
<text top="917" left="512" width="61" height="13" font="52">m 40 n 500</text>
<text top="911" left="415" width="54" height="13" font="52">m 1 n 152</text>
<text top="1007" left="192" width="528" height="17" font="4">Figure 18: Sensitivity of Staccato construction time to the parameter k</text>
<text top="1069" left="451" width="16" height="15" font="4">38</text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="133" width="677" height="15" font="4">As Figures 16 (A1) and (A2) show, the precision initially remains high (here, at 1) when</text>
<text top="133" left="108" width="702" height="15" font="4">N umAns is low. This is because the highest probability answers (that appear on top) are likely</text>
<text top="154" left="108" width="702" height="15" font="4">to be correct. As we increase N umAns, we get more correct answers and thus recall increases</text>
<text top="174" left="108" width="702" height="15" font="4">constantly. Once we near the number of ground truth answers, the recall starts to ﬂatten, while</text>
<text top="194" left="108" width="702" height="15" font="4">the precision starts to drop. For k-MAP, beyond a value of N umAns, no more answers are returned</text>
<text top="215" left="108" width="702" height="15" font="4">since no matches exist. On the other hand, in FullSFA, almost all SFAs match almost all queries,</text>
<text top="235" left="108" width="702" height="15" font="4">and so we keep getting answers. Moreover, since FullSFA uses the full probabilities, the increase</text>
<text top="255" left="108" width="702" height="17" font="4">is relatively smooth. Staccato for the given parameters gives more answers than k-MAP, and</text>
<text top="276" left="108" width="702" height="17" font="4">achieves higher recall but falls short of FullSFA. The recall for the regex query in Staccato recall</text>
<text top="296" left="108" width="702" height="17" font="4">keeps increasing after being relatively ﬂat many times. Thus, Staccato can still achieve high</text>
<text top="316" left="108" width="349" height="15" font="4">recall, though at a lower precision than FullSFA.</text>
<text top="359" left="108" width="31" height="16" font="1">H.4</text>
<text top="359" left="160" width="351" height="16" font="1">Eﬀect of Query Length and Complexity</text>
<text top="391" left="108" width="702" height="15" font="4">We now study the impact of they query length and complexity on the runtime and recall obtained.</text>
<text top="411" left="108" width="702" height="15" font="4">For this study, we use three sets of queries. The ﬁrst set consists of keyword queries of increasing</text>
<text top="432" left="108" width="702" height="15" font="4">length. The second set consists of regular expression queries with an increasing number of simple</text>
<text top="452" left="108" width="702" height="15" font="4">wildcards, e.g., ‘U.S.C. 2\d\d’ (where \d is any digit). The third set too consists of regular ex-</text>
<text top="472" left="108" width="702" height="15" font="4">pression queries, but with the more complex Kleene star as wildcards, e.g., ‘U (\x) ∗ S(\x) ∗ C. 2’</text>
<text top="493" left="108" width="667" height="15" font="4">(where \x is any character). Figure 17 shows the runtime and recall results for these queries.</text>
<text top="513" left="133" width="677" height="15" font="4">As expected, the plots show that the runtime increases polynomially, but slowly with query</text>
<text top="533" left="108" width="702" height="15" font="4">length in all the approaches. However, the increase is more pronounced for FullSFA with complex</text>
<text top="554" left="108" width="702" height="15" font="4">wildcards (Figure 17:A3) since the composition based query processing produces much larger inter-</text>
<text top="574" left="108" width="702" height="15" font="4">mediate results. It can also be seen that there is no deﬁnite trend in the obtained recall for (Figure</text>
<text top="594" left="108" width="503" height="15" font="4">17:A1), since a longer query can have better recall than a shorter one.</text>
<text top="637" left="108" width="31" height="16" font="1">H.5</text>
<text top="637" left="160" width="196" height="16" font="1">Staccato Construction</text>
<text top="669" left="108" width="702" height="17" font="4">We now present the sensitivity of the Staccato construction times to the parameter k. Figure 18</text>
<text top="689" left="108" width="126" height="15" font="4">shows the results.</text>
<text top="710" left="133" width="677" height="15" font="4">The plot shows that the runtimes increase linearly with k. However, as mentioned in Section</text>
<text top="730" left="108" width="702" height="15" font="4">5, this linearity is not guaranteed since the chunk structure obtained may not be the same across</text>
<text top="750" left="108" width="316" height="15" font="4">diﬀerent values of k, for a ﬁxed SFA and m.</text>
<text top="793" left="108" width="31" height="16" font="1">H.6</text>
<text top="793" left="160" width="224" height="16" font="1">Index Construction Time</text>
<text top="825" left="108" width="702" height="17" font="4">Here, we discuss the runtimes for the Staccato index construction, which is a two-phase process.</text>
<text top="845" left="108" width="702" height="15" font="4">First, we obtain the postings independently for each SFA, and then unify all postings into the</text>
<text top="866" left="108" width="516" height="15" font="4">index. We pick a few SFAs and run the indexing in a controlled setting.</text>
<text top="886" left="133" width="677" height="15" font="4">Figure 19 shows the sensitivity of the construction times for m and k for a single SFA, and also</text>
<text top="906" left="108" width="702" height="15" font="4">tabulates the bulk index load times for an entire dataset (LT). Firstly, we can see these runtimes</text>
<text top="927" left="108" width="702" height="15" font="4">are mostly practical. Also, we can see a linear trend in k, with a non-linearity showing up at</text>
<text top="947" left="108" width="702" height="15" font="4">m = 40, k = 50. we found that this was because the data in this parameter space had many</text>
<text top="967" left="108" width="702" height="15" font="4">single-character wide blocks, leading to the presence of more terms, and blowing up the size of</text>
<text top="988" left="108" width="702" height="15" font="4">the index. This causes two eﬀects - the number of postings per SFA goes up by upto three orders</text>
<text top="1069" left="451" width="16" height="15" font="4">39</text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1188" width="918">
	<fontspec id="55" size="11" family="Helvetica" color="#3b3b3b"/>
	<fontspec id="56" size="11" family="Times" color="#3b3b3b"/>
	<fontspec id="57" size="13" family="Times" color="#3b3b3b"/>
	<fontspec id="58" size="11" family="Times" color="#3b3b3b"/>
<text top="256" left="265" width="3" height="12" font="47"> </text>
<text top="256" left="458" width="3" height="12" font="47"> </text>
<text top="235" left="297" width="47" height="11" font="35">1 10 25</text>
<text top="235" left="367" width="13" height="11" font="35">50</text>
<text top="235" left="403" width="13" height="11" font="35">75</text>
<text top="235" left="437" width="20" height="11" font="35">100</text>
<text top="222" left="278" width="17" height="11" font="35">0.1</text>
<text top="186" left="281" width="13" height="11" font="35">10</text>
<text top="150" left="268" width="27" height="11" font="35">1000</text>
<text top="114" left="254" width="40" height="11" font="35">100000</text>
<text top="251" left="310" width="136" height="12" font="55">k - # Paths Parameter</text>
<text top="234" left="265" width="0" height="12" font="55">T</text>
<text top="226" left="265" width="0" height="12" font="55">im</text>
<text top="210" left="265" width="0" height="12" font="55">e</text>
<text top="203" left="265" width="0" height="12" font="55"> (</text>
<text top="194" left="265" width="0" height="12" font="55">in</text>
<text top="182" left="265" width="0" height="12" font="55"> m</text>
<text top="166" left="265" width="0" height="12" font="55">il</text>
<text top="158" left="265" width="0" height="12" font="55">li</text>
<text top="150" left="265" width="0" height="12" font="55">s</text>
<text top="143" left="265" width="0" height="12" font="55">e</text>
<text top="136" left="265" width="0" height="12" font="55">c</text>
<text top="128" left="265" width="0" height="12" font="55">s</text>
<text top="121" left="265" width="0" height="12" font="55">)</text>
<text top="118" left="464" width="53" height="15" font="56">k \ m 1</text>
<text top="118" left="534" width="15" height="15" font="56">10</text>
<text top="118" left="572" width="15" height="15" font="56">40</text>
<text top="118" left="608" width="22" height="15" font="56">100</text>
<text top="117" left="641" width="29" height="17" font="57">Max</text>
<text top="140" left="476" width="8" height="15" font="56">1</text>
<text top="140" left="509" width="8" height="15" font="58">8</text>
<text top="140" left="534" width="15" height="15" font="58">25</text>
<text top="140" left="572" width="15" height="15" font="58">29</text>
<text top="140" left="612" width="15" height="15" font="58">33</text>
<text top="140" left="648" width="15" height="15" font="58">33</text>
<text top="161" left="472" width="15" height="15" font="56">10</text>
<text top="161" left="505" width="44" height="15" font="58">29 32</text>
<text top="161" left="572" width="15" height="15" font="58">43</text>
<text top="161" left="612" width="15" height="15" font="58">60</text>
<text top="161" left="648" width="15" height="15" font="58">97</text>
<text top="182" left="472" width="15" height="15" font="56">25</text>
<text top="182" left="505" width="44" height="15" font="58">43 43</text>
<text top="182" left="572" width="15" height="15" font="58">58</text>
<text top="182" left="608" width="58" height="15" font="58">106 303</text>
<text top="203" left="472" width="15" height="15" font="56">50</text>
<text top="203" left="505" width="91" height="15" font="58">66 67 1,497</text>
<text top="203" left="617" width="4" height="15" font="58">-</text>
<text top="203" left="653" width="4" height="15" font="58">-</text>
<text top="224" left="472" width="15" height="15" font="56">75</text>
<text top="224" left="505" width="91" height="15" font="58">96 99 7,365</text>
<text top="224" left="617" width="4" height="15" font="58">-</text>
<text top="224" left="653" width="4" height="15" font="58">-</text>
<text top="245" left="468" width="132" height="15" font="56">100 111 126 10,690</text>
<text top="245" left="617" width="4" height="15" font="58">-</text>
<text top="245" left="653" width="4" height="15" font="58">-</text>
<text top="122" left="314" width="37" height="13" font="52">m Max</text>
<text top="140" left="333" width="34" height="13" font="52">m 100</text>
<text top="143" left="408" width="27" height="13" font="52">m 40</text>
<text top="156" left="397" width="27" height="13" font="52">m 10</text>
<text top="212" left="371" width="21" height="13" font="52">m 1</text>
<text top="248" left="663" width="9" height="15" font="58">B</text>
<text top="212" left="436" width="9" height="15" font="58">A</text>
<text top="294" left="108" width="702" height="17" font="4">Figure 19: (A) Staccato index construction times. Note the logscale on the y-axis. (B) Bulk</text>
<text top="314" left="108" width="488" height="15" font="4">index load times (in seconds) for the index tables of the LT dataset.</text>
<text top="365" left="108" width="702" height="15" font="4">of magnitude, and the selectivity of most terms across the dataset shoots up too, as was seen in</text>
<text top="385" left="108" width="95" height="15" font="4">Figure 9 (A).</text>
<text top="405" left="133" width="677" height="15" font="4">Since running the indexing on all SFAs is also easily parallelizable, we again used Condor [2].</text>
<text top="426" left="108" width="702" height="15" font="4">Overall, the index construction on all the data, for the above parameters took about 3 hours. After</text>
<text top="446" left="108" width="702" height="15" font="4">obtaining the postings lists for all SFAs, we loaded them all into the index table. These bulk load</text>
<text top="466" left="108" width="702" height="15" font="4">times are tabulated in Figure 19 (B). We can see that the load times are concomitant with the</text>
<text top="487" left="108" width="405" height="15" font="4">construction times due to the size of the index obtained.</text>
<text top="529" left="108" width="31" height="16" font="1">H.7</text>
<text top="529" left="160" width="195" height="16" font="1">Index Utility and Size</text>
<text top="740" left="265" width="3" height="15" font="58"> </text>
<text top="740" left="457" width="3" height="15" font="58"> </text>
<text top="728" left="524" width="7" height="15" font="56">0</text>
<text top="728" left="547" width="126" height="15" font="56">20 40 60 80 100</text>
<text top="714" left="514" width="7" height="15" font="56">1</text>
<text top="686" left="506" width="15" height="15" font="56">10</text>
<text top="659" left="498" width="23" height="15" font="56">100</text>
<text top="632" left="490" width="31" height="15" font="56">1000</text>
<text top="605" left="483" width="38" height="15" font="56">10000</text>
<text top="577" left="475" width="46" height="15" font="56">100000</text>
<text top="728" left="284" width="7" height="15" font="56">0</text>
<text top="728" left="311" width="15" height="15" font="56">20</text>
<text top="728" left="343" width="15" height="15" font="56">40</text>
<text top="728" left="374" width="15" height="15" font="56">60</text>
<text top="728" left="405" width="50" height="15" font="56">80 100</text>
<text top="714" left="273" width="7" height="15" font="56">0</text>
<text top="686" left="266" width="15" height="15" font="56">20</text>
<text top="659" left="266" width="15" height="15" font="56">40</text>
<text top="632" left="266" width="15" height="15" font="56">60</text>
<text top="605" left="266" width="15" height="15" font="56">80</text>
<text top="577" left="258" width="23" height="15" font="56">100</text>
<text top="741" left="529" width="134" height="15" font="56">k - # Paths Parameter</text>
<text top="741" left="297" width="134" height="15" font="56">k - # Paths Parameter</text>
<text top="713" left="478" width="0" height="15" font="56">S</text>
<text top="704" left="478" width="0" height="15" font="56">iz</text>
<text top="694" left="478" width="0" height="15" font="56">e </text>
<text top="683" left="478" width="0" height="15" font="56">o</text>
<text top="675" left="478" width="0" height="15" font="56">f </text>
<text top="667" left="478" width="0" height="15" font="56">In</text>
<text top="655" left="478" width="0" height="15" font="56">d</text>
<text top="647" left="478" width="0" height="15" font="56">ex</text>
<text top="633" left="478" width="0" height="15" font="56"> (</text>
<text top="625" left="478" width="0" height="15" font="56">in</text>
<text top="613" left="478" width="0" height="15" font="56"> M</text>
<text top="598" left="478" width="0" height="15" font="56">B</text>
<text top="589" left="478" width="0" height="15" font="56">)</text>
<text top="698" left="258" width="0" height="15" font="56">S</text>
<text top="690" left="258" width="0" height="15" font="56">el</text>
<text top="679" left="258" width="0" height="15" font="56">ec</text>
<text top="664" left="258" width="0" height="15" font="56">ti</text>
<text top="656" left="258" width="0" height="15" font="56">vi</text>
<text top="645" left="258" width="0" height="15" font="56">ty</text>
<text top="633" left="258" width="0" height="15" font="56"> (</text>
<text top="625" left="258" width="0" height="15" font="56">in</text>
<text top="613" left="258" width="0" height="15" font="56"> %</text>
<text top="598" left="258" width="0" height="15" font="56">)</text>
<text top="583" left="529" width="8" height="13" font="12">B</text>
<text top="583" left="289" width="8" height="13" font="12">A</text>
<text top="600" left="307" width="21" height="13" font="29">max</text>
<text top="614" left="307" width="19" height="13" font="29">100</text>
<text top="628" left="307" width="13" height="13" font="29">40</text>
<text top="642" left="307" width="13" height="13" font="29">10</text>
<text top="657" left="307" width="6" height="13" font="29">1</text>
<text top="599" left="308" width="35" height="13" font="12">m Max</text>
<text top="614" left="308" width="32" height="13" font="12">m 100</text>
<text top="628" left="307" width="26" height="13" font="12">m 40</text>
<text top="642" left="308" width="26" height="13" font="12">m 10</text>
<text top="656" left="308" width="19" height="13" font="12">m 1</text>
<text top="779" left="108" width="702" height="17" font="4">Figure 20: (A) Selectivity (%ge of SFAs) of the term ‘public’ using the Staccato index, for various</text>
<text top="800" left="108" width="608" height="17" font="4">values of m and k. (B) Size of the Staccato index. Note the logscale on the y-axis.</text>
<text top="839" left="133" width="677" height="15" font="4">It was discussed in Section 5 that the inverted index becomes less ‘useful’ as m and k become</text>
<text top="859" left="108" width="702" height="15" font="4">higher. To justify that, we study the selectivity of a query that uses the index. Here, we deﬁne</text>
<text top="879" left="108" width="702" height="15" font="4">selectivity as the percentage of the SFAs in the dataset that match the query when using the index.</text>
<text top="900" left="108" width="702" height="15" font="4">Figure 20 (A) shows the results for a query on the CA dataset. A complementary aspect of the</text>
<text top="920" left="108" width="702" height="17" font="4">utility of the index is its size. Figure 20 (B) shows the size of the index over the data in Staccato.</text>
<text top="940" left="133" width="677" height="15" font="4">Two interesting things can be seen from these plots. The query selectivity for lower values of</text>
<text top="961" left="108" width="702" height="15" font="4">m and k is relatively low, but for middle values of m (m = 40), the term starts to appear in many</text>
<text top="981" left="108" width="702" height="15" font="4">more SFAs as k increases. For higher values of m (m = 100, M ax), as k increases, the the selectivity</text>
<text top="1001" left="108" width="702" height="15" font="4">shoots up to nearly 100%, which means that almost all SFAs in the dataset contain the term. This</text>
<text top="1022" left="108" width="702" height="15" font="4">implies that the index is no longer useful in the sense that almost the entire dataset is returned</text>
<text top="1069" left="451" width="16" height="15" font="4">40</text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1188" width="918">
<text top="113" left="108" width="702" height="15" font="4">as answers. We observed the same behavior across all queries and datasets. The plot of the index</text>
<text top="133" left="108" width="702" height="15" font="4">sizes reﬂects this phenomenon. The size varies largely linearly as expected, but at m = 40, k = 50,</text>
<text top="154" left="108" width="702" height="15" font="4">it shoots up two orders of magnitude, similar to Figure 19. This size increase is largely because of</text>
<text top="174" left="108" width="702" height="15" font="4">the selectivity increase, i.e., many more entries appearing in the index. The index construction for</text>
<text top="194" left="108" width="702" height="15" font="4">m = 100, M ax for k = 50, and above was skipped since the index sizes exceeded the available disk</text>
<text top="215" left="108" width="702" height="15" font="4">space (over 200 GB). However, the selectivity can be easily computed after obtaining just the ﬁrst</text>
<text top="235" left="108" width="702" height="15" font="4">posting, with no need to compute all the postings. The selectivity conﬁrms that these parameter</text>
<text top="255" left="108" width="307" height="15" font="4">settings do not give useful indexes anyway.</text>
<text top="1069" left="451" width="16" height="15" font="4">41</text>
</page>
</pdf2xml>
